<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MygodLibrary</name>
    </assembly>
    <members>
        <member name="T:Mygod.Helper">
            <summary>
            辅助类。
            </summary>
        </member>
        <member name="M:Mygod.Helper.Invoke(System.Windows.Threading.Dispatcher,System.Action)">
            <summary>
            用与 System.Windows.Threading.Dispatcher 关联的线程上的指定参数同步执行指定委托。
            </summary>
            <param name="dispatcher">指定 System.Windows.Threading.Dispatcher。</param>
            <param name="a">该方法将被送到队列中。</param>
        </member>
        <member name="M:Mygod.Helper.Invoke``1(System.Windows.Threading.Dispatcher,System.Func{``0})">
            <summary>
            用与 System.Windows.Threading.Dispatcher 关联的线程上的指定参数同步执行指定委托。
            </summary>
            <param name="dispatcher">指定 System.Windows.Threading.Dispatcher。</param>
            <param name="a">该方法将被送到队列中。</param>
        </member>
        <member name="M:Mygod.Helper.GetMessage(System.Exception)">
            <summary>
            用于将错误转化为可读的字符串。
            </summary>
            <param name="e">错误。</param>
            <returns>错误字符串。</returns>
        </member>
        <member name="M:Mygod.Helper.Invert(System.Windows.Media.Matrix,System.Windows.Media.Matrix@)">
            <summary>
            Inverts a Matrix. The Invert functionality on the Matrix type is 
            internal to the framework only. Since Matrix is a struct, an out 
            parameter must be presented.
            </summary>
            <param name="m">The Matrix object.</param>
            <param name="outputMatrix">The matrix to return by an output 
            parameter.</param>
            <returns>Returns a value indicating whether the type was 
            successfully inverted. If the determinant is 0.0, then it cannot 
            be inverted and the original instance will remain untouched.</returns>
        </member>
        <member name="M:Mygod.Helper.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            An implementation of the Contains member of string that takes in a 
            string comparison. The traditional .NET string Contains member uses 
            StringComparison.Ordinal.
            </summary>
            <param name="s">The string.</param>
            <param name="value">The string value to search for.</param>
            <param name="comparison">The string comparison type.</param>
            <returns>Returns true when the substring is found.</returns>
        </member>
        <member name="T:Mygod.IO.IniFile">
            <summary>
            提供Ini文件的操作类。
            </summary>
        </member>
        <member name="M:Mygod.IO.IniFile.#ctor(System.String,System.UInt32)">
            <summary>
            创建新的IniFile。
            </summary>
            <param name="filePath">Ini文件路径。</param>
            <param name="stringLong">文本长度，如果超过会被截断。</param>
        </member>
        <member name="M:Mygod.IO.IniFile.ReadIniData(System.String,System.String,System.String)">
            <summary>
            读取Ini数据。
            </summary>
            <param name="section">Ini节名。</param>
            <param name="key">Ini键名。</param>
            <param name="noText">当指定键不存在时返回值。</param>
            <returns></returns>
        </member>
        <member name="M:Mygod.IO.IniFile.WriteIniData(System.String,System.String,System.String)">
            <summary>
            写出Ini数据。
            </summary>
            <param name="section">Ini节名。</param>
            <param name="key">Ini键名。</param>
            <param name="value">要写入的值。</param>
        </member>
        <member name="T:Mygod.IO.IniSection">
            <summary>
            提供Ini节的操作类。
            </summary>
        </member>
        <member name="M:Mygod.IO.IniSection.#ctor(Mygod.IO.IniFile,System.String)">
            <summary>
            创建新的Ini节。
            </summary>
            <param name="iniFile">属于的Ini文件。</param>
            <param name="sectionName">节名。</param>
        </member>
        <member name="M:Mygod.IO.IniSection.Remove">
            <summary>
            从该文件中删除此节。
            </summary>
        </member>
        <member name="P:Mygod.IO.IniSection.IniFile">
            <summary>
            获取属于的Ini文件。
            </summary>
        </member>
        <member name="P:Mygod.IO.IniSection.Name">
            <summary>
            获取当前节节名。
            </summary>
        </member>
        <member name="T:Mygod.IO.IIniData`1">
            <summary>
            定义特定的方法获得或设置值。
            </summary>
            <typeparam name="T">要获得的类型。</typeparam>
        </member>
        <member name="M:Mygod.IO.IIniData`1.Get">
            <summary>
            获得ini文件中的值。
            </summary>
            <returns>返回获得的值。</returns>
        </member>
        <member name="M:Mygod.IO.IIniData`1.Set(`0)">
            <summary>
            设置ini文件中的值。
            </summary>
            <param name="value">要设置的值。</param>
        </member>
        <member name="T:Mygod.IO.IIniDataWithParam`2">
            <summary>
            定义带参数的特定方法获得或设置值。
            </summary>
            <typeparam name="TKey">要获得的类型。</typeparam>
            <typeparam name="TResult">要获得的类型。</typeparam>
        </member>
        <member name="M:Mygod.IO.IIniDataWithParam`2.Get(`0)">
            <summary>
            获得ini文件中的值。
            </summary>
            <param name="key">参数。</param>
            <returns>返回获得的值。</returns>
        </member>
        <member name="M:Mygod.IO.IIniDataWithParam`2.Set(`0,`1)">
            <summary>
            设置ini文件中的值。
            </summary>
            <param name="key">参数。</param>
            <param name="value">要设置的值。</param>
        </member>
        <member name="T:Mygod.IO.StringData">
            <summary>
            从ini参数中获得字符串值。
            </summary>
        </member>
        <member name="M:Mygod.IO.StringData.#ctor(Mygod.IO.IniSection,System.String,System.String)">
            <summary>
            构建一个 StringData 实例。
            </summary>
            <param name="inisection"></param>
            <param name="key"></param>
            <param name="defaultvalue"></param>
        </member>
        <member name="P:Mygod.IO.StringData.DataKey">
            <summary>
            Key resetter.
            </summary>
        </member>
        <member name="T:Mygod.Media.Buzzer">
            <summary>
            提供演奏蜂鸣器音乐的类。
            </summary>
        </member>
        <member name="M:Mygod.Media.Buzzer.Beep(System.Int32,System.Int32)">
            <summary>
            最基本的蜂鸣器音。
            </summary>
            <param name="freq">音高。（单位Hz）</param>
            <param name="dur">演奏时长。</param>
            <returns>返回演奏是否成功。</returns>
        </member>
        <member name="F:Mygod.Media.Buzzer.Speed">
            <summary>
            演奏速度（不精确）。
            </summary>
        </member>
        <member name="M:Mygod.Media.Buzzer.#ctor(System.Int32)">
            <summary>
            Buzzer构造函数。
            </summary>
            <param name="speed">演奏速度。（默认120）</param>
        </member>
        <member name="M:Mygod.Media.Buzzer.Play(System.String,System.Int32)">
            <summary>
            播放dur毫秒的note。（输入无论大小写）
            </summary>
            <param name="sNote">表示音符。第一个字符必须在'A'至'G'之间， 接下来可以输入一个或几个'#'或'b'表示升降号，最后输入音阶。
            如果为0则延时。</param>
            <param name="iDur">播放时长。（单位毫秒）</param>
        </member>
        <member name="M:Mygod.Media.Buzzer.Play(System.String,System.Double)">
            <summary>
            播放dur拍的note。（输入无论大小写）
            </summary>
            <param name="sNote">表示音符。第一个字符必须在'A'至'G'之间， 接下来可以输入一个或几个'#'或'b'表示升降号，最后输入音阶。
            如果为空则不播放。</param>
            <param name="dDur">播放时长。（单位拍）</param>
        </member>
        <member name="M:Mygod.Media.Buzzer.Play(System.String)">
            <summary>
            播放notes。
            </summary>
            <param name="notes">格式：sNote、iDur、sNote、iDur……用空格分隔。</param>
        </member>
        <member name="M:Mygod.Media.Buzzer.PlayNotesWithEnglishNoteNames(System.String)">
            <summary>
            播放notes。
            </summary>
            <param name="notes">格式：sNote、dDur、sNote、dDur……用空格、回车、制表符、空字符分隔。</param>
        </member>
        <member name="M:Mygod.Media.Buzzer.PlayNotesWithFixedDoNoteNames(System.String)">
            <summary>
            播放notes。
            </summary>
            <param name="notes">格式：sNote、dDur、sNote、dDur……用空格、回车、制表符、空字符分隔。</param>
        </member>
        <member name="P:Mygod.Media.Buzzer.Hit">
            <summary>
            每拍演奏时长。（单位ms）
            </summary>
        </member>
        <member name="T:Mygod.Media.BuzzerExample">
            <summary>
            提供演奏Buzzer的样例。
            </summary>
        </member>
        <member name="M:Mygod.Media.BuzzerExample.OdeToJoy">
            <summary>
            使用Buzzer.Play实现的《欢乐颂》。（理论速度：120，实际速度：90～100）
            播放字符串如下：E1 500 E1 500 F1 500 G1 500 G1 500 F1 500 E1 500 D1 500 C1 500 C1 500 D1 500 E1 500 E1 750 D1 250 D1 1000 
            E1 500 E1 500 F1 500 G1 500 G1 500 F1 500 E1 500 D1 500 C1 500 C1 500 D1 500 E1 500 D1 750 C1 250 C1 1000 
            D1 500 D1 500 E1 500 C1 500 D1 500 E1 250 F1 250 E1 500 C1 500 D1 500 E1 250 F1 250 E1 500 D1 500 C1 500 D1 500 G0 500 
            E1 1000 E1 500 F1 500 G1 500 G1 500 F1 500 E1 500 D1 500 C1 500 C1 500 D1 500 E1 500 D1 750 C1 250 C1 1000
            </summary>
        </member>
        <member name="M:Mygod.Media.BuzzerExample.Alarm">
            <summary>
            播放一次300Hz至10000Hz的来回警报。（由于API等的原因不能连续）
            </summary>
        </member>
        <member name="T:Mygod.Runtime.Serialization.Plist.BinaryPlistArray">
            <summary>
                Represents an array value in a binary plist.
            </summary>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistArray.#ctor(System.Collections.Generic.IList{Mygod.Runtime.Serialization.Plist.BinaryPlistItem},System.Int32)">
            <summary>
                Initializes a new instance of the BinaryPlistArray class.
            </summary>
            <param name="objectTable">A reference to the binary plist's object table.</param>
            <param name="size">The size of the array.</param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistArray.ToArray">
            <summary>
                Converts this instance into an <see cref="T:object[]" /> array.
            </summary>
            <returns>
                The <see cref="T:object[]" /> array representation of this instance.
            </returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistArray.ToString">
            <summary>
                Returns the string representation of this instance.
            </summary>
            <returns>This instance's string representation.</returns>
        </member>
        <member name="P:Mygod.Runtime.Serialization.Plist.BinaryPlistArray.ObjectReference">
            <summary>
                Gets the array's object reference collection.
            </summary>
        </member>
        <member name="P:Mygod.Runtime.Serialization.Plist.BinaryPlistArray.ObjectTable">
            <summary>
                Gets a reference to the binary plist's object table.
            </summary>
        </member>
        <member name="T:Mygod.Runtime.Serialization.Plist.BinaryPlistDictionary">
            <summary>
                Represents a dictionary in a binary plist.
            </summary>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistDictionary.#ctor(System.Collections.Generic.IList{Mygod.Runtime.Serialization.Plist.BinaryPlistItem},System.Int32)">
            <summary>
                Initializes a new instance of the BinaryPlistDictionary class.
            </summary>
            <param name="objectTable">A reference to the binary plist's object table.</param>
            <param name="size">The size of the dictionay.</param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistDictionary.ToDictionary">
            <summary>
                Converts this instance into a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.Dictionary`2"/> representation this instance.
            </returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistDictionary.ToString">
            <summary>
                Returns the string representation of this instance.
            </summary>
            <returns>This instance's string representation.</returns>
        </member>
        <member name="P:Mygod.Runtime.Serialization.Plist.BinaryPlistDictionary.KeyReference">
            <summary>
                Gets the dictionary's key reference collection.
            </summary>
        </member>
        <member name="P:Mygod.Runtime.Serialization.Plist.BinaryPlistDictionary.ObjectReference">
            <summary>
                Gets the dictionary's object reference collection.
            </summary>
        </member>
        <member name="P:Mygod.Runtime.Serialization.Plist.BinaryPlistDictionary.ObjectTable">
            <summary>
                Gets a reference to the binary plist's object table.
            </summary>
        </member>
        <member name="T:Mygod.Runtime.Serialization.Plist.BinaryPlistItem">
            <summary>
                Represents an item in a binary plist's object table.
            </summary>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistItem.#ctor">
            <summary>
                Initializes a new instance of the BinaryPlistItem class.
            </summary>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistItem.#ctor(System.Object)">
            <summary>
                Initializes a new instance of the BinaryPlistItem class.
            </summary>
            <param name="value">The value of the object the item represents.</param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistItem.SetByteValue(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
                Sets the <see cref="P:Mygod.Runtime.Serialization.Plist.BinaryPlistItem.ByteValue"/> to the given collection.
            </summary>
            <param name="buffer">The collection to set.</param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistItem.ToString">
            <summary>
                Gets the string representation of this instance.
            </summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="P:Mygod.Runtime.Serialization.Plist.BinaryPlistItem.ByteValue">
            <summary>
                Gets the item's byte value collection.
            </summary>
        </member>
        <member name="P:Mygod.Runtime.Serialization.Plist.BinaryPlistItem.IsArray">
            <summary>
                Gets or sets a value indicating whether this item represents an array.
            </summary>
        </member>
        <member name="P:Mygod.Runtime.Serialization.Plist.BinaryPlistItem.IsDictionary">
            <summary>
                Gets or sets a value indicating whether this item represents a dictionary.
            </summary>
        </member>
        <member name="P:Mygod.Runtime.Serialization.Plist.BinaryPlistItem.Marker">
            <summary>
                Gets the item's marker value collection.
            </summary>
        </member>
        <member name="P:Mygod.Runtime.Serialization.Plist.BinaryPlistItem.Size">
            <summary>
                Gets the item's size, which is a sum of the <see cref="P:Mygod.Runtime.Serialization.Plist.BinaryPlistItem.Marker"/> and <see cref="P:Mygod.Runtime.Serialization.Plist.BinaryPlistItem.ByteValue"/> lengths.
            </summary>
        </member>
        <member name="P:Mygod.Runtime.Serialization.Plist.BinaryPlistItem.Value">
            <summary>
                Gets or sets the object value this item represents.
            </summary>
        </member>
        <member name="T:Mygod.Runtime.Serialization.Plist.BinaryPlistReader">
            <summary>
                Performs de-serialization of binary plists.
            </summary>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistReader.ReadObject(System.String)">
            <summary>
                Reads a binary plist from the given file path into an <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <param name="path">The path of the file to read.</param>
            <returns>
                The result plist <see cref="T:System.Collections.IDictionary"/>.
            </returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistReader.ReadObject(System.IO.Stream)">
            <summary>
                Reads a binary plist from the given stream into an <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <param name="stream">
                The <see cref="T:System.IO.Stream"/> to read.
            </param>
            <returns>
                The result plist <see cref="T:System.Collections.IDictionary"/>.
            </returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistReader.ReadObject``1(System.String)">
            <summary>
                Reads a binary plist from the given file path into a new <see cref="T:Mygod.Runtime.Serialization.Plist.IPlistSerializable"/> object instance.
            </summary>
            <typeparam name="T">
                The concrete <see cref="T:Mygod.Runtime.Serialization.Plist.IPlistSerializable"/> type to create.
            </typeparam>
            <param name="path">The path of the file to read.</param>
            <returns>
                The result <see cref="T:Mygod.Runtime.Serialization.Plist.IPlistSerializable"/> object instance.
            </returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistReader.ReadObject``1(System.IO.Stream)">
            <summary>
                Reads a binary plist from the given stream into a new <see cref="T:Mygod.Runtime.Serialization.Plist.IPlistSerializable"/> object instance.
            </summary>
            <typeparam name="T">
                The concrete <see cref="T:Mygod.Runtime.Serialization.Plist.IPlistSerializable"/> type to create.
            </typeparam>
            <param name="stream">
                The <see cref="T:System.IO.Stream"/> to read.
            </param>
            <returns>
                The result <see cref="T:Mygod.Runtime.Serialization.Plist.IPlistSerializable"/> object instance.
            </returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistReader.ReadAsciiString(System.IO.BinaryReader,System.Int64,System.Int32)">
            <summary>
                Reads an ASCII string value from the given reader, starting at the given index and of the given size.
            </summary>
            <param name="reader">
                The <see cref="T:System.IO.BinaryReader"/> to read the ASCII string value from.
            </param>
            <param name="index">The index in the stream the string value starts at.</param>
            <param name="size">The number of bytes that make up the string value.</param>
            <returns>A string value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistReader.ReadData(System.IO.BinaryReader,System.Int64,System.Int32)">
            <summary>
                Reads a data value from the given reader, starting at the given index and of the given size.
            </summary>
            <param name="reader">
                The <see cref="T:System.IO.BinaryReader"/> to read the data value from.
            </param>
            <param name="index">The index in the stream the data value starts at.</param>
            <param name="size">The number of bytes that make up the data value.</param>
            <returns>A data value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistReader.ReadDate(System.IO.BinaryReader,System.Int64,System.Int32)">
            <summary>
                Reads a date value from the given reader, starting at the given index and of the given size.
            </summary>
            <param name="reader">
                The <see cref="T:System.IO.BinaryReader"/> to read the date value from.
            </param>
            <param name="index">The index in the stream the date value starts at.</param>
            <param name="size">The number of bytes that make up the date value.</param>
            <returns>A date value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistReader.ReadInteger(System.IO.BinaryReader,System.Int64,System.Int32)">
            <summary>
                Reads an integer value from the given reader, starting at the given index and of the given size.
            </summary>
            <param name="reader">
                The <see cref="T:System.IO.BinaryReader"/> to read the integer value from.
            </param>
            <param name="index">The index in the stream the integer value starts at.</param>
            <param name="size">The number of bytes that make up the integer value.</param>
            <returns>An integer value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistReader.ReadPrimitive(System.IO.BinaryReader,System.Int64,System.Nullable{System.Boolean}@)">
            <summary>
                Reads a primitive (true, false or null) value from the given reader, starting at the given index.
            </summary>
            <param name="reader">
                The <see cref="T:System.IO.BinaryReader"/> to read the primitive value from.
            </param>
            <param name="index">The index in the stream the value starts at.</param>
            <param name="primitive">Contains the read primitive value upon completion.</param>
            <returns>True if a value was read, false if the value was a fill byte.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistReader.ReadReal(System.IO.BinaryReader,System.Int64,System.Int32)">
            <summary>
                Reads a floating-point value from the given reader, starting at the given index and of the given size.
            </summary>
            <param name="reader">
                The <see cref="T:System.IO.BinaryReader"/> to read the floating-point value from.
            </param>
            <param name="index">The index int he stream the floating-point value starts at.</param>
            <param name="size">The number of bytes that make up the floating-point value.</param>
            <returns>A floating-point value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistReader.ReadUnicodeString(System.IO.BinaryReader,System.Int64,System.Int32)">
            <summary>
                Reads a Unicode string value from the given reader, starting at the given index and of the given size.
            </summary>
            <param name="reader">
                The <see cref="T:System.IO.BinaryReader"/> to read the Unicode string value from.
            </param>
            <param name="index">The index in the stream the string value starts at.</param>
            <param name="size">The number of characters that make up the string value.</param>
            <returns>A string value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistReader.ReadUniqueId(System.IO.BinaryReader,System.Int64,System.Int32)">
            <summary>
                Reads a unique ID value from the given reader, starting at the given index and of the given size.
            </summary>
            <param name="reader">
                The <see cref="T:System.IO.BinaryReader"/> to read the unique ID value from.
            </param>
            <param name="index">The index in the stream the unique ID value starts at.</param>
            <param name="size">The number of bytes that make up the unique ID value.</param>
            <returns>A unique ID value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistReader.ReadArray(System.IO.BinaryReader,System.Int64,System.Int32)">
            <summary>
                Reads an array value from the given reader, starting at the given index and of the given size.
            </summary>
            <param name="reader">
                The <see cref="T:System.IO.BinaryReader"/> to read the array value from.
            </param>
            <param name="index">The index in the stream the array value starts at.</param>
            <param name="size">The number of items in the array.</param>
            <returns>An array value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistReader.ReadDictionary(System.IO.BinaryReader,System.Int64,System.Int32)">
            <summary>
                Reads a dictionary value from the given reader, starting at the given index and of the given size.
            </summary>
            <param name="reader">
                The <see cref="T:System.IO.BinaryReader"/> to read the dictionary value from.
            </param>
            <param name="index">The index in the stream the dictionary value starts at.</param>
            <param name="size">The number of items in the dictionary.</param>
            <returns>A dictionary value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistReader.ReadObjectTable(System.IO.BinaryReader)">
            <summary>
                Reads the object table from the given reader.
            </summary>
            <param name="reader">The reader to read the object table from.</param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistReader.ReadOffsetTable(System.IO.BinaryReader)">
            <summary>
                Reads the offset table from the given reader.
            </summary>
            <param name="reader">The reader to read the offset table from.</param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistReader.Reset">
            <summary>
                Resets this instance's state.
            </summary>
        </member>
        <member name="T:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter">
            <summary>
                Performs serialization of objects into binary plist format.
            </summary>
        </member>
        <member name="F:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.HeaderMagicNumber">
            <summary>
                Gets the magic number value used in a binary plist header.
            </summary>
        </member>
        <member name="F:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.HeaderVersionNumber">
            <summary>
                Gets the version number value used in a binary plist header.
            </summary>
        </member>
        <member name="F:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.ReferenceDate">
            <summary>
                Gets Apple's reference date value.
            </summary>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.WriteObject(System.String,Mygod.Runtime.Serialization.Plist.IPlistSerializable)">
            <summary>
                Writes the specified <see cref="T:Mygod.Runtime.Serialization.Plist.IPlistSerializable"/> object to the given file path as a binary plist.
            </summary>
            <param name="path">The file path to write to.</param>
            <param name="obj">
                The <see cref="T:Mygod.Runtime.Serialization.Plist.IPlistSerializable"/> object to write.
            </param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.WriteObject(System.IO.Stream,Mygod.Runtime.Serialization.Plist.IPlistSerializable)">
            <summary>
                Writes the specified <see cref="T:Mygod.Runtime.Serialization.Plist.IPlistSerializable"/> object to the given stream as a binary plist.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="obj">
                The <see cref="T:Mygod.Runtime.Serialization.Plist.IPlistSerializable"/> object to write.
            </param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.WriteObject(System.IO.Stream,Mygod.Runtime.Serialization.Plist.IPlistSerializable,System.Boolean)">
            <summary>
                Writes the specified <see cref="T:Mygod.Runtime.Serialization.Plist.IPlistSerializable"/> object to the given stream as a binary plist.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="obj">
                The <see cref="T:Mygod.Runtime.Serialization.Plist.IPlistSerializable"/> object to write.
            </param>
            <param name="closeStream">A value indicating whether to close the stream after the write operation completes.</param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.WriteObject(System.String,System.Collections.IDictionary)">
            <summary>
                Writes the specified <see cref="T:System.Collections.IDictionary"/> object to the given file path as a binary plist.
            </summary>
            <param name="path">The file path to write to.</param>
            <param name="dictionary">
                The <see cref="T:System.Collections.IDictionary"/> object to write.
            </param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.WriteObject(System.IO.Stream,System.Collections.IDictionary)">
            <summary>
                Writes the specified <see cref="T:System.Collections.IDictionary"/> object to the given stream as a binary plist.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dictionary">
                The <see cref="T:System.Collections.IDictionary"/> object to write.
            </param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.WriteObject(System.IO.Stream,System.Collections.IDictionary,System.Boolean)">
            <summary>
                Writes the specified <see cref="T:System.Collections.IDictionary"/> object to the given stream as a binary plist.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dictionary">
                The <see cref="T:System.Collections.IDictionary"/> object to write.
            </param>
            <param name="closeStream">A value indicating whether to close the stream after the write operation completes.</param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.AddIntegerCount(System.Collections.Generic.IList{System.Byte},System.Int32)">
            <summary>
                Adds an integer count to the given buffer.
            </summary>
            <param name="buffer">The buffer to add the integer count to.</param>
            <param name="count">A count value to write.</param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.GetIntegerBytes(System.Int64)">
            <summary>
                Gets a big-endian byte array that corresponds to the given integer value.
            </summary>
            <param name="value">The integer value to get bytes for.</param>
            <returns>A big-endian byte array.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.WriteReferenceInteger(System.IO.BinaryWriter,System.Int64,System.Int32)">
            <summary>
                Writes the given value using the number of bytes indicated by the specified size
                to the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">
                The <see cref="T:System.IO.BinaryWriter"/> to write to.
            </param>
            <param name="value">The value to write.</param>
            <param name="size">The size of the integer to write.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.AddArray(System.Collections.IEnumerable)">
            <summary>
                Adds an array to the internal object table.
            </summary>
            <param name="value">The value to add.</param>
            <returns>The index of the added value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.AddData(System.Object)">
            <summary>
                Adds arbitrary data to the internal object table.
            </summary>
            <param name="value">The value to add.</param>
            <returns>The index of the added value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.AddDate(System.DateTime)">
            <summary>
                Adds a date to the internal object table.
            </summary>
            <param name="value">The value to add.</param>
            <returns>The index of the added value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.AddDictionary(System.Collections.IDictionary)">
            <summary>
                Adds a dictionary to the internal object table.
            </summary>
            <param name="value">The value to add.</param>
            <returns>The index of the added value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.AddDouble(System.Double)">
            <summary>
                Adds a double to the internal object table.
            </summary>
            <param name="value">The value to add.</param>
            <returns>The index of the added value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.AddFloat(System.Single)">
            <summary>
                Adds a float to the internal object table.
            </summary>
            <param name="value">The value to add.</param>
            <returns>The index of the added value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.AddInteger(System.Int64)">
            <summary>
                Adds an integer to the internal object table.
            </summary>
            <param name="value">The value to add.</param>
            <returns>The index of the added value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.AddObject(System.Object)">
            <summary>
                Adds an object to the internal object table.
            </summary>
            <param name="value">The value to add.</param>
            <returns>The index of the added value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.AddPrimitive(System.Nullable{System.Boolean})">
            <summary>
                Adds a primitive to the internal object table.
            </summary>
            <param name="value">The value to add.</param>
            <returns>The index of the added value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.AddString(System.String)">
            <summary>
                Adds a string to the internal object table.
            </summary>
            <param name="value">The value to add.</param>
            <returns>The index of the added value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.CalculateObjectRefSize">
            <summary>
                Calculates the object ref size to use for this instance's current state.
            </summary>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.Reset">
            <summary>
                Resets this instance's state.
            </summary>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.WriteArray(System.IO.BinaryWriter,Mygod.Runtime.Serialization.Plist.BinaryPlistItem)">
            <summary>
                Writes an array item to the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">
                The <see cref="T:System.IO.BinaryWriter"/> to write to.
            </param>
            <param name="value">The array item to write.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.WriteDictionary(System.IO.BinaryWriter,Mygod.Runtime.Serialization.Plist.BinaryPlistItem)">
            <summary>
                Writes a dictionary item to the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">
                The <see cref="T:System.IO.BinaryWriter"/> to write to.
            </param>
            <param name="value">The dictionary item to write.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter.WriteObjectTable(System.IO.BinaryWriter)">
            <summary>
                Write the object table to the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">
                The <see cref="T:System.IO.BinaryWriter"/> to write to.
            </param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="T:Mygod.Runtime.Serialization.Plist.DataContractBinaryPlistSerializer">
            <summary>
                Serializes data contracts to and from the binary plist format.
            </summary>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.DataContractBinaryPlistSerializer.#ctor(System.Type)">
            <summary>
                Initializes a new instance of the DataContractBinaryPlistSerializer class.
            </summary>
            <param name="type">The type of the instances that are serialized or de-serialized.</param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.DataContractBinaryPlistSerializer.ReadObject(System.IO.Stream)">
            <summary>
                Reads an object from the specified stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <returns>The de-serialized object.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.DataContractBinaryPlistSerializer.WriteObject(System.IO.Stream,System.Object)">
            <summary>
                Writes the complete contents of the given object to the specified stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="graph">The object to write.</param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.DataContractBinaryPlistSerializer.WriteObject(System.IO.Stream,System.Object,System.Boolean)">
            <summary>
                Writes the complete contents of the given object to the specified stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="graph">The object to write.</param>
            <param name="closeStream">A value indicating whether to close the stream after the write operation completes.</param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.DataContractBinaryPlistSerializer.GetReadablePlistObject(System.Type,System.Object)">
            <summary>
                Gets the readable plist value of the given object identified by the specified type.
            </summary>
            <param name="type">The type the object is expected to have after being de-serialized.</param>
            <param name="obj">The raw plist object value.</param>
            <returns>A readable plist object value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.DataContractBinaryPlistSerializer.GetWritablePlistObject(System.Type,System.Object)">
            <summary>
                Gets the writable plist value of the given object identified by the specified type.
            </summary>
            <param name="type">The of the object.</param>
            <param name="obj">The object to get the plist value of.</param>
            <returns>The plist value of the given object.</returns>
        </member>
        <member name="T:Mygod.Runtime.Serialization.Plist.EndianConverter">
            <summary>
                Converts the endian-ness of primitive number types.
            </summary>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.SwapEndian(System.Int16)">
            <summary>
                Swaps the endian-ness of the given value.
            </summary>
            <param name="value">The value to swap the endian-ness of.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.SwapEndian(System.UInt16)">
            <summary>
                Swaps the endian-ness of the given value.
            </summary>
            <param name="value">The value to swap the endian-ness of.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.SwapEndian(System.Int32)">
            <summary>
                Swaps the endian-ness of the given value.
            </summary>
            <param name="value">The value to swap the endian-ness of.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.SwapEndian(System.UInt32)">
            <summary>
                Swaps the endian-ness of the given value.
            </summary>
            <param name="value">The value to swap the endian-ness of.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.SwapEndian(System.Int64)">
            <summary>
                Swaps the endian-ness of the given value.
            </summary>
            <param name="value">The value to swap the endian-ness of.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.SwapEndian(System.UInt64)">
            <summary>
                Swaps the endian-ness of the given value.
            </summary>
            <param name="value">The value to swap the endian-ness of.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.SwapInt16(System.Int16)">
            <summary>
                Swaps the endian-ness of the given value.
            </summary>
            <param name="value">The value to swap the endian-ness of.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.SwapInt32(System.Int32)">
            <summary>
                Swaps the endian-ness of the given value.
            </summary>
            <param name="value">The value to swap the endian-ness of.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.SwapInt64(System.Int64)">
            <summary>
                Swaps the endian-ness of the given value.
            </summary>
            <param name="value">The value to swap the endian-ness of.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.SwapUInt32(System.UInt32)">
            <summary>
                Swaps the endian-ness of the given value.
            </summary>
            <param name="value">The value to swap the endian-ness of.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.SwapUInt16(System.UInt16)">
            <summary>
                Swaps the endian-ness of the given value.
            </summary>
            <param name="value">The value to swap the endian-ness of.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.SwapUInt64(System.UInt64)">
            <summary>
                Swaps the endian-ness of the given value.
            </summary>
            <param name="value">The value to swap the endian-ness of.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.ToBigEndianConditional(System.UInt16)">
            <summary>
                Gets the big-endian value of the given value if the current system is little-endian.
                If the curreng system is big-endian, returns the value as-is.
            </summary>
            <param name="value">The value to swap if necessary.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.ToBigEndianConditional(System.Int16)">
            <summary>
                Gets the big-endian value of the given value if the current system is little-endian.
                If the curreng system is big-endian, returns the value as-is.
            </summary>
            <param name="value">The value to swap if necessary.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.ToBigEndianConditional(System.UInt32)">
            <summary>
                Gets the big-endian value of the given value if the current system is little-endian.
                If the curreng system is big-endian, returns the value as-is.
            </summary>
            <param name="value">The value to swap if necessary.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.ToBigEndianConditional(System.Int32)">
            <summary>
                Gets the big-endian value of the given value if the current system is little-endian.
                If the curreng system is big-endian, returns the value as-is.
            </summary>
            <param name="value">The value to swap if necessary.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.ToBigEndianConditional(System.UInt64)">
            <summary>
                Gets the big-endian value of the given value if the current system is little-endian.
                If the curreng system is big-endian, returns the value as-is.
            </summary>
            <param name="value">The value to swap if necessary.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.ToBigEndianConditional(System.Int64)">
            <summary>
                Gets the big-endian value of the given value if the current system is little-endian.
                If the curreng system is big-endian, returns the value as-is.
            </summary>
            <param name="value">The value to swap if necessary.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.ToLittleEndianConditional(System.UInt16)">
            <summary>
                Gets the little-endian value of the given value if the current system is big-endian.
                If the curreng system is little-endian, returns the value as-is.
            </summary>
            <param name="value">The value to swap if necessary.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.ToLittleEndianConditional(System.Int16)">
            <summary>
                Gets the little-endian value of the given value if the current system is big-endian.
                If the curreng system is little-endian, returns the value as-is.
            </summary>
            <param name="value">The value to swap if necessary.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.ToLittleEndianConditional(System.UInt32)">
            <summary>
                Gets the little-endian value of the given value if the current system is big-endian.
                If the curreng system is little-endian, returns the value as-is.
            </summary>
            <param name="value">The value to swap if necessary.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.ToLittleEndianConditional(System.Int32)">
            <summary>
                Gets the little-endian value of the given value if the current system is big-endian.
                If the curreng system is little-endian, returns the value as-is.
            </summary>
            <param name="value">The value to swap if necessary.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.ToLittleEndianConditional(System.UInt64)">
            <summary>
                Gets the little-endian value of the given value if the current system is big-endian.
                If the curreng system is little-endian, returns the value as-is.
            </summary>
            <param name="value">The value to swap if necessary.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.EndianConverter.ToLittleEndianConditional(System.Int64)">
            <summary>
                Gets the little-endian value of the given value if the current system is big-endian.
                If the curreng system is little-endian, returns the value as-is.
            </summary>
            <param name="value">The value to swap if necessary.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:Mygod.Runtime.Serialization.Plist.Extensions">
            <summary>
                Extensions and helpers for plist serialization.
            </summary>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.Extensions.GetConcreteTypeIfNullable(System.Type)">
            <summary>
                Gets the specified type's concrete type of it is an instance of <see cref="T:System.Nullable`1"/>.
                If the type is not null-able, it is returned as-is.
            </summary>
            <param name="type">The type to get the concrete type of.</param>
            <returns>The type's concrete type.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.Extensions.IsAscii(System.String)">
            <summary>
                Gets a value indicating whether the given string is all ASCII.
            </summary>
            <param name="value">The string to check.</param>
            <returns>True if the string contains only ASCII characters, false otherwise.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.Extensions.IsCollection(System.Type)">
            <summary>
                Gets a value indicating whether the specified type is a collection type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is a collection type, false otherwise.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.Extensions.IsDefaultValue(System.Type,System.Object)">
            <summary>
                Gets a value indicating whether the given value is the default value for the specified type.
            </summary>
            <param name="type">The type to check the value against.</param>
            <param name="value">The value to check.</param>
            <returns>True if the value is the default value, false otherwise.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.Extensions.IsPrimitiveOrEnum(System.Type)">
            <summary>
                Gets a value indicating whether the specified type is an enum or primitive or semi-primitive (e.g., string) type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is an enum or primitive type, false otherwise.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.Extensions.ToBinaryString(System.Byte)">
            <summary>
                Converts the given value into its binary representation as a string.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The value's binary representation as a string.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.Extensions.ToBinaryString(System.Int32)">
            <summary>
                Converts the given value into its binary representation as a string.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The value's binary representation as a string.</returns>
        </member>
        <member name="T:Mygod.Runtime.Serialization.Plist.IPlistSerializable">
            <summary>
                Defines the interface for proxy serialization with <see cref="T:Mygod.Runtime.Serialization.Plist.BinaryPlistWriter"/> and
                <see cref="T:Mygod.Runtime.Serialization.Plist.BinaryPlistReader"/>
                .
            </summary>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.IPlistSerializable.FromPlistDictionary(System.Collections.IDictionary)">
            <summary>
                Populates this instance from the given plist <see cref="T:System.Collections.IDictionary"/> representation.
                Note that nested <see cref="T:Mygod.Runtime.Serialization.Plist.IPlistSerializable"/> objects found in the graph during
                <see cref="M:Mygod.Runtime.Serialization.Plist.IPlistSerializable.ToPlistDictionary"/> are represented as nested <see cref="T:System.Collections.IDictionary"/> instances here.
            </summary>
            <param name="plist">
                The plist <see cref="T:System.Collections.IDictionary"/> representation of this instance.
            </param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.IPlistSerializable.ToPlistDictionary">
            <summary>
                Gets a plist-friendly <see cref="T:System.Collections.IDictionary"/> representation of this instance.
                The returned dictionary may contain nested implementations of <see cref="T:Mygod.Runtime.Serialization.Plist.IPlistSerializable"/>.
            </summary>
            <returns>
                A plist-friendly <see cref="T:System.Collections.IDictionary"/> representation of this instance.
            </returns>
        </member>
        <member name="T:Mygod.Runtime.Serialization.Plist.TypeCacheItem">
            <summary>
                Represents a cached type used during serialization by a <see cref="T:Mygod.Runtime.Serialization.Plist.DataContractBinaryPlistSerializer"/>.
            </summary>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.TypeCacheItem.#ctor(System.Type)">
            <summary>
                Initializes a new instance of the TypeCacheItem class.
            </summary>
            <param name="type">The type to cache.</param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.TypeCacheItem.InitializeFields">
            <summary>
                Initializes this instance's field-related properties.
            </summary>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.TypeCacheItem.InitializeProperties">
            <summary>
                Initializes this instance's property-related properties.
            </summary>
        </member>
        <member name="P:Mygod.Runtime.Serialization.Plist.TypeCacheItem.FieldMembers">
            <summary>
                Gets the collection of concrete or simulated <see cref="T:System.Runtime.Serialization.DataMemberAttribute"/>s for the type's fields.
            </summary>
        </member>
        <member name="P:Mygod.Runtime.Serialization.Plist.TypeCacheItem.Fields">
            <summary>
                Gets a collection of the type's fields.
            </summary>
        </member>
        <member name="P:Mygod.Runtime.Serialization.Plist.TypeCacheItem.Properties">
            <summary>
                Gets a collection of the type's properties.
            </summary>
        </member>
        <member name="P:Mygod.Runtime.Serialization.Plist.TypeCacheItem.PropertyMembers">
            <summary>
                Gets a collection of concrete or simulated <see cref="T:System.Runtime.Serialization.DataMemberAttribute"/>s for the type's properties.
            </summary>
        </member>
        <member name="T:Mygod.Runtime.Serialization.Plist.UniqueValueCache">
            <summary>
                Provides a cache of unique primitive values when writing a binary plist.
            </summary>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.UniqueValueCache.Contains(System.Boolean)">
            <summary>
                Gets a value indicating whether the cache contains the given value.
            </summary>
            <param name="value">The value to check for.</param>
            <returns>True if the cache contains the value, false otherwise.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.UniqueValueCache.Contains(System.Int64)">
            <summary>
                Gets a value indicating whether the cache contains the given value.
            </summary>
            <param name="value">The value to check for.</param>
            <returns>True if the cache contains the value, false otherwise.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.UniqueValueCache.Contains(System.Single)">
            <summary>
                Gets a value indicating whether the cache contains the given value.
            </summary>
            <param name="value">The value to check for.</param>
            <returns>True if the cache contains the value, false otherwise.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.UniqueValueCache.Contains(System.Double)">
            <summary>
                Gets a value indicating whether the cache contains the given value.
            </summary>
            <param name="value">The value to check for.</param>
            <returns>True if the cache contains the value, false otherwise.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.UniqueValueCache.Contains(System.DateTime)">
            <summary>
                Gets a value indicating whether the cache contains the given value.
            </summary>
            <param name="value">The value to check for.</param>
            <returns>True if the cache contains the value, false otherwise.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.UniqueValueCache.Contains(System.String)">
            <summary>
                Gets a value indicating whether the cache contains the given value.
            </summary>
            <param name="value">The value to check for.</param>
            <returns>True if the cache contains the value, false otherwise.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.UniqueValueCache.GetIndex(System.Boolean)">
            <summary>
                Gets the index in the object table for the given value, assuming it has already been added to the cache.
            </summary>
            <param name="value">The value to get the index of.</param>
            <returns>The index of the value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.UniqueValueCache.GetIndex(System.Int64)">
            <summary>
                Gets the index in the object table for the given value, assuming it has already been added to the cache.
            </summary>
            <param name="value">The value to get the index of.</param>
            <returns>The index of the value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.UniqueValueCache.GetIndex(System.Single)">
            <summary>
                Gets the index in the object table for the given value, assuming it has already been added to the cache.
            </summary>
            <param name="value">The value to get the index of.</param>
            <returns>The index of the value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.UniqueValueCache.GetIndex(System.Double)">
            <summary>
                Gets the index in the object table for the given value, assuming it has already been added to the cache.
            </summary>
            <param name="value">The value to get the index of.</param>
            <returns>The index of the value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.UniqueValueCache.GetIndex(System.DateTime)">
            <summary>
                Gets the index in the object table for the given value, assuming it has already been added to the cache.
            </summary>
            <param name="value">The value to get the index of.</param>
            <returns>The index of the value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.UniqueValueCache.GetIndex(System.String)">
            <summary>
                Gets the index in the object table for the given value, assuming it has already been added to the cache.
            </summary>
            <param name="value">The value to get the index of.</param>
            <returns>The index of the value.</returns>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.UniqueValueCache.SetIndex(System.Boolean,System.Int32)">
            <summary>
                Sets the index in the object table for the given value.
            </summary>
            <param name="value">The value to set the index for.</param>
            <param name="index">The index to set.</param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.UniqueValueCache.SetIndex(System.Int64,System.Int32)">
            <summary>
                Sets the index in the object table for the given value.
            </summary>
            <param name="value">The value to set the index for.</param>
            <param name="index">The index to set.</param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.UniqueValueCache.SetIndex(System.Single,System.Int32)">
            <summary>
                Sets the index in the object table for the given value.
            </summary>
            <param name="value">The value to set the index for.</param>
            <param name="index">The index to set.</param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.UniqueValueCache.SetIndex(System.Double,System.Int32)">
            <summary>
                Sets the index in the object table for the given value.
            </summary>
            <param name="value">The value to set the index for.</param>
            <param name="index">The index to set.</param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.UniqueValueCache.SetIndex(System.String,System.Int32)">
            <summary>
                Sets the index in the object table for the given value.
            </summary>
            <param name="value">The value to set the index for.</param>
            <param name="index">The index to set.</param>
        </member>
        <member name="M:Mygod.Runtime.Serialization.Plist.UniqueValueCache.SetIndex(System.DateTime,System.Int32)">
            <summary>
                Sets the index in the object table for the given value.
            </summary>
            <param name="value">The value to set the index for.</param>
            <param name="index">The index to set.</param>
        </member>
        <member name="T:Mygod.Security.Cryptography.MD5Helper">
            <summary>
            提供 MD5 计算的类。
            </summary>
        </member>
        <member name="M:Mygod.Security.Cryptography.MD5Helper.CalculateMD5(System.String)">
            <summary>
            计算字符串的 MD5 值。
            </summary>
            <param name="stuff">要计算的字符串。</param>
            <returns>返回其 MD5 值，在正常情况下返回 32 位十六进制字符。</returns>
        </member>
        <member name="T:Mygod.Text.Kmp">
            <summary>
            提供KMP匹配字符串的类。
            </summary>
        </member>
        <member name="M:Mygod.Text.Kmp.#ctor(System.Byte[])">
            <summary>
            创建一个KMP类。如果要匹配多次，则创建实例比调用静态方法的执行效率高。
            </summary>
            <param name="pattern">用于匹配的字符串。</param>
        </member>
        <member name="M:Mygod.Text.Kmp.Match(System.Byte[],System.Int32)">
            <summary>
            KMP匹配字符串，效率为O(N+M)，其中N是text.Length，M是pattern.Length。
            </summary>
            <param name="text">要查找的字符串。</param>
            <param name="pos">开始搜索的位置。</param>
            <returns>返回查找到的位置，如果没有匹配则返回-1。</returns>
        </member>
        <member name="M:Mygod.Text.Kmp.Match(System.IO.Stream)">
            <summary>
            KMP匹配流，效率为O(N+M)，其中N是流的长度，M是pattern.Length。
            </summary>
            <param name="stream">要匹配的流。</param>
            <returns>返回是否找到匹配串，如果找到，偏移量会被设置在匹配的串开始。</returns>
        </member>
        <member name="M:Mygod.Text.Kmp.MatchAll(System.Byte[])">
            <summary>
            KMP匹配字符串，效率为O(N+M)，其中N是text.Length，M是pattern.Length。
            </summary>
            <param name="text">要查找的字符串。</param>
            <returns>返回所有找到的位置。</returns>
        </member>
        <member name="M:Mygod.Text.Kmp.MatchAll(System.IO.Stream)">
            <summary>
            KMP匹配字符串，效率为O(N+M)，其中N是text.Length，M是pattern.Length。
            </summary>
            <param name="stream">要查找的流。</param>
            <returns>返回所有找到的位置。</returns>
        </member>
        <member name="M:Mygod.Text.Kmp.Match(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            KMP匹配字符串，效率为O(N+M)，其中N是text.Length，M是pattern.Length。
            </summary>
            <param name="text">要匹配的字符串。</param>
            <param name="pattern">要搜索的字符串</param>
            <param name="pos">起始搜索的位置。</param>
            <returns>返回查找到的位置，如果没有匹配则返回-1。</returns>
        </member>
        <member name="M:Mygod.Text.Kmp.Match(System.IO.Stream,System.Byte[])">
            <summary>
            KMP匹配流，效率为O(N+M)，其中N是流的长度，M是pattern.Length。
            </summary>
            <param name="stream">要匹配的流。</param>
            <param name="pattern">要匹配的字符串。</param>
            <returns>返回是否找到匹配串，如果找到，偏移量会被设置在匹配的串开始。</returns>
        </member>
        <member name="M:Mygod.Text.Kmp.MatchAll(System.Byte[],System.Byte[])">
            <summary>
            KMP匹配字符串，效率为O(N+M)，其中N是text.Length，M是pattern.Length。
            </summary>
            <param name="text">要查找的字符串。</param>
            <param name="pattern">要匹配的字符串。</param>
            <returns>返回找到的所有位置。</returns>
        </member>
        <member name="M:Mygod.Text.Kmp.MatchAll(System.IO.Stream,System.Byte[])">
            <summary>
            KMP匹配字符串，效率为O(N+M)，其中N是text.Length，M是pattern.Length。
            </summary>
            <param name="stream">要查找的流。</param>
            <param name="pattern">要匹配的字符串。</param>
            <returns>返回所有找到的位置。</returns>
        </member>
        <member name="P:Mygod.Text.Kmp.Pattern">
            <summary>
            获取或设置模式串，即用于匹配的字符串。
            </summary>
        </member>
        <member name="T:Mygod.Text.Kmp.Searcher">
            <summary>
            一个更加低级、可扩展的 KMP 搜索实现。
            </summary>
        </member>
        <member name="T:Mygod.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer">
            <summary>
            Exposes AutoCompleteBox types to UI Automation.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:Mygod.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.AutoCompleteBoxClassNameCore">
            <summary>
            The name reported as the core class name.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.#ctor(Mygod.Windows.Controls.AutoCompleteBox)">
            <summary>
            Initializes a new instance of the AutoCompleteBoxAutomationPeer
            class.
            </summary>
            <param name="owner">
            The AutoCompleteBox that is associated with this
            AutoCompleteBoxAutomationPeer.
            </param>
        </member>
        <member name="M:Mygod.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the AutoCompleteBox that is associated
            with this AutoCompleteBoxAutomationPeer. This method is called by
            GetAutomationControlType.
            </summary>
            <returns>ComboBox AutomationControlType.</returns>
        </member>
        <member name="M:Mygod.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the AutoCompleteBox that is associated with this
            AutoCompleteBoxAutomationPeer. This method is called by
            GetClassName.
            </summary>
            <returns>The name AutoCompleteBox.</returns>
        </member>
        <member name="M:Mygod.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the AutoCompleteBox that is associated
            with this AutoCompleteBoxAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:Mygod.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
            <summary>
            Blocking method that returns after the element has been expanded.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:Mygod.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
            <summary>
            Blocking method that returns after the element has been collapsed.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:Mygod.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.RaiseExpandCollapseAutomationEvent(System.Boolean,System.Boolean)">
            <summary>
            Raises the ExpandCollapse automation event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Mygod.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#SetValue(System.String)">
            <summary>
            Sets the value of a control.
            </summary>
            <param name="value">The value to set. The provider is responsible
            for converting the value to the appropriate data type.</param>
        </member>
        <member name="M:Mygod.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.GetChildrenCore">
            <summary>
            Gets the collection of child elements of the AutoCompleteBox that
            are associated with this AutoCompleteBoxAutomationPeer. This method
            is called by GetChildren.
            </summary>
            <returns>
            A collection of automation peer elements, or an empty collection
            if there are no child elements.
            </returns>
        </member>
        <member name="M:Mygod.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#GetSelection">
            <summary>
            Retrieves a UI automation provider for each child element that is
            selected.
            </summary>
            <returns>An array of UI automation providers.</returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.OwnerAutoCompleteBox">
            <summary>
            Gets the AutoCompleteBox that owns this
            AutoCompleteBoxAutomationPeer.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#CanSelectMultiple">
            <summary>
            Gets a value indicating whether the UI automation provider allows
            more than one child element to be selected concurrently.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
            <value>True if multiple selection is allowed; otherwise, false.</value>
        </member>
        <member name="P:Mygod.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#IsSelectionRequired">
            <summary>
            Gets a value indicating whether the UI automation provider
            requires at least one child element to be selected.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
            <value>True if selection is required; otherwise, false.</value>
        </member>
        <member name="P:Mygod.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
            <summary>
            Gets an element's current Collapsed or Expanded state.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#IsReadOnly">
            <summary>
            Gets a value indicating whether the value of a control is
            read-only.
            </summary>
            <value>True if the value is read-only; false if it can be modified.</value>
        </member>
        <member name="P:Mygod.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#Value">
            <summary>
            Gets the value of the control.
            </summary>
            <value>The value of the control.</value>
        </member>
        <member name="T:Mygod.Windows.Controls.AnimatedExpander">
            <summary>
            表示一个可显示标题的控件，该标题具有一个用于显示内容的可折叠窗口。折叠/展开时会显示动画。
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.AnimatedExpander.OnApplyTemplate">
            <summary>
            在派生类中被重写后，每当应用程序代码或内部进程调用 System.Windows.FrameworkElement.ApplyTemplate()，都将调用此方法。
            </summary>
        </member>
        <member name="T:Mygod.Windows.Controls.AnimatedProgressBar">
            <summary>
            指示操作进度。当改变时有动画。
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.AnimatedProgressBar.#ctor">
            <summary>
            构造一个 Mygod.Windows.Controls.AnimatedProgressBar。
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.AnimatedProgressBar.OnApplyTemplate">
            <summary>
            在将模板应用于 Mygod.Windows.Controls.AnimatedProgressBar 时调用。
            </summary>
        </member>
        <member name="T:Mygod.Windows.Controls.CommandLink">
            <summary>
            Interaction logic for CommandLink.xaml
            </summary>
            <summary>
            CommandLink
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.CommandLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mygod.Windows.Controls.CommandLink"/> class.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.CommandLink.CommandLink_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Loaded event of the CommandLink control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.CommandLink.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="E:Mygod.Windows.Controls.CommandLink.Click">
            <summary>
            Occurs when a <see cref="T:Mygod.Windows.Controls.CommandLink"/> is clicked.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Controls.DragCanvas">
            <summary>
            A Canvas which manages dragging of the UIElements it contains.  
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.DragCanvas.BringToFront(System.Windows.UIElement)">
            <summary>
            Assigns the element a z-index which will ensure that 
            it is in front of every other element in the Canvas.
            The z-index of every element whose z-index is between 
            the element's old and new z-index will have its z-index 
            decremented by one.
            </summary>
            <param name="element">
            The element to be sent to the front of the z-order.
            </param>
        </member>
        <member name="M:Mygod.Windows.Controls.DragCanvas.SendToBack(System.Windows.UIElement)">
            <summary>
            Assigns the element a z-index which will ensure that 
            it is behind every other element in the Canvas.
            The z-index of every element whose z-index is between 
            the element's old and new z-index will have its z-index 
            incremented by one.
            </summary>
            <param name="element">
            The element to be sent to the back of the z-order.
            </param>
        </member>
        <member name="M:Mygod.Windows.Controls.DragCanvas.FindCanvasChild(System.Windows.DependencyObject)">
            <summary>
            Walks up the visual tree starting with the specified DependencyObject, 
            looking for a UIElement which is a child of the Canvas.  If a suitable 
            element is not found, null is returned.  If the 'depObj' object is a 
            UIElement in the Canvas's Children collection, it will be returned.
            </summary>
            <param name="depObj">
            A DependencyObject from which the search begins.
            </param>
        </member>
        <member name="M:Mygod.Windows.Controls.DragCanvas.CalculateDragElementRect(System.Double,System.Double)">
            <summary>
            Returns a Rect which describes the bounds of the element being dragged.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.DragCanvas.ResolveOffset(System.Double,System.Double,System.Boolean@)">
            <summary>
            Determines one component of a UIElement's location 
            within a Canvas (either the horizontal or vertical offset).
            </summary>
            <param name="side1">
            The value of an offset relative to a default side of the 
            Canvas (i.e. top or left).
            </param>
            <param name="side2">
            The value of the offset relative to the other side of the 
            Canvas (i.e. bottom or right).
            </param>
            <param name="useSide1">
            Will be set to true if the returned value should be used 
            for the offset from the side represented by the 'side1' 
            parameter.  Otherwise, it will be set to false.
            </param>
        </member>
        <member name="M:Mygod.Windows.Controls.DragCanvas.UpdateZOrder(System.Windows.UIElement,System.Boolean)">
            <summary>
            Helper method used by the BringToFront and SendToBack methods.
            </summary>
            <param name="element">
            The element to bring to the front or send to the back.
            </param>
            <param name="bringToFront">
            Pass true if calling from BringToFront, else false.
            </param>
        </member>
        <member name="P:Mygod.Windows.Controls.DragCanvas.AllowDragging">
            <summary>
            Gets/sets whether elements in the DragCanvas should be draggable by the user.
            The default value is true.  This is a dependency property.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.DragCanvas.AllowDragOutOfView">
            <summary>
            Gets/sets whether the user should be able to drag elements in the DragCanvas out of
            the viewable area.  The default value is false.  This is a dependency property.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.DragCanvas.ElementBeingDragged">
            <summary>
            Returns the UIElement currently being dragged, or null.
            </summary>
            <remarks>
            Note to inheritors: This property exposes a protected 
            setter which should be used to modify the drag element.
            </remarks>
        </member>
        <member name="T:Mygod.Windows.Controls.Reflection">
            <summary>
            给指定元素加上反射。（长度=子元素.Margin.Bottom）
            </summary>
        </member>
        <member name="T:Mygod.Windows.Controls.WorldOfGooCursor">
            <summary>
            粘粘世界鼠标。
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.WorldOfGooCursor.#ctor">
            <summary>
            初始化 WorldOfGooCursor 类的新实例。
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.WorldOfGooCursor.ForegroundProperty">
            <summary>
            前景色的附加属性。
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.WorldOfGooCursor.BorderProperty">
            <summary>
            边框色的附加属性。
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.WorldOfGooCursor.ExhaledRadiusProperty">
            <summary>
            呼气后半径的附加属性。
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.WorldOfGooCursor.InhaledRadiusProperty">
            <summary>
            吸气后半径的附加属性。
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.WorldOfGooCursor.BorderThicknessProperty">
            <summary>
            边框厚度的附加属性。
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.WorldOfGooCursor.BreathDurationProperty">
            <summary>
            呼吸时长的附加属性。
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.WorldOfGooCursor.LengthProperty">
            <summary>
            长度的附加属性。
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.WorldOfGooCursor.ShrinkRateProperty">
            <summary>
            收缩率的附加属性。
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.WorldOfGooCursor.UseBezierCurveProperty">
            <summary>
            是否使用贝赛尔曲线的附加属性。
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.WorldOfGooCursor.FullscreenModeProperty">
            <summary>
            全屏显示的附加属性。
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.WorldOfGooCursor.PausedProperty">
            <summary>
            暂停移动的附加属性。
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.WorldOfGooCursor.Foreground">
            <summary>
            获取或设置前景色。
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.WorldOfGooCursor.Border">
            <summary>
            获取或设置边框色。
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.WorldOfGooCursor.ExhaledRadius">
            <summary>
            获取或设置呼气后的半径。
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.WorldOfGooCursor.InhaledRadius">
            <summary>
            获取或设置吸气后的半径。
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.WorldOfGooCursor.BorderThickness">
            <summary>
            获取或设置边框厚度。
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.WorldOfGooCursor.BreathDuration">
            <summary>
            获取或设置呼吸间隔。
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.WorldOfGooCursor.Length">
            <summary>
            获取或设置长度。
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.WorldOfGooCursor.ShrinkRate">
            <summary>
            获取或设置收缩率。
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.WorldOfGooCursor.UseBezierCurve">
            <summary>
            获取或设置是否使用贝赛尔曲线。
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.WorldOfGooCursor.FullscreenMode">
            <summary>
            获取或设置是否在全屏模式下。在全屏模式下获取鼠标坐标的方法将被重写，而且不会自动刷新。
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.WorldOfGooCursor.Paused">
            <summary>
            获取或设置是否暂停鼠标。暂停后动画仍将继续但鼠标位置将不再改变。
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.Interop.IMalloc">
            <summary>
                C# definition of the IMalloc interface.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.Interop.IMalloc.Alloc(System.UInt32)">
            <summary>
                Allocate a block of memory
            </summary>
            <param name="cb">Size, in bytes, of the memory block to be allocated.</param>
            <returns>a pointer to the allocated memory block.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.Interop.IMalloc.Realloc(System.IntPtr,System.UInt32)">
            <summary>
                Changes the size of a previously allocated memory block.
            </summary>
            <param name="pv">Pointer to the memory block to be reallocated</param>
            <param name="cb">Size of the memory block, in bytes, to be reallocated.</param>
            <returns>reallocated memory block</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.Interop.IMalloc.Free(System.IntPtr)">
            <summary>
                Free a previously allocated block of memory.
            </summary>
            <param name="pv">Pointer to the memory block to be freed.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.Interop.IMalloc.GetSize(System.IntPtr)">
            <summary>
                This method returns the size, in bytes, of a memory block previously allocated with IMalloc::Alloc or IMalloc::Realloc.
            </summary>
            <param name="pv">Pointer to the memory block for which the size is requested</param>
            <returns>The size of the allocated memory block in bytes.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.Interop.IMalloc.DidAlloc(System.IntPtr)">
            <summary>
                This method determines whether this allocator was used to allocate the specified block of memory.
            </summary>
            <param name="pv">Pointer to the memory block</param>
            <returns>
                1 - allocated
                0 - not allocated by this IMalloc Instance.
                -1 if DidAlloc is unable to determine whether or not it allocated the memory block.
            </returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.Interop.IMalloc.HeapMinimize">
            <summary>
                Minimizes the heap by releasing unused memory to the operating system.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.NotNullToVisibilityConverter">
            <summary>
            Converts a null check into a negated visibility value.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.CommandLinkTextConverter">
            <summary>
            Chops up multiline command link text appropriately.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.CommandLinkExtraTextVisibilityConverter">
            <summary>
            Determines visibility for command link extra text.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.RelayCommand">
            <summary>
            Defines a command that is relayed to a pre-defined delegate handler.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.RelayCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.RelayCommand"/> class.
            </summary>
            <param name="execute">A method to execute when the command fires.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.RelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.RelayCommand"/> class.
            </summary>
            <param name="execute">A method to execute when the command fires.</param>
            <param name="canExecute">A method to execute to determine whether the command can execure.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.RelayCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.RelayCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="E:Mygod.Windows.Dialogs.RelayCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.RelayCommand`1">
            <summary>
            Defines a command that is relayed to a pre-defined delegate handler.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.RelayCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.RelayCommand"/> class.
            </summary>
            <param name="execute">A method to execute when the command fires.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.RelayCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.RelayCommand"/> class.
            </summary>
            <param name="execute">A method to execute when the command fires.</param>
            <param name="canExecute">A method to execute to determine whether the command can execure.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.RelayCommand`1.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.RelayCommand`1.Execute(`0)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="E:Mygod.Windows.Dialogs.RelayCommand`1.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.SafeNativeMethods">
            <summary>
            Provides safe Win32 API wrapper calls for various actions not directly
            supported by WPF classes out of the box.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.SafeNativeMethods.SetWindowCloseButtonVisibility(System.Windows.Window,System.Boolean)">
            <summary>
            Sets the window's close button visibility.
            </summary>
            <param name="window">The window to set.</param>
            <param name="showCloseButton"><c>true</c> to show the close button; otherwise, <c>false</c></param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.SafeNativeMethods.SetWindowIconVisibility(System.Windows.Window,System.Boolean)">
            <summary>
            Sets the window's icon visibility.
            </summary>
            <param name="window">The window to set.</param>
            <param name="showIcon"><c>true</c> to show the icon in the caption; otherwise, <c>false</c></param>
        </member>
        <member name="T:Mygod.Windows.Dialogs.TaskDialog">
            <summary>
            Displays a task dialog.
            </summary>
            <summary>
            TaskDialog
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialog.Show(Mygod.Windows.Dialogs.TaskDialogOptions)">
            <summary>
            Displays a task dialog with the given configuration options.
            </summary>
            <param name="options">
            A <see cref="T:TaskDialogInterop.TaskDialogOptions"/> that specifies the
            configuration options for the dialog.
            </param>
            <returns>
            A <see cref="T:TaskDialogInterop.TaskDialogResult"/> value that specifies
            which button is clicked by the user.
            </returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialog.Show(System.Windows.Window,System.String,System.String,Mygod.Windows.Dialogs.TaskDialogType,System.String,System.String,System.String,System.String,Mygod.Windows.Dialogs.TaskDialogButtons,System.Nullable{System.Int32},Mygod.Windows.Dialogs.TaskDialogIcon,Mygod.Windows.Dialogs.TaskDialogIcon)">
            <summary>
            Displays a task dialog that has a message and that returns a result.
            </summary>
            <param name="owner">
            The <see cref="T:System.Windows.Window"/> that owns this dialog.
            </param>
            <param name="title">
            A <see cref="T:System.String"/> that specifies the title bar
            caption to display.
            </param>
            <param name="mainInstruction">
            A <see cref="T:System.String"/> that specifies the main text to display.
            </param>
            <param name="content">
            A <see cref="T:System.String"/> that specifies the body text to display.
            </param>
            <param name="expandedInfo">
            A <see cref="T:System.String"/> that specifies the expanded text to display when toggled.
            </param>
            <param name="verificationText">
            A <see cref="T:System.String"/> that specifies the text to display next to a checkbox.
            </param>
            <param name="footerText">
            A <see cref="T:System.String"/> that specifies the footer text to display.
            </param>
            <param name="buttons">
            A <see cref="T:TaskDialogInterop.TaskDialogCommonButtons"/> value that
            specifies which button or buttons to display.
            </param>
            <param name="mainIcon">
            A <see cref="T:TaskDialogInterop.TaskDialogIcon"/> that specifies the
            main icon to display.
            </param>
            <param name="footerIcon">
            A <see cref="T:TaskDialogInterop.TaskDialogIcon"/> that specifies the
            footer icon to display.
            </param>
            <returns></returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialog.OnShowing(Mygod.Windows.Dialogs.TaskDialogShowingEventArgs)">
            <summary>
            Raises the <see cref="E:Showing"/> event.
            </summary>
            <param name="e">The <see cref="T:Mygod.Windows.Dialogs.TaskDialogShowingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialog.OnClosed(Mygod.Windows.Dialogs.TaskDialogClosedEventArgs)">
            <summary>
            Raises the <see cref="E:Closed"/> event.
            </summary>
            <param name="e">The <see cref="T:Mygod.Windows.Dialogs.TaskDialogClosedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.TaskDialog"/> class.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialog.ForceEmulationMode">
            <summary>
            Forces the WPF-based TaskDialog window instead of using native calls.
            </summary>
        </member>
        <member name="E:Mygod.Windows.Dialogs.TaskDialog.Showing">
            <summary>
            Occurs when a task dialog is about to show.
            </summary>
            <remarks>
            Use this event for both notification and modification of all task
            dialog showings. Changes made to the configuration options will be
            persisted.
            </remarks>
        </member>
        <member name="E:Mygod.Windows.Dialogs.TaskDialog.Closed">
            <summary>
            Occurs when a task dialog has been closed.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.TaskDialogShowingEventArgs">
            <summary>
            Provides data for the <see cref="T:Mygod.Windows.Dialogs.TaskDialog.Showing"/> event.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialogShowingEventArgs.#ctor(Mygod.Windows.Dialogs.TaskDialogOptions@)">
            <summary>
            Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.TaskDialogShowingEventArgs"/> class.
            </summary>
            <param name="configOptions">The configuration options for the TaskDialog.</param>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogShowingEventArgs.ConfigurationOptions">
            <summary>
            Gets the configuration options for the TaskDialog.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.TaskDialogClosedEventArgs">
            <summary>
            Provides data for the <see cref="T:Mygod.Windows.Dialogs.TaskDialog.Closed"/> event.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialogClosedEventArgs.#ctor(Mygod.Windows.Dialogs.TaskDialogResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.TaskDialogClosedEventArgs"/> class.
            </summary>
            <param name="result">The result of the TaskDialog.</param>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogClosedEventArgs.Result">
            <summary>
            Gets the result of the TaskDialog.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.TaskDialogShowingEventHandler">
            <summary>
            Represents the method that will handle the
            <see cref="T:TaskDialogInterop.TaskDialog.Showing"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">
            A <see cref="T:TaskDialogInterop.TaskDialogShowingEventArgs"/> that contains the event data.
            </param>
        </member>
        <member name="T:Mygod.Windows.Dialogs.TaskDialogClosedEventHandler">
            <summary>
            Represents the method that will handle the
            <see cref="T:TaskDialogInterop.TaskDialog.Closed"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">
            A <see cref="T:TaskDialogInterop.TaskDialogClosedEventArgs"/> that contains the event data.
            </param>
        </member>
        <member name="T:Mygod.Windows.Dialogs.TaskDialogButtons">
            <summary>
            The TaskDialog common button flags used to specify the builtin bottons to show in the TaskDialog.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogButtons.None">
            <summary>
            No common buttons.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogButtons.OK">
            <summary>
            OK common button. If selected Task Dialog will return DialogResult.OK.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogButtons.Yes">
            <summary>
            Yes common button. If selected Task Dialog will return DialogResult.Yes.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogButtons.No">
            <summary>
            No common button. If selected Task Dialog will return DialogResult.No.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogButtons.Cancel">
            <summary>
            Cancel common button. If selected Task Dialog will return DialogResult.Cancel.
            If this button is specified, the dialog box will respond to typical cancel actions (Alt-F4 and Escape).
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogButtons.Retry">
            <summary>
            Retry common button. If selected Task Dialog will return DialogResult.Retry.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogButtons.Close">
            <summary>
            Close common button. If selected Task Dialog will return this value.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.TaskDialogIcon">
            <summary>
            The System icons the TaskDialog supports.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogIcon.None">
            <summary>
            No Icon.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogIcon.Default">
            <summary>
            Use the icon specified in type.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogIcon.Warning">
            <summary>
            System warning icon.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogIcon.Error">
            <summary>
            System Error icon.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogIcon.Information">
            <summary>
            System Information icon.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogIcon.Shield">
            <summary>
            Shield icon.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.VistaTaskDialogNotification">
            <summary>
            Task Dialog callback notifications. 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialogNotification.Created">
            <summary>
            Sent by the Task Dialog once the dialog has been created and before it is displayed.
            The value returned by the callback is ignored.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialogNotification.ButtonClicked">
            <summary>
            Sent by the Task Dialog when the user selects a button or command link in the task dialog.
            The button ID corresponding to the button selected will be available in the
            TaskDialogNotificationArgs. To prevent the Task Dialog from closing, the application must
            return true, otherwise the Task Dialog will be closed and the button ID returned to via
            the original application call.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialogNotification.HyperlinkClicked">
            <summary>
            Sent by the Task Dialog when the user clicks on a hyperlink in the Task Dialog抯 content.
            The string containing the HREF of the hyperlink will be available in the
            TaskDialogNotificationArgs. To prevent the TaskDialog from shell executing the hyperlink,
            the application must return TRUE, otherwise ShellExecute will be called.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialogNotification.Timer">
            <summary>
            Sent by the Task Dialog approximately every 200 milliseconds when TaskDialog.CallbackTimer
            has been set to true. The number of milliseconds since the dialog was created or the
            notification returned true is available on the TaskDialogNotificationArgs. To reset
            the tickcount, the application must return true, otherwise the tickcount will continue to
            increment.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialogNotification.Destroyed">
            <summary>
            Sent by the Task Dialog when it is destroyed and its window handle no longer valid.
            The value returned by the callback is ignored.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialogNotification.RadioButtonClicked">
            <summary>
            Sent by the Task Dialog when the user selects a radio button in the task dialog.
            The button ID corresponding to the button selected will be available in the
            TaskDialogNotificationArgs.
            The value returned by the callback is ignored.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialogNotification.DialogConstructed">
            <summary>
            Sent by the Task Dialog once the dialog has been constructed and before it is displayed.
            The value returned by the callback is ignored.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialogNotification.VerificationClicked">
            <summary>
            Sent by the Task Dialog when the user checks or unchecks the verification checkbox.
            The verificationFlagChecked value is available on the TaskDialogNotificationArgs.
            The value returned by the callback is ignored.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialogNotification.Help">
            <summary>
            Sent by the Task Dialog when the user presses F1 on the keyboard while the dialog has focus.
            The value returned by the callback is ignored.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialogNotification.ExpandoButtonClicked">
            <summary>
            Sent by the task dialog when the user clicks on the dialog's expando button.
            The expanded value is available on the TaskDialogNotificationArgs.
            The value returned by the callback is ignored.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.VistaProgressBarState">
            <summary>
            Progress bar state.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaProgressBarState.Normal">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaProgressBarState.Error">
            <summary>
            Error state.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaProgressBarState.Paused">
            <summary>
            Paused state.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.VistaTaskDialogButton">
            <summary>
            A custom button for the TaskDialog.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialogButton.buttonId">
            <summary>
            The ID of the button. This value is returned by TaskDialog.Show when the button is clicked.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialogButton.buttonText">
            <summary>
            The string that appears on the button.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.VistaTaskDialogButton.#ctor(System.Int32,System.String)">
            <summary>
            Initialize the custom button.
            </summary>
            <param name="id">The ID of the button. This value is returned by TaskDialog.Show when
            the button is clicked. Typically this will be a value in the DialogResult enum.</param>
            <param name="text">The string that appears on the button.</param>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialogButton.ButtonId">
            <summary>
            The ID of the button. This value is returned by TaskDialog.Show when the button is clicked.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialogButton.ButtonText">
            <summary>
            The string that appears on the button.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.VistaTaskDialogNotificationArgs">
            <summary>
            Arguments passed to the TaskDialog callback.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialogNotificationArgs.notification">
            <summary>
            What the TaskDialog callback is a notification of.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialogNotificationArgs.buttonId">
            <summary>
            The button ID if the notification is about a button. This a DialogResult
            value or the ButtonID member of a TaskDialogButton set in the
            TaskDialog.Buttons or TaskDialog.RadioButtons members.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialogNotificationArgs.hyperlink">
            <summary>
            The HREF string of the hyperlink the notification is about.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialogNotificationArgs.timerTickCount">
            <summary>
            The number of milliseconds since the dialog was opened or the last time the
            callback for a timer notification reset the value by returning true.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialogNotificationArgs.verificationFlagChecked">
            <summary>
            The state of the verification flag when the notification is about the verification flag.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialogNotificationArgs.expanded">
            <summary>
            The state of the dialog expando when the notification is about the expando.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialogNotificationArgs.Notification">
            <summary>
            What the TaskDialog callback is a notification of.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialogNotificationArgs.ButtonId">
            <summary>
            The button ID if the notification is about a button. This a DialogResult
            value or the ButtonID member of a TaskDialogButton set in the
            TaskDialog.Buttons member.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialogNotificationArgs.Hyperlink">
            <summary>
            The HREF string of the hyperlink the notification is about.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialogNotificationArgs.TimerTickCount">
            <summary>
            The number of milliseconds since the dialog was opened or the last time the
            callback for a timer notification reset the value by returning true.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialogNotificationArgs.VerificationFlagChecked">
            <summary>
            The state of the verification flag when the notification is about the verification flag.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialogNotificationArgs.Expanded">
            <summary>
            The state of the dialog expando when the notification is about the expando.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialogNotificationArgs.Config">
            <summary>
            Gets or sets the configuration options for the dialog.
            </summary>
            <remarks>
            Changes to any of the options will be ignored.
            </remarks>
        </member>
        <member name="T:Mygod.Windows.Dialogs.VistaTaskDialog">
            <summary>
            A Task Dialog. This is like a MessageBox but with many more features. TaskDialog requires Windows Longhorn or later.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialog.windowTitle">
            <summary>
            The string to be used for the dialog box title. If this parameter is NULL, the filename of the executable program is used.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialog.mainInstruction">
            <summary>
            The string to be used for the main instruction.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialog.content">
            <summary>
            The string to be used for the dialog抯 primary content. If the EnableHyperlinks member is true,
            then this string may contain hyperlinks in the form: <A HREF="executablestring">Hyperlink Text</A>. 
            WARNING: Enabling hyperlinks when using content from an unsafe source may cause security vulnerabilities.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialog.commonButtons">
            <summary>
            Specifies the push buttons displayed in the dialog box.  This parameter may be a combination of flags.
            If no common buttons are specified and no custom buttons are specified using the Buttons member, the
            dialog box will contain the OK button by default.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialog.mainIcon">
            <summary>
            Specifies a built in icon for the main icon in the dialog. If this is set to none
            and the CustomMainIcon is null then no main icon will be displayed.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialog.customMainIcon">
            <summary>
            Specifies a custom in icon for the main icon in the dialog. If this is set to none
            and the CustomMainIcon member is null then no main icon will be displayed.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialog.footerIcon">
            <summary>
            Specifies a built in icon for the icon to be displayed in the footer area of the
            dialog box. If this is set to none and the CustomFooterIcon member is null then no
            footer icon will be displayed.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialog.customFooterIcon">
            <summary>
            Specifies a custom icon for the icon to be displayed in the footer area of the
            dialog box. If this is set to none and the CustomFooterIcon member is null then no
            footer icon will be displayed.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialog.buttons">
            <summary>
            Specifies the custom push buttons to display in the dialog. Use CommonButtons member for
            common buttons; OK, Yes, No, Retry and Cancel, and Buttons when you want different text
            on the push buttons.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialog.radioButtons">
            <summary>
            Specifies the radio buttons to display in the dialog.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialog.flags">
            <summary>
            The flags passed to TaskDialogIndirect.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialog.defaultButton">
            <summary>
            Indicates the default button for the dialog. This may be any of the values specified
            in ButtonId members of one of the TaskDialogButton structures in the Buttons array,
            or one a DialogResult value that corresponds to a buttons specified in the CommonButtons Member.
            If this member is zero or its value does not correspond to any button ID in the dialog,
            then the first button in the dialog will be the default. 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialog.defaultRadioButton">
            <summary>
            Indicates the default radio button for the dialog. This may be any of the values specified
            in ButtonId members of one of the TaskDialogButton structures in the RadioButtons array.
            If this member is zero or its value does not correspond to any radio button ID in the dialog,
            then the first button in RadioButtons will be the default.
            The property NoDefaultRadioButton can be set to have no default.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialog.verificationText">
            <summary>
            The string to be used to label the verification checkbox. If this member is null, the
            verification checkbox is not displayed in the dialog box.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialog.expandedInformation">
            <summary>
            The string to be used for displaying additional information. The additional information is
            displayed either immediately below the content or below the footer text depending on whether
            the ExpandFooterArea member is true. If the EnableHyperlinks member is true, then this string
            may contain hyperlinks in the form: <A HREF="executablestring">Hyperlink Text</A>.
            WARNING: Enabling hyperlinks when using content from an unsafe source may cause security vulnerabilities.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialog.expandedControlText">
            <summary>
            The string to be used to label the button for collapsing the expanded information. This
            member is ignored when the ExpandedInformation member is null. If this member is null
            and the CollapsedControlText is specified, then the CollapsedControlText value will be
            used for this member as well.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialog.collapsedControlText">
            <summary>
            The string to be used to label the button for expanding the expanded information. This
            member is ignored when the ExpandedInformation member is null.  If this member is null
            and the ExpandedControlText is specified, then the ExpandedControlText value will be
            used for this member as well.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialog.footer">
            <summary>
            The string to be used in the footer area of the dialog box. If the EnableHyperlinks member
            is true, then this string may contain hyperlinks in the form: <A HREF="executablestring">
            Hyperlink Text</A>.
            WARNING: Enabling hyperlinks when using content from an unsafe source may cause security vulnerabilities.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialog.callback">
            <summary>
            The callback that receives messages from the Task Dialog when various events occur.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialog.callbackData">
            <summary>
            Reference that is passed to the callback.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.VistaTaskDialog.width">
            <summary>
            Specifies the width of the Task Dialog抯 client area in DLU抯. If 0, Task Dialog will calculate the ideal width.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.VistaTaskDialog.#ctor">
            <summary>
            Creates a default Task Dialog.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.VistaTaskDialog.Reset">
            <summary>
            Resets the Task Dialog to the state when first constructed, all properties set to their default value.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.VistaTaskDialog.Show">
            <summary>
            Creates, displays, and operates a task dialog. The task dialog contains application-defined messages, title,
            verification check box, command links and push buttons, plus any combination of predefined icons and push buttons
            as specified on the other members of the class before calling Show.
            </summary>
            <returns>The result of the dialog, either a DialogResult value for common push buttons set in the CommonButtons
            member or the ButtonID from a TaskDialogButton structure set on the Buttons member.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.VistaTaskDialog.Show(System.Windows.Window)">
            <summary>
            Creates, displays, and operates a task dialog. The task dialog contains application-defined messages, title,
            verification check box, command links and push buttons, plus any combination of predefined icons and push buttons
            as specified on the other members of the class before calling Show.
            </summary>
            <param name="owner">Owner window the task Dialog will modal to.</param>
            <returns>The result of the dialog, either a DialogResult value for common push buttons set in the CommonButtons
            member or the ButtonID from a TaskDialogButton structure set on the Buttons member.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.VistaTaskDialog.Show(System.IntPtr)">
            <summary>
            Creates, displays, and operates a task dialog. The task dialog contains application-defined messages, title,
            verification check box, command links and push buttons, plus any combination of predefined icons and push buttons
            as specified on the other members of the class before calling Show.
            </summary>
            <param name="hwndOwner">Owner window the task Dialog will modal to.</param>
            <returns>The result of the dialog, either a DialogResult value for common push buttons set in the CommonButtons
            member or the ButtonID from a TaskDialogButton structure set on the Buttons member.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.VistaTaskDialog.Show(System.Windows.Window,System.Boolean@)">
            <summary>
            Creates, displays, and operates a task dialog. The task dialog contains application-defined messages, title,
            verification check box, command links and push buttons, plus any combination of predefined icons and push buttons
            as specified on the other members of the class before calling Show.
            </summary>
            <param name="owner">Owner window the task Dialog will modal to.</param>
            <param name="verificationFlagChecked">Returns true if the verification checkbox was checked when the dialog
            was dismissed.</param>
            <returns>The result of the dialog, either a DialogResult value for common push buttons set in the CommonButtons
            member or the ButtonID from a TaskDialogButton structure set on the Buttons member.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.VistaTaskDialog.Show(System.IntPtr,System.Boolean@)">
            <summary>
            Creates, displays, and operates a task dialog. The task dialog contains application-defined messages, title,
            verification check box, command links and push buttons, plus any combination of predefined icons and push buttons
            as specified on the other members of the class before calling Show.
            </summary>
            <param name="hwndOwner">Owner window the task Dialog will modal to.</param>
            <param name="verificationFlagChecked">Returns true if the verification checkbox was checked when the dialog
            was dismissed.</param>
            <returns>The result of the dialog, either a DialogResult value for common push buttons set in the CommonButtons
            member or the ButtonID from a TaskDialogButton structure set on the Buttons member.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.VistaTaskDialog.Show(System.Windows.Window,System.Boolean@,System.Int32@)">
            <summary>
            Creates, displays, and operates a task dialog. The task dialog contains application-defined messages, title,
            verification check box, command links and push buttons, plus any combination of predefined icons and push buttons
            as specified on the other members of the class before calling Show.
            </summary>
            <param name="owner">Owner window the task Dialog will modal to.</param>
            <param name="verificationFlagChecked">Returns true if the verification checkbox was checked when the dialog
            was dismissed.</param>
            <param name="radioButtonResult">The radio botton selected by the user.</param>
            <returns>The result of the dialog, either a DialogResult value for common push buttons set in the CommonButtons
            member or the ButtonID from a TaskDialogButton structure set on the Buttons member.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.VistaTaskDialog.Show(System.IntPtr,System.Boolean@,System.Int32@)">
            <summary>
            Creates, displays, and operates a task dialog. The task dialog contains application-defined messages, title,
            verification check box, command links and push buttons, plus any combination of predefined icons and push buttons
            as specified on the other members of the class before calling Show.
            </summary>
            <param name="hwndOwner">Owner window the task Dialog will modal to.</param>
            <param name="verificationFlagChecked">Returns true if the verification checkbox was checked when the dialog
            was dismissed.</param>
            <param name="radioButtonResult">The radio botton selected by the user.</param>
            <returns>The result of the dialog, either a DialogResult value for common push buttons set in the CommonButtons
            member or the ButtonID from a TaskDialogButton structure set on the Buttons member.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.VistaTaskDialog.PrivateShow(System.IntPtr,System.Boolean@,System.Int32@)">
            <summary>
            Creates, displays, and operates a task dialog. The task dialog contains application-defined messages, title,
            verification check box, command links and push buttons, plus any combination of predefined icons and push buttons
            as specified on the other members of the class before calling Show.
            </summary>
            <param name="hwndOwner">Owner window the task Dialog will modal to.</param>
            <param name="verificationFlagChecked">Returns true if the verification checkbox was checked when the dialog
            was dismissed.</param>
            <param name="radioButtonResult">The radio botton selected by the user.</param>
            <returns>The result of the dialog, either a DialogResult value for common push buttons set in the CommonButtons
            member or the ButtonID from a TaskDialogButton structure set on the Buttons member.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.VistaTaskDialog.PrivateCallback(System.IntPtr,System.UInt32,System.UIntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            The callback from the native Task Dialog. This prepares the friendlier arguments and calls the simplier callback.
            </summary>
            <param name="hwnd">The window handle of the Task Dialog that is active.</param>
            <param name="msg">The notification. A TaskDialogNotification value.</param>
            <param name="wparam">Specifies additional noitification information.  The contents of this parameter depends on the value of the msg parameter.</param>
            <param name="lparam">Specifies additional noitification information.  The contents of this parameter depends on the value of the msg parameter.</param>
            <param name="refData">Specifies the application-defined value given in the call to TaskDialogIndirect.</param>
            <returns>A HRESULT. It's not clear in the spec what a failed result will do.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.VistaTaskDialog.SetFlag(Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_FLAGS,System.Boolean)">
            <summary>
            Helper function to set or clear a bit in the flags field.
            </summary>
            <param name="flag">The Flag bit to set or clear.</param>
            <param name="value">True to set, false to clear the bit in the flags field.</param>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.IsAvailableOnThisOS">
            <summary>
            Returns true if the current operating system supports TaskDialog. If false TaskDialog.Show should not
            be called as the results are undefined but often results in a crash.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.RequiredOSVersion">
            <summary>
            The minimum Windows version needed to support TaskDialog.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.WindowTitle">
            <summary>
            The string to be used for the dialog box title. If this parameter is NULL, the filename of the executable program is used.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.MainInstruction">
            <summary>
            The string to be used for the main instruction.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.Content">
            <summary>
            The string to be used for the dialog抯 primary content. If the EnableHyperlinks member is true,
            then this string may contain hyperlinks in the form: <A HREF="executablestring">Hyperlink Text</A>. 
            WARNING: Enabling hyperlinks when using content from an unsafe source may cause security vulnerabilities.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.CommonButtons">
            <summary>
            Specifies the push buttons displayed in the dialog box. This parameter may be a combination of flags.
            If no common buttons are specified and no custom buttons are specified using the Buttons member, the
            dialog box will contain the OK button by default.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.MainIcon">
            <summary>
            Specifies a built in icon for the main icon in the dialog. If this is set to none
            and the CustomMainIcon is null then no main icon will be displayed.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.CustomMainIcon">
            <summary>
            Specifies a custom in icon for the main icon in the dialog. If this is set to none
            and the CustomMainIcon member is null then no main icon will be displayed.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.FooterIcon">
            <summary>
            Specifies a built in icon for the icon to be displayed in the footer area of the
            dialog box. If this is set to none and the CustomFooterIcon member is null then no
            footer icon will be displayed.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.CustomFooterIcon">
            <summary>
            Specifies a custom icon for the icon to be displayed in the footer area of the
            dialog box. If this is set to none and the CustomFooterIcon member is null then no
            footer icon will be displayed.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.Buttons">
            <summary>
            Specifies the custom push buttons to display in the dialog. Use CommonButtons member for
            common buttons; OK, Yes, No, Retry and Cancel, and Buttons when you want different text
            on the push buttons.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.RadioButtons">
            <summary>
            Specifies the radio buttons to display in the dialog.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.EnableHyperlinks">
            <summary>
            Enables hyperlink processing for the strings specified in the Content, ExpandedInformation
            and FooterText members. When enabled, these members may be strings that contain hyperlinks
            in the form: <A HREF="executablestring">Hyperlink Text</A>. 
            WARNING: Enabling hyperlinks when using content from an unsafe source may cause security vulnerabilities.
            Note: Task Dialog will not actually execute any hyperlinks. Hyperlink execution must be handled
            in the callback function specified by Callback member.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.AllowDialogCancellation">
            <summary>
            Indicates that the dialog should be able to be closed using Alt-F4, Escape and the title bar抯
            close button even if no cancel button is specified in either the CommonButtons or Buttons members.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.UseCommandLinks">
            <summary>
            Indicates that the buttons specified in the Buttons member should be displayed as command links
            (using a standard task dialog glyph) instead of push buttons.  When using command links, all
            characters up to the first new line character in the ButtonText member (of the TaskDialogButton
            structure) will be treated as the command link抯 main text, and the remainder will be treated
            as the command link抯 note. This flag is ignored if the Buttons member has no entires.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.UseCommandLinksNoIcon">
            <summary>
            Indicates that the buttons specified in the Buttons member should be displayed as command links
            (without a glyph) instead of push buttons. When using command links, all characters up to the
            first new line character in the ButtonText member (of the TaskDialogButton structure) will be
            treated as the command link抯 main text, and the remainder will be treated as the command link抯
            note. This flag is ignored if the Buttons member has no entires.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.ExpandFooterArea">
            <summary>
            Indicates that the string specified by the ExpandedInformation member should be displayed at the
            bottom of the dialog抯 footer area instead of immediately after the dialog抯 content. This flag
            is ignored if the ExpandedInformation member is null.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.ExpandedByDefault">
            <summary>
            Indicates that the string specified by the ExpandedInformation member should be displayed
            when the dialog is initially displayed. This flag is ignored if the ExpandedInformation member
            is null.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.VerificationFlagChecked">
            <summary>
            Indicates that the verification checkbox in the dialog should be checked when the dialog is
            initially displayed. This flag is ignored if the VerificationText parameter is null.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.ShowProgressBar">
            <summary>
            Indicates that a Progress Bar should be displayed.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.ShowMarqueeProgressBar">
            <summary>
            Indicates that an Marquee Progress Bar should be displayed.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.CallbackTimer">
            <summary>
            Indicates that the TaskDialog抯 callback should be called approximately every 200 milliseconds.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.PositionRelativeToWindow">
            <summary>
            Indicates that the TaskDialog should be positioned (centered) relative to the owner window
            passed when calling Show. If not set (or no owner window is passed), the TaskDialog is
            positioned (centered) relative to the monitor.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.RightToLeftLayout">
            <summary>
            Indicates that the TaskDialog should have right to left layout.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.NoDefaultRadioButton">
            <summary>
            Indicates that the TaskDialog should have no default radio button.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.CanBeMinimized">
            <summary>
            Indicates that the TaskDialog can be minimised. Works only if there if parent window is null. Will enable cancellation also.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.DefaultButton">
            <summary>
            Indicates the default button for the dialog. This may be any of the values specified
            in ButtonId members of one of the TaskDialogButton structures in the Buttons array,
            or one a DialogResult value that corresponds to a buttons specified in the CommonButtons Member.
            If this member is zero or its value does not correspond to any button ID in the dialog,
            then the first button in the dialog will be the default. 
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.DefaultRadioButton">
            <summary>
            Indicates the default radio button for the dialog. This may be any of the values specified
            in ButtonId members of one of the TaskDialogButton structures in the RadioButtons array.
            If this member is zero or its value does not correspond to any radio button ID in the dialog,
            then the first button in RadioButtons will be the default.
            The property NoDefaultRadioButton can be set to have no default.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.VerificationText">
            <summary>
            The string to be used to label the verification checkbox. If this member is null, the
            verification checkbox is not displayed in the dialog box.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.ExpandedInformation">
            <summary>
            The string to be used for displaying additional information. The additional information is
            displayed either immediately below the content or below the footer text depending on whether
            the ExpandFooterArea member is true. If the EnameHyperlinks member is true, then this string
            may contain hyperlinks in the form: <A HREF="executablestring">Hyperlink Text</A>.
            WARNING: Enabling hyperlinks when using content from an unsafe source may cause security vulnerabilities.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.ExpandedControlText">
            <summary>
            The string to be used to label the button for collapsing the expanded information. This
            member is ignored when the ExpandedInformation member is null. If this member is null
            and the CollapsedControlText is specified, then the CollapsedControlText value will be
            used for this member as well.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.CollapsedControlText">
            <summary>
            The string to be used to label the button for expanding the expanded information. This
            member is ignored when the ExpandedInformation member is null.  If this member is null
            and the ExpandedControlText is specified, then the ExpandedControlText value will be
            used for this member as well.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.Footer">
            <summary>
            The string to be used in the footer area of the dialog box. If the EnableHyperlinks member
            is true, then this string may contain hyperlinks in the form: <A HREF="executablestring">
            Hyperlink Text</A>.
            WARNING: Enabling hyperlinks when using content from an unsafe source may cause security vulnerabilities.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.Width">
            <summary>
            width of the Task Dialog's client area in DLU's. If 0, Task Dialog will calculate the ideal width.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.Callback">
            <summary>
            The callback that receives messages from the Task Dialog when various events occur.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.VistaTaskDialog.CallbackData">
            <summary>
            Reference that is passed to the callback.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.TaskDialogSimpleResult">
            <summary>
            Specifies identifiers to indicate the return value of a task dialog box.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogSimpleResult.None">
            <summary>
            Nothing is returned from the dialog box.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogSimpleResult.Ok">
            <summary>
            The dialog box return value is Ok (usually sent from a button
            labeled Ok).
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogSimpleResult.Cancel">
            <summary>
            The dialog box return value is Cancel (usually sent from a button
            labeled Cancel). Can also be as a result of clicking the red X in
            the top right corner.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogSimpleResult.Retry">
            <summary>
            The dialog box return value is Retry (usually sent from a button
            labeled Retry).
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogSimpleResult.Yes">
            <summary>
            The dialog box return value is Yes (usually sent from a button
            labeled Yes).
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogSimpleResult.No">
            <summary>
            The dialog box return value is No (usually sent from a button
            labeled No).
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogSimpleResult.Close">
            <summary>
            The dialog box return value is Close (usually sent from a button
            labeled Close),
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogSimpleResult.Command">
            <summary>
            The dialog box return value is a custom command (usually sent from
            a command button).
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogSimpleResult.Custom">
            <summary>
            The dialog box return value is a custom button (usually sent from
            a custom-defined button).
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.TaskDialogResult">
            <summary>
            Specifies data for the return values of a task dialog box.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogResult.Empty">
            <summary>
            Represents a result with no data.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialogResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaskDialog.TaskDialogResult"/> class.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialogResult.#ctor(Mygod.Windows.Dialogs.TaskDialogSimpleResult,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.TaskDialogResult"/> class.
            </summary>
            <param name="result">The simple TaskDialog result.</param>
            <param name="verificationChecked">Wether the verification checkbox was checked.</param>
            <param name="radioButtonResult">The radio button result, if any.</param>
            <param name="commandButtonResult">The command button result, if any.</param>
            <param name="customButtonResult">The custom button result, if any.</param>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogResult.Result">
            <summary>
            Gets the <see cref="T:TaskDialogSimpleResult"/> of the TaskDialog.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogResult.VerificationChecked">
            <summary>
            Gets a value indicating whether or not the verification checkbox
            was checked. A null value indicates that the checkbox wasn't shown.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogResult.RadioButtonResult">
            <summary>
            Gets the zero-based index of the radio button that was clicked.
            A null value indicates that no radio button was clicked.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogResult.CommandButtonResult">
            <summary>
            Gets the zero-based index of the command button that was clicked.
            A null value indicates that no command button was clicked.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogResult.CustomButtonResult">
            <summary>
            Gets the zero-based index of the custom button that was clicked.
            A null value indicates that no custom button was clicked.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.TaskDialogCallback">
            <summary>
            The signature of the callback that recieves notificaitons from a Task Dialog.
            </summary>
            <param name="dialog">The active dialog. Use this to manipulate various properties of the dialog as it is displayed.</param>
            <param name="args">The notification arguments including the type of notification and information for the notification.</param>
            <param name="callbackData">The value set on TaskDialog.CallbackData</param>
            <returns>Return value meaning varies depending on the Notification member of args.</returns>
        </member>
        <member name="T:Mygod.Windows.Dialogs.TaskDialogOptions">
            <summary>
            Defines configuration options for showing a task dialog.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.Default">
            <summary>
            The default <see cref="T:TaskDialogOptions"/> to be used
            by all new <see cref="T:TaskDialog"/>s.
            </summary>
            <remarks>
            Use this to make application-wide defaults, such as for
            the caption.
            </remarks>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.Owner">
            <summary>
            The owner window of the task dialog box.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.Title">
            <summary>
            Caption of the window.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.MainIcon">
            <summary>
            A large 32x32 icon that signifies the purpose of the dialog, using
            one of the built-in system icons.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.CustomMainIcon">
            <summary>
            A large 32x32 icon that signifies the purpose of the dialog, using
            a custom Icon resource. If defined <see cref="F:Mygod.Windows.Dialogs.TaskDialogOptions.MainIcon"/> will be
            ignored.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.MainInstruction">
            <summary>
            Principal text.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.Content">
            <summary>
            Supplemental text that expands on the principal text.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.ExpandedInfo">
            <summary>
            Extra text that will be hidden by default.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.ExpandedByDefault">
            <summary>
            Indicates that the expanded info should be displayed when the
            dialog is initially displayed.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.ExpandToFooter">
            <summary>
            Indicates that the expanded info should be displayed at the bottom
            of the dialog's footer area instead of immediately after the
            dialog's content.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.Buttons">
            <summary>
            Standard buttons.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.RadioButtons">
            <summary>
            Application-defined options for the user.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.CustomButtons">
            <summary>
            Buttons that are not from the set of standard buttons. Use an
            ampersand to denote an access key.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.CommandButtons">
            <summary>
            Command link buttons.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.DefaultButtonIndex">
            <summary>
            Zero-based index of the button to have focus by default. (use the value of TaskDialogButtons for common buttons)
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.VerificationText">
            <summary>
            Text accompanied by a checkbox, typically for user feedback such as
            Do-not-show-this-dialog-again options.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.VerificationByDefault">
            <summary>
            Indicates that the verification checkbox in the dialog is checked
            when the dialog is initially displayed.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.FooterIcon">
            <summary>
            A small 16x16 icon that signifies the purpose of the footer text,
            using one of the built-in system icons.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.CustomFooterIcon">
            <summary>
            A small 16x16 icon that signifies the purpose of the footer text,
            using a custom Icon resource. If defined <see cref="F:Mygod.Windows.Dialogs.TaskDialogOptions.FooterIcon"/>
            will be ignored.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.FooterText">
            <summary>
            Additional footer text.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.AllowDialogCancellation">
            <summary>
            Indicates that the dialog should be able to be closed using Alt-F4,
            Escape, and the title bar's close button even if no cancel button
            is specified the CommonButtons.
            </summary>
            <remarks>
            You'll want to set this to true if you use CustomButtons and have
            a Cancel-like button in it.
            </remarks>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.ShowProgressBar">
            <summary>
            Indicates that a Progress Bar is to be displayed.
            </summary>
            <remarks>
            You can set the state, whether paused, in error, etc., as well as
            the range and current value by setting a callback and timer to
            control the dialog at custom intervals.
            </remarks>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.ShowMarqueeProgressBar">
            <summary>
            Indicates that an Marquee Progress Bar is to be displayed.
            </summary>
            <remarks>
            You can set start and stop the animation by setting a callback and
            timer to control the dialog at custom intervals.
            </remarks>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.Callback">
            <summary>
            A callback that receives messages from the Task Dialog when
            various events occur.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.CallbackData">
            <summary>
            Reference object that is passed to the callback.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.TaskDialogOptions.EnableCallbackTimer">
            <summary>
            Indicates that the task dialog's callback is to be called
            approximately every 200 milliseconds.
            </summary>
            <remarks>
            Enable this in order to do updates on the task dialog periodically,
            such as for a progress bar, current download speed, or estimated
            time to complete, etc.
            </remarks>
        </member>
        <member name="T:Mygod.Windows.Dialogs.TaskDialogButtonData">
            <summary>
            Provides data for all task dialog buttons.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialogButtonData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.TaskDialogButtonData"/> class.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialogButtonData.#ctor(System.Int32,System.String,System.Windows.Input.ICommand,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.TaskDialogButtonData"/> struct.
            </summary>
            <param name="id">The id value for the button.</param>
            <param name="text">The text label.</param>
            <param name="command">The command to associate.</param>
            <param name="isDefault">Whether the button should be the default.</param>
            <param name="isCancel">Whether the button should be a cancel.</param>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogButtonData.ID">
            <summary>
            Gets the button's ID value to return when clicked.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogButtonData.Text">
            <summary>
            Gets the button's text label.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogButtonData.IsDefault">
            <summary>
            Gets a value indicating whether or not the button should be the default.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogButtonData.IsCancel">
            <summary>
            Gets a value indicating whether or not the button should be a cancel.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogButtonData.Command">
            <summary>
            Gets the button's command.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.IActiveTaskDialog">
            <summary>
            Defines methods for manipulating an active dialog during a callback.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.IActiveTaskDialog.SetMarqueeProgressBar(System.Boolean)">
            <summary>
            Used to indicate whether the hosted progress bar should be displayed in marquee mode or not.
            </summary>
            <param name="marquee">Specifies whether the progress bar sbould be shown in Marquee mode.
            A value of true turns on Marquee mode.</param>
            <returns>If the function succeeds the return value is true.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.IActiveTaskDialog.SetProgressBarState(Mygod.Windows.Dialogs.VistaProgressBarState)">
            <summary>
            Sets the state of the progress bar.
            </summary>
            <param name="newState">The state to set the progress bar.</param>
            <returns>If the function succeeds the return value is true.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.IActiveTaskDialog.SetProgressBarRange(System.Int16,System.Int16)">
            <summary>
            Set the minimum and maximum values for the hosted progress bar.
            </summary>
            <param name="minRange">Minimum range value. By default, the minimum value is zero.</param>
            <param name="maxRange">Maximum range value.  By default, the maximum value is 100.</param>
            <returns>If the function succeeds the return value is true.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.IActiveTaskDialog.SetProgressBarPosition(System.Int32)">
            <summary>
            Set the current position for a progress bar.
            </summary>
            <param name="newPosition">The new position.</param>
            <returns>Returns the previous value if successful, or zero otherwise.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.IActiveTaskDialog.SetProgressBarMarquee(System.Boolean,System.UInt32)">
            <summary>
            Sets the animation state of the Marquee Progress Bar.
            </summary>
            <param name="startMarquee">true starts the marquee animation and false stops it.</param>
            <param name="speed">The time in milliseconds between refreshes.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.IActiveTaskDialog.SetWindowTitle(System.String)">
            <summary>
            Updates the window title text.
            </summary>
            <param name="title">The new value.</param>
            <returns>If the function succeeds the return value is true.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.IActiveTaskDialog.SetContent(System.String)">
            <summary>
            Updates the content text.
            </summary>
            <param name="content">The new value.</param>
            <returns>If the function succeeds the return value is true.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.IActiveTaskDialog.SetExpandedInformation(System.String)">
            <summary>
            Updates the Expanded Information text.
            </summary>
            <param name="expandedInformation">The new value.</param>
            <returns>If the function succeeds the return value is true.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.IActiveTaskDialog.SetFooter(System.String)">
            <summary>
            Updates the Footer text.
            </summary>
            <param name="footer">The new value.</param>
            <returns>If the function succeeds the return value is true.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.IActiveTaskDialog.SetMainInstruction(System.String)">
            <summary>
            Updates the Main Instruction.
            </summary>
            <param name="mainInstruction">The new value.</param>
            <returns>If the function succeeds the return value is true.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.IActiveTaskDialog.UpdateMainIcon(Mygod.Windows.Dialogs.TaskDialogIcon)">
            <summary>
            Updates the main instruction icon. Note the type (standard via enum or
            custom via Icon type) must be used when upating the icon.
            </summary>
            <param name="icon">Task Dialog standard icon.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.IActiveTaskDialog.UpdateMainIcon(System.Drawing.Icon)">
            <summary>
            Updates the main instruction icon. Note the type (standard via enum or
            custom via Icon type) must be used when upating the icon.
            </summary>
            <param name="icon">The icon to set.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.IActiveTaskDialog.UpdateFooterIcon(Mygod.Windows.Dialogs.TaskDialogIcon)">
            <summary>
            Updates the footer icon. Note the type (standard via enum or
            custom via Icon type) must be used when upating the icon.
            </summary>
            <param name="icon">Task Dialog standard icon.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.IActiveTaskDialog.UpdateFooterIcon(System.Drawing.Icon)">
            <summary>
            Updates the footer icon. Note the type (standard via enum or
            custom via Icon type) must be used when upating the icon.
            </summary>
            <param name="icon">The icon to set.</param>
        </member>
        <member name="T:Mygod.Windows.Dialogs.TaskDialogViewModel">
            <summary>
            Provides commands and properties to the emulated TaskDialog view.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialogViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.TaskDialogViewModel"/> class.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialogViewModel.#ctor(Mygod.Windows.Dialogs.TaskDialogOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.TaskDialogViewModel"/> class.
            </summary>
            <param name="options">Options to use.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialogViewModel.ShouldCancelClosing">
            <summary>
            Returns a value indicating whether or not the dialog should cancel a closing event.
            </summary>
            <returns><c>true</c> if dialog closing should be canceled; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialogViewModel.NotifyConstructed">
            <summary>
            Notifies any callback handlers that the dialog has been constructed but not yet shown.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialogViewModel.NotifyCreated">
            <summary>
            Notifies any callback handlers that the dialog has been created but not yet shown.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialogViewModel.NotifyShown">
            <summary>
            Notifies any callback handlers periodically if a callback timer has been set.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialogViewModel.NotifyClosed">
            <summary>
            Notifies any callback handlers that the dialog is destroyed.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialogViewModel.RaisePropertyChangedEvent(System.String)">
            <summary>
            Raises the <see cref="E:PropertyChanged"/> event for the given property.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialogViewModel.RaiseRequestCloseEvent">
            <summary>
            Raises the <see cref="E:RequestClose"/> event.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialogViewModel.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialogViewModel.OnRequestClose(System.EventArgs)">
            <summary>
            Raises the <see cref="E:RequestClose"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.TaskDialogViewModel.OnCallback(Mygod.Windows.Dialogs.VistaTaskDialogNotificationArgs)">
            <summary>
            Raises a callback.
            </summary>
            <param name="e">The <see cref="T:Mygod.Windows.Dialogs.VistaTaskDialogNotificationArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.StartPosition">
            <summary>
            Gets the window start position.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.Title">
            <summary>
            Gets the window caption.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.MainInstruction">
            <summary>
            Gets the principal text for the dialog.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.Content">
            <summary>
            Gets the supplemental text for the dialog.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.ContentExpandedInfo">
            <summary>
            Gets the expanded info text for the dialog's content area.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.FooterExpandedInfo">
            <summary>
            Gets the expanded info text for the dialog's footer area.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.HasExpandedInfo">
            <summary>
            Gets a value indicating whether or not any expanded info text has
            been set.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.ExpandedInfoVisible">
            <summary>
            Gets or sets a value indicating whether expanded info is visible.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.ContentExpandedInfoVisible">
            <summary>
            Gets or sets a value indicating whether content area expanded info is visible.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.FooterExpandedInfoVisible">
            <summary>
            Gets or sets a value indicating whether footer area expanded info is visible.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.VerificationText">
            <summary>
            Gets the verification text.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.VerificationChecked">
            <summary>
            Gets or sets whether the verification checkbox was checked.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.FooterText">
            <summary>
            Gets the footer text.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.MainIconType">
            <summary>
            Gets the type of the main icon.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.MainIcon">
            <summary>
            Gets the main icon.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.FooterIcon">
            <summary>
            Gets the footer icon.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.DefaultButtonIndex">
            <summary>
            Gets the default button index.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.AllowDialogCancellation">
            <summary>
            Gets a value indicating whether or not Alt-F4, Esc, and the red X
            close button should work.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.ShowProgressBar">
            <summary>
            Gets a value indicating whether to show a progress bar.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.ProgressBarIndeterminate">
            <summary>
            Gets a value indicating whether to show an indeterminate progress bar or a regular one.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.ProgressBarMinimum">
            <summary>
            Gets or sets the progress bar's minimum value.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.ProgressBarMaximum">
            <summary>
            Gets or sets the progress bar's maximum value.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.ProgressBarValue">
            <summary>
            Gets or sets the progress bar's current value.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.NormalButtons">
            <summary>
            Gets the button labels.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.CommandLinks">
            <summary>
            Gets the command link labels.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.RadioButtons">
            <summary>
            Gets the radio button labels.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.DialogResult">
            <summary>
            Gets the value of the button or command that was ultimately chosen.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.RadioResult">
            <summary>
            Gets the value of the chosen radio option.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.NormalButtonCommand">
            <summary>
            Gets the command associated with custom and common buttons.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.CommandLinkCommand">
            <summary>
            Gets the command associated with command links.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.RadioButtonCommand">
            <summary>
            Gets the command associated with radio buttons.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.TaskDialogViewModel.HyperlinkCommand">
            <summary>
            Gets the command associated with hyperlinks.
            </summary>
        </member>
        <member name="E:Mygod.Windows.Dialogs.TaskDialogViewModel.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:Mygod.Windows.Dialogs.TaskDialogViewModel.RequestClose">
            <summary>
            Occurs when a close call should be performed.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.UnsafeNativeMethods">
            <summary>
            Class to hold native code interop declarations.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.WM_USER">
            <summary>
            WM_USER taken from WinUser.h
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.UnsafeNativeMethods.TaskDialogIndirect(Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG@,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            TaskDialogIndirect taken from commctl.h
            </summary>
            <param name="pTaskConfig">All the parameters about the Task Dialog to Show.</param>
            <param name="pnButton">The push button pressed.</param>
            <param name="pnRadioButton">The radio button that was selected.</param>
            <param name="pfVerificationFlagChecked">The state of the verification checkbox on dismiss of the Task Dialog.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.UnsafeNativeMethods.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Win32 SendMessage.
            </summary>
            <param name="hWnd">Window handle to send to.</param>
            <param name="Msg">The windows message to send.</param>
            <param name="wParam">Specifies additional message-specific information.</param>
            <param name="lParam">Specifies additional message-specific information.</param>
            <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.UnsafeNativeMethods.SendMessageWithString(System.IntPtr,System.UInt32,System.IntPtr,System.String)">
            <summary>
            Win32 SendMessage.
            </summary>
            <param name="hWnd">Window handle to send to.</param>
            <param name="Msg">The windows message to send.</param>
            <param name="wParam">Specifies additional message-specific information.</param>
            <param name="lParam">Specifies additional message-specific information as a string.</param>
            <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.UnsafeNativeMethods.SetWindowText(System.IntPtr,System.String)">
            <summary>
            Changes the text of the specified window's title bar (if it has one).
            </summary>
            <param name="hwnd">A handle to the window or control whose text is to be changed.</param>
            <param name="lpString">The new title or control text. </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            To get extended error information, call GetLastError. 
            </returns>
        </member>
        <member name="T:Mygod.Windows.Dialogs.UnsafeNativeMethods.VistaTaskDialogCallback">
            <summary>
            The signature of the callback that receives messages from the Task Dialog when various events occur.
            </summary>
            <param name="hwnd">The window handle of the </param>
            <param name="msg">The message being passed.</param>
            <param name="wParam">wParam which is interpreted differently depending on the message.</param>
            <param name="lParam">wParam which is interpreted differently depending on the message.</param>
            <param name="refData">The refrence data that was set to TaskDialog.CallbackData.</param>
            <returns>A HRESULT value. The return value is specific to the message being processed. </returns>
        </member>
        <member name="T:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_FLAGS">
            <summary>
            TASKDIALOG_FLAGS taken from CommCtrl.h.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_ENABLE_HYPERLINKS">
            <summary>
            Enable hyperlinks.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_USE_HICON_MAIN">
            <summary>
            Use icon handle for main icon.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_USE_HICON_FOOTER">
            <summary>
            Use icon handle for footer icon.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_ALLOW_DIALOG_CANCELLATION">
            <summary>
            Allow dialog to be cancelled, even if there is no cancel button.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_USE_COMMAND_LINKS">
            <summary>
            Use command links rather than buttons.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_USE_COMMAND_LINKS_NO_ICON">
            <summary>
            Use command links with no icons rather than buttons.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_EXPAND_FOOTER_AREA">
            <summary>
            Show expanded info in the footer area.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_EXPANDED_BY_DEFAULT">
            <summary>
            Expand by default.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_VERIFICATION_FLAG_CHECKED">
            <summary>
            Start with verification flag already checked.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_SHOW_PROGRESS_BAR">
            <summary>
            Show a progress bar.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_SHOW_MARQUEE_PROGRESS_BAR">
            <summary>
            Show a marquee progress bar.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_CALLBACK_TIMER">
            <summary>
            Callback every 200 milliseconds.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_POSITION_RELATIVE_TO_WINDOW">
            <summary>
            Center the dialog on the owner window rather than the monitor.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_RTL_LAYOUT">
            <summary>
            Right to Left Layout.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_NO_DEFAULT_RADIO_BUTTON">
            <summary>
            No default radio button.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_CAN_BE_MINIMIZED">
            <summary>
            Task Dialog can be minimized.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_ELEMENTS">
            <summary>
            TASKDIALOG_ELEMENTS taken from CommCtrl.h
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_ELEMENTS.TDE_CONTENT">
            <summary>
            The content element.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_ELEMENTS.TDE_EXPANDED_INFORMATION">
            <summary>
            Expanded Information.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_ELEMENTS.TDE_FOOTER">
            <summary>
            Footer.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_ELEMENTS.TDE_MAIN_INSTRUCTION">
            <summary>
            Main Instructions
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_ICON_ELEMENTS">
            <summary>
            TASKDIALOG_ICON_ELEMENTS taken from CommCtrl.h
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_ICON_ELEMENTS.TDIE_ICON_MAIN">
            <summary>
            Main instruction icon.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_ICON_ELEMENTS.TDIE_ICON_FOOTER">
            <summary>
            Footer icon.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_MESSAGES">
            <summary>
            TASKDIALOG_MESSAGES taken from CommCtrl.h.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_CLICK_BUTTON">
            <summary>
            Click button.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_SET_MARQUEE_PROGRESS_BAR">
            <summary>
            Set Progress bar to be marquee mode.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_SET_PROGRESS_BAR_STATE">
            <summary>
            Set Progress bar state.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_SET_PROGRESS_BAR_RANGE">
            <summary>
            Set progress bar range.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_SET_PROGRESS_BAR_POS">
            <summary>
            Set progress bar position.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_SET_PROGRESS_BAR_MARQUEE">
            <summary>
            Set progress bar marquee (animation).
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_SET_ELEMENT_TEXT">
            <summary>
            Set a text element of the Task Dialog.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_CLICK_RADIO_BUTTON">
            <summary>
            Click a radio button.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_ENABLE_BUTTON">
            <summary>
            Enable or disable a button.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_ENABLE_RADIO_BUTTON">
            <summary>
            Enable or disable a radio button.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_CLICK_VERIFICATION">
            <summary>
            Check or uncheck the verfication checkbox.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_UPDATE_ELEMENT_TEXT">
            <summary>
            Update the text of an element (no effect if origially set as null).
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_SET_BUTTON_ELEVATION_REQUIRED_STATE">
            <summary>
            Designate whether a given Task Dialog button or command link should have a User Account Control (UAC) shield icon.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_UPDATE_ICON">
            <summary>
            Refreshes the icon of the task dialog.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_NOTIFICATIONS">
            <summary>
            TASKDIALOG_NOTIFICATIONS taken from commctrl.h.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_CREATED">
            <summary>
            Indicates that the Task Dialog has been created.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_NAVIGATED">
            <summary>
            Indicates that navigation has occurred.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_BUTTON_CLICKED">
            <summary>
            Indicates that a button has been selected. The command ID of
            the button is specified by wParam.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_HYPERLINK_CLICKED">
            <summary>
            Indicates that a hyperlink has been selected. A pointer to the
            link text is specified by lParam.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_TIMER">
            <summary>
            Indicates that the Task Dialog timer has fired. The total
            elapsed time is specified by wParam. You can update the
            progress bar by sending a TDM_SET_PROGRESS_BAR_POS message to
            the window specified by the hwnd parameter.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_DESTROYED">
            <summary>
            Indicates that the Task Dialog has been destroyed.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_RADIO_BUTTON_CLICKED">
            <summary>
            Indicates that a radio button has been selected. The command
            ID of the radio button is specified by wParam.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_DIALOG_CONSTRUCTED">
            <summary>
            Indicates that the Task Dialog has been created but has not
            been displayed yet.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_VERIFICATION_CLICKED">
            <summary>
            Indicates that the Task Dialog verification check box has been
            selected.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_HELP">
            <summary>
            Indicates that the F1 key has been pressed while the Task
            Dialog has focus.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_EXPANDO_BUTTON_CLICKED">
            <summary>
            Indicates that the exando button has been selected.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG">
            <summary>
            TASKDIALOGCONFIG taken from commctl.h.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.cbSize">
            <summary>
            Size of the structure in bytes.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.hwndParent">
            <summary>
            Parent window handle.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.hInstance">
            <summary>
            Module instance handle for resources.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.dwFlags">
            <summary>
            Flags.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.dwCommonButtons">
            <summary>
            Bit flags for commonly used buttons.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.pszWindowTitle">
            <summary>
            Window title.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.MainIcon">
            <summary>
            The Main icon. Overloaded member. Can be string, a handle, a special value or a resource ID.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.pszMainInstruction">
            <summary>
            Main Instruction.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.pszContent">
            <summary>
            Content.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.cButtons">
            <summary>
            Count of custom Buttons.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.pButtons">
            <summary>
            Array of custom buttons.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.nDefaultButton">
            <summary>
            ID of default button.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.cRadioButtons">
            <summary>
            Count of radio Buttons.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.pRadioButtons">
            <summary>
            Array of radio buttons.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.nDefaultRadioButton">
            <summary>
            ID of default radio button.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.pszVerificationText">
            <summary>
            Text for verification check box. often "Don't ask be again".
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.pszExpandedInformation">
            <summary>
            Expanded Information.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.pszExpandedControlText">
            <summary>
            Text for expanded control.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.pszCollapsedControlText">
            <summary>
            Text for expanded control.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.FooterIcon">
            <summary>
            Icon for the footer. An overloaded member link MainIcon.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.pszFooter">
            <summary>
            Footer Text.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.pfCallback">
            <summary>
            Function pointer for callback.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.lpCallbackData">
            <summary>
            Data that will be passed to the call back.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.UnsafeNativeMethods.TASKDIALOGCONFIG.cxWidth">
            <summary>
            Width of the Task Dialog's area in DLU's.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.ActiveTaskDialog">
            <summary>
            The active Task Dialog window. Provides several methods for acting on the active TaskDialog.
            You should not use this object after the TaskDialog Destroy notification callback. Doing so
            will result in undefined behavior and likely crash.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.ActiveTaskDialog.handle">
            <summary>
            The Task Dialog's window handle.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.#ctor(System.IntPtr)">
            <summary>
            Creates a ActiveTaskDialog.
            </summary>
            <param name="handle">The Task Dialog's window handle.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.ClickButton(System.Int32)">
            <summary>
            Simulate the action of a button click in the TaskDialog. This can be a DialogResult value 
            or the ButtonID set on a TasDialogButton set on TaskDialog.Buttons.
            </summary>
            <param name="buttonId">Indicates the button ID to be selected.</param>
            <returns>If the function succeeds the return value is true.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.SetMarqueeProgressBar(System.Boolean)">
            <summary>
            Used to indicate whether the hosted progress bar should be displayed in marquee mode or not.
            </summary>
            <param name="marquee">Specifies whether the progress bar sbould be shown in Marquee mode.
            A value of true turns on Marquee mode.</param>
            <returns>If the function succeeds the return value is true.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.SetProgressBarState(Mygod.Windows.Dialogs.VistaProgressBarState)">
            <summary>
            Sets the state of the progress bar.
            </summary>
            <param name="newState">The state to set the progress bar.</param>
            <returns>If the function succeeds the return value is true.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.SetProgressBarRange(System.Int16,System.Int16)">
            <summary>
            Set the minimum and maximum values for the hosted progress bar.
            </summary>
            <param name="minRange">Minimum range value. By default, the minimum value is zero.</param>
            <param name="maxRange">Maximum range value.  By default, the maximum value is 100.</param>
            <returns>If the function succeeds the return value is true.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.SetProgressBarPosition(System.Int32)">
            <summary>
            Set the current position for a progress bar.
            </summary>
            <param name="newPosition">The new position.</param>
            <returns>Returns the previous value if successful, or zero otherwise.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.SetProgressBarMarquee(System.Boolean,System.UInt32)">
            <summary>
            Sets the animation state of the Marquee Progress Bar.
            </summary>
            <param name="startMarquee">true starts the marquee animation and false stops it.</param>
            <param name="speed">The time in milliseconds between refreshes.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.SetWindowTitle(System.String)">
            <summary>
            Updates the window title text.
            </summary>
            <param name="title">The new value.</param>
            <returns>If the function succeeds the return value is true.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.SetContent(System.String)">
            <summary>
            Updates the content text.
            </summary>
            <param name="content">The new value.</param>
            <returns>If the function succeeds the return value is true.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.SetExpandedInformation(System.String)">
            <summary>
            Updates the Expanded Information text.
            </summary>
            <param name="expandedInformation">The new value.</param>
            <returns>If the function succeeds the return value is true.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.SetFooter(System.String)">
            <summary>
            Updates the Footer text.
            </summary>
            <param name="footer">The new value.</param>
            <returns>If the function succeeds the return value is true.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.SetMainInstruction(System.String)">
            <summary>
            Updates the Main Instruction.
            </summary>
            <param name="mainInstruction">The new value.</param>
            <returns>If the function succeeds the return value is true.</returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.ClickRadioButton(System.Int32)">
            <summary>
            Simulate the action of a radio button click in the TaskDialog. 
            The passed buttonID is the ButtonID set on a TaskDialogButton set on TaskDialog.RadioButtons.
            </summary>
            <param name="buttonId">Indicates the button ID to be selected.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.EnableButton(System.Int32,System.Boolean)">
            <summary>
            Enable or disable a button in the TaskDialog. 
            The passed buttonID is the ButtonID set on a TaskDialogButton set on TaskDialog.Buttons
            or a common button ID.
            </summary>
            <param name="buttonId">Indicates the button ID to be enabled or diabled.</param>
            <param name="enable">Enambe the button if true. Disable the button if false.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.EnableRadioButton(System.Int32,System.Boolean)">
            <summary>
            Enable or disable a radio button in the TaskDialog. 
            The passed buttonID is the ButtonID set on a TaskDialogButton set on TaskDialog.RadioButtons.
            </summary>
            <param name="buttonId">Indicates the button ID to be enabled or diabled.</param>
            <param name="enable">Enambe the button if true. Disable the button if false.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.ClickVerification(System.Boolean,System.Boolean)">
            <summary>
            Check or uncheck the verification checkbox in the TaskDialog. 
            </summary>
            <param name="checkedState">The checked state to set the verification checkbox.</param>
            <param name="setKeyboardFocusToCheckBox">True to set the keyboard focus to the checkbox, and fasle otherwise.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.UpdateContent(System.String)">
            <summary>
            Updates the content text.
            </summary>
            <param name="content">The new value.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.UpdateExpandedInformation(System.String)">
            <summary>
            Updates the Expanded Information text. No effect if it was previously set to null.
            </summary>
            <param name="expandedInformation">The new value.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.UpdateFooter(System.String)">
            <summary>
            Updates the Footer text. No Effect if it was perviously set to null.
            </summary>
            <param name="footer">The new value.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.UpdateMainInstruction(System.String)">
            <summary>
            Updates the Main Instruction.
            </summary>
            <param name="mainInstruction">The new value.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.SetButtonElevationRequiredState(System.Int32,System.Boolean)">
            <summary>
            Designate whether a given Task Dialog button or command link should have a User Account Control (UAC) shield icon.
            </summary>
            <param name="buttonId">ID of the push button or command link to be updated.</param>
            <param name="elevationRequired">False to designate that the action invoked by the button does not require elevation;
            true to designate that the action does require elevation.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.UpdateMainIcon(Mygod.Windows.Dialogs.TaskDialogIcon)">
            <summary>
            Updates the main instruction icon. Note the type (standard via enum or
            custom via Icon type) must be used when upating the icon.
            </summary>
            <param name="icon">Task Dialog standard icon.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.UpdateMainIcon(System.Drawing.Icon)">
            <summary>
            Updates the main instruction icon. Note the type (standard via enum or
            custom via Icon type) must be used when upating the icon.
            </summary>
            <param name="icon">The icon to set.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.UpdateFooterIcon(Mygod.Windows.Dialogs.TaskDialogIcon)">
            <summary>
            Updates the footer icon. Note the type (standard via enum or
            custom via Icon type) must be used when upating the icon.
            </summary>
            <param name="icon">Task Dialog standard icon.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ActiveTaskDialog.UpdateFooterIcon(System.Drawing.Icon)">
            <summary>
            Updates the footer icon. Note the type (standard via enum or
            custom via Icon type) must be used when upating the icon.
            </summary>
            <param name="icon">The icon to set.</param>
        </member>
        <member name="P:Mygod.Windows.Dialogs.ActiveTaskDialog.Handle">
            <summary>
            The Task Dialog's window handle.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Controls.BindingEvaluator`1">
            <summary>
            A framework element that permits a binding to be evaluated in a new data
            context leaf node.
            </summary>
            <typeparam name="T">The type of dynamic binding to return.</typeparam>
        </member>
        <member name="F:Mygod.Windows.Controls.BindingEvaluator`1._binding">
            <summary>
            Gets or sets the string value binding used by the control.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.BindingEvaluator`1.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.BindingEvaluator`1.#ctor">
            <summary>
            Initializes a new instance of the BindingEvaluator class.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.BindingEvaluator`1.#ctor(System.Windows.Data.Binding)">
            <summary>
            Initializes a new instance of the BindingEvaluator class,
            setting the initial binding to the provided parameter.
            </summary>
            <param name="binding">The initial string value binding.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.BindingEvaluator`1.ClearDataContext">
            <summary>
            Clears the data context so that the control does not keep a
            reference to the last-looked up item.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.BindingEvaluator`1.GetDynamicValue(System.Object,System.Boolean)">
            <summary>
            Updates the data context of the framework element and returns the 
            updated binding value.
            </summary>
            <param name="o">The object to use as the data context.</param>
            <param name="clearDataContext">If set to true, this parameter will
            clear the data context immediately after retrieving the value.</param>
            <returns>Returns the evaluated T value of the bound dependency
            property.</returns>
        </member>
        <member name="M:Mygod.Windows.Controls.BindingEvaluator`1.GetDynamicValue(System.Object)">
            <summary>
            Updates the data context of the framework element and returns the 
            updated binding value.
            </summary>
            <param name="o">The object to use as the data context.</param>
            <returns>Returns the evaluated T value of the bound dependency
            property.</returns>
        </member>
        <member name="P:Mygod.Windows.Controls.BindingEvaluator`1.Value">
            <summary>
            Gets or sets the data item string value.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.BindingEvaluator`1.ValueBinding">
            <summary>
            Gets or sets the value binding.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Controls.InteractionHelper">
            <summary>
            The InteractionHelper provides controls with support for all of the
            common interactions like mouse movement, mouse clicks, key presses,
            etc., and also incorporates proper event semantics when the control is
            disabled.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.InteractionHelper.SequentialClickThresholdInMilliseconds">
            <summary>
            The threshold used to determine whether two clicks are temporally
            local and considered a double click (or triple, quadruple, etc.).
            500 milliseconds is the default double click value on Windows.
            This value would ideally be pulled form the system settings.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.InteractionHelper.SequentialClickThresholdInPixelsSquared">
            <summary>
            The threshold used to determine whether two clicks are spatially
            local and considered a double click (or triple, quadruple, etc.)
            in pixels squared.  We use pixels squared so that we can compare to
            the distance delta without taking a square root.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.InteractionHelper._updateVisualState">
            <summary>
            Reference used to call UpdateVisualState on the base class.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.InteractionHelper.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the InteractionHelper class.
            </summary>
            <param name="control">Control receiving interaction.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.InteractionHelper.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
            <remarks>
            UpdateVisualState works differently than the rest of the injected
            functionality.  Most of the other events are overridden by the
            calling class which calls Allow, does what it wants, and then calls
            Base.  UpdateVisualState is the opposite because a number of the
            methods in InteractionHelper need to trigger it in the calling
            class.  We do this using the IUpdateVisualState internal interface.
            </remarks>
        </member>
        <member name="M:Mygod.Windows.Controls.InteractionHelper.UpdateVisualStateBase(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:Mygod.Windows.Controls.InteractionHelper.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the control's Loaded event.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.InteractionHelper.OnIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle changes to the control's IsEnabled property.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.InteractionHelper.OnIsReadOnlyChanged(System.Boolean)">
            <summary>
            Handles changes to the control's IsReadOnly property.
            </summary>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.InteractionHelper.OnApplyTemplateBase">
            <summary>
            Update the visual state of the control when its template is changed.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.InteractionHelper.AllowGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's GotFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Mygod.Windows.Controls.InteractionHelper.OnGotFocusBase">
            <summary>
            Base implementation of the virtual GotFocus event handler.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.InteractionHelper.AllowLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's LostFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Mygod.Windows.Controls.InteractionHelper.OnLostFocusBase">
            <summary>
            Base implementation of the virtual LostFocus event handler.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.InteractionHelper.AllowMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseEnter event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Mygod.Windows.Controls.InteractionHelper.OnMouseEnterBase">
            <summary>
            Base implementation of the virtual MouseEnter event handler.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.InteractionHelper.AllowMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseLeave event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Mygod.Windows.Controls.InteractionHelper.OnMouseLeaveBase">
            <summary>
            Base implementation of the virtual MouseLeave event handler.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.InteractionHelper.AllowMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Mygod.Windows.Controls.InteractionHelper.OnMouseLeftButtonDownBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonDown event
            handler.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.InteractionHelper.AllowMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Mygod.Windows.Controls.InteractionHelper.OnMouseLeftButtonUpBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonUp event handler.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.InteractionHelper.AllowKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Mygod.Windows.Controls.InteractionHelper.AllowKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="P:Mygod.Windows.Controls.InteractionHelper.Control">
            <summary>
            Gets the control the InteractionHelper is targeting.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.InteractionHelper.IsFocused">
            <summary>
            Gets a value indicating whether the control has focus.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.InteractionHelper.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse is over the control.
            </summary> 
        </member>
        <member name="P:Mygod.Windows.Controls.InteractionHelper.IsReadOnly">
            <summary>
            Gets a value indicating whether the read-only property is set.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.InteractionHelper.IsPressed">
            <summary>
            Gets a value indicating whether the mouse button is pressed down
            over the control.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.InteractionHelper.LastClickTime">
            <summary>
            Gets or sets the last time the control was clicked.
            </summary>
            <remarks>
            The value is stored as Utc time because it is slightly more
            performant than converting to local time.
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Controls.InteractionHelper.LastClickPosition">
            <summary>
            Gets or sets the mouse position of the last click.
            </summary>
            <remarks>The value is relative to the control.</remarks>
        </member>
        <member name="P:Mygod.Windows.Controls.InteractionHelper.ClickCount">
            <summary>
            Gets the number of times the control was clicked.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Controls.IUpdateVisualState">
            <summary>
            The IUpdateVisualState interface is used to provide the
            InteractionHelper with access to the type's UpdateVisualState method.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.IUpdateVisualState.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="T:Mygod.Windows.Controls.VisualStates">
            <summary>
            Names and helpers for visual states in the controls.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.GroupCommon">
            <summary>
            Common state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateNormal">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateReadOnly">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateMouseOver">
            <summary>
            MouseOver state of the Common state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StatePressed">
            <summary>
            Pressed state of the Common state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateDisabled">
            <summary>
            Disabled state of the Common state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.GroupFocus">
            <summary>
            Focus state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateUnfocused">
            <summary>
            Unfocused state of the Focus state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateFocused">
            <summary>
            Focused state of the Focus state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.GroupSelection">
            <summary>
            Selection state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateSelected">
            <summary>
            Selected state of the Selection state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateUnselected">
            <summary>
            Unselected state of the Selection state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateSelectedInactive">
            <summary>
            Selected inactive state of the Selection state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.GroupExpansion">
            <summary>
            Expansion state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateExpanded">
            <summary>
            Expanded state of the Expansion state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateCollapsed">
            <summary>
            Collapsed state of the Expansion state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.GroupPopup">
            <summary>
            Popup state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StatePopupOpened">
            <summary>
            Opened state of the Popup state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StatePopupClosed">
            <summary>
            Closed state of the Popup state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.GroupValidation">
            <summary>
            ValidationStates state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateValid">
            <summary>
            The valid state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateInvalidFocused">
            <summary>
            Invalid, focused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateInvalidUnfocused">
            <summary>
            Invalid, unfocused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.GroupExpandDirection">
            <summary>
            ExpandDirection state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateExpandDown">
            <summary>
            Down expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateExpandUp">
            <summary>
            Up expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateExpandLeft">
            <summary>
            Left expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateExpandRight">
            <summary>
            Right expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.GroupHasItems">
            <summary>
            HasItems state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateHasItems">
            <summary>
            HasItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateNoItems">
            <summary>
            NoItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.GroupIncrease">
            <summary>
            Increment state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateIncreaseEnabled">
            <summary>
            State enabled for increment group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateIncreaseDisabled">
            <summary>
            State disabled for increment group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.GroupDecrease">
            <summary>
            Decrement state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateDecreaseEnabled">
            <summary>
            State enabled for decrement group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateDecreaseDisabled">
            <summary>
            State disabled for decrement group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.GroupInteractionMode">
            <summary>
            InteractionMode state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateEdit">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateDisplay">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.GroupLocked">
            <summary>
            DisplayMode state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateLocked">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateUnlocked">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateActive">
            <summary>
            Active state.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateInactive">
            <summary>
            Inactive state.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.GroupActive">
            <summary>
            Active state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateUnwatermarked">
            <summary>
            Non-watermarked state.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateWatermarked">
            <summary>
            Watermarked state.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.GroupWatermark">
            <summary>
            Watermark state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateCalendarButtonUnfocused">
            <summary>
            Unfocused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateCalendarButtonFocused">
            <summary>
            Focused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.GroupCalendarButtonFocus">
            <summary>
            CalendarButtons Focus state group.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateBusy">
            <summary>
            Busy state for BusyIndicator.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateIdle">
            <summary>
            Idle state for BusyIndicator.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.GroupBusyStatus">
            <summary>
            Busyness group name.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateVisible">
            <summary>
            Visible state name for BusyIndicator.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.StateHidden">
            <summary>
            Hidden state name for BusyIndicator.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.VisualStates.GroupVisibility">
            <summary>
            BusyDisplay group.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.VisualStates.GoToState(System.Windows.Controls.Control,System.Boolean,System.String[])">
            <summary>
            Use VisualStateManager to change the visual state of the control.
            </summary>
            <param name="control">
            Control whose visual state is being changed.
            </param>
            <param name="useTransitions">
            A value indicating whether to use transitions when updating the
            visual state, or to snap directly to the new visual state.
            </param>
            <param name="stateNames">
            Ordered list of state names and fallback states to transition into.
            Only the first state to be found will be used.
            </param>
        </member>
        <member name="M:Mygod.Windows.Controls.VisualStates.GetImplementationRoot(System.Windows.DependencyObject)">
            <summary>
            Gets the implementation root of the Control.
            </summary>
            <param name="dependencyObject">The DependencyObject.</param>
            <remarks>
            Implements Silverlight's corresponding internal property on Control.
            </remarks>
            <returns>Returns the implementation root or null.</returns>
        </member>
        <member name="M:Mygod.Windows.Controls.VisualStates.TryGetVisualStateGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            This method tries to get the named VisualStateGroup for the 
            dependency object. The provided object's ImplementationRoot will be 
            looked up in this call.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="groupName">The visual state group's name.</param>
            <returns>Returns null or the VisualStateGroup object.</returns>
        </member>
        <member name="T:Mygod.Windows.Controls.WeakEventListener`3">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of instance listening for the event.</typeparam>
            <typeparam name="TSource">Type of source for the event.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments for the event.</typeparam>
        </member>
        <member name="F:Mygod.Windows.Controls.WeakEventListener`3._weakInstance">
            <summary>
            WeakReference to the instance listening for the event.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.WeakEventListener`3.#ctor(`0)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="instance">Instance subscribing to the event.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.WeakEventListener`3.OnEvent(`1,`2)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.WeakEventListener`3.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.WeakEventListener`3.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.WeakEventListener`3.OnDetachAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Controls.AutoCompleteBox">
            <summary>
            Represents a control that provides a text box for user input and a
            drop-down that contains possible matches based on the input in the text
            box.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.ElementSelectionAdapter">
            <summary>
            Specifies the name of the selection adapter TemplatePart.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.ElementSelector">
            <summary>
            Specifies the name of the Selector TemplatePart.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.ElementPopup">
            <summary>
            Specifies the name of the Popup TemplatePart.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.ElementTextBox">
            <summary>
            The name for the text box part.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.ElementTextBoxStyle">
            <summary>
            The name for the text box style.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.ElementItemContainerStyle">
            <summary>
            The name for the adapter's item container style.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox._items">
            <summary>
            Gets or sets a local cached copy of the items data.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox._view">
            <summary>
            Gets or sets the observable collection that contains references to 
            all of the items in the generated view of data that is provided to 
            the selection-style control adapter.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox._ignoreTextPropertyChange">
            <summary>
            Gets or sets a value to ignore a number of pending change handlers. 
            The value is decremented after each use. This is used to reset the 
            value of properties without performing any of the actions in their 
            change handlers.
            </summary>
            <remarks>The int is important as a value because the TextBox 
            TextChanged event does not immediately fire, and this will allow for
            nested property changes to be ignored.</remarks>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox._ignorePropertyChange">
            <summary>
            Gets or sets a value indicating whether to ignore calling a pending 
            change handlers. 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox._ignoreTextSelectionChange">
            <summary>
            Gets or sets a value indicating whether to ignore the selection 
            changed event.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox._skipSelectedItemTextUpdate">
            <summary>
            Gets or sets a value indicating whether to skip the text update 
            processing when the selected item is updated.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox._textSelectionStart">
            <summary>
            Gets or sets the last observed text box selection start location.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox._userCalledPopulate">
            <summary>
            Gets or sets a value indicating whether the user initiated the 
            current populate call.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox._popupHasOpened">
            <summary>
            A value indicating whether the popup has been opened at least once.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox._delayTimer">
            <summary>
            Gets or sets the DispatcherTimer used for the MinimumPopulateDelay 
            condition for auto completion.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox._allowWrite">
            <summary>
            Gets or sets a value indicating whether a read-only dependency 
            property change handler should allow the value to be set.  This is 
            used to ensure that read-only properties cannot be changed via 
            SetValue, etc.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox._valueBindingEvaluator">
            <summary>
            Gets or sets the BindingEvaluator, a framework element that can
            provide updated string values from a single binding.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox._collectionChangedWeakEventListener">
            <summary>
            A weak event listener for the collection changed event.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.MinimumPrefixLengthProperty">
            <summary>
            Identifies the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.MinimumPrefixLength" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.MinimumPrefixLength" />
            dependency property.</value>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnMinimumPrefixLengthPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumPrefixLengthProperty property changed handler.
            </summary>
            <param name="d">AutoCompleteBox that changed its MinimumPrefixLength.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.MinimumPopulateDelayProperty">
            <summary>
            Identifies the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.MinimumPopulateDelay" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.MinimumPopulateDelay" />
            dependency property.</value>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnMinimumPopulateDelayPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumPopulateDelayProperty property changed handler. Any current 
            dispatcher timer will be stopped. The timer will not be restarted 
            until the next TextUpdate call by the user.
            </summary>
            <param name="d">AutoCompleteTextBox that changed its 
            MinimumPopulateDelay.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.IsTextCompletionEnabledProperty">
            <summary>
            Identifies the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.IsTextCompletionEnabled" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.IsTextCompletionEnabled" />
            dependency property.</value>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.ItemTemplateProperty">
            <summary>
            Identifies the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.ItemTemplate" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.ItemTemplate" />
            dependency property.</value>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.ItemContainerStyleProperty">
            <summary>
            Identifies the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.ItemContainerStyle" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.ItemContainerStyle" />
            dependency property.</value>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.TextBoxStyleProperty">
            <summary>
            Identifies the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.TextBoxStyle" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.TextBoxStyle" />
            dependency property.</value>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.MaxDropDownHeightProperty">
            <summary>
            Identifies the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.MaxDropDownHeight" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.MaxDropDownHeight" />
            dependency property.</value>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnMaxDropDownHeightPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaxDropDownHeightProperty property changed handler.
            </summary>
            <param name="d">AutoCompleteTextBox that changed its MaxDropDownHeight.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.IsDropDownOpenProperty">
            <summary>
            Identifies the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.IsDropDownOpen" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.IsDropDownOpen" />
            dependency property.</value>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnIsDropDownOpenPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsDropDownOpenProperty property changed handler.
            </summary>
            <param name="d">AutoCompleteTextBox that changed its IsDropDownOpen.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.ItemsSourceProperty">
            <summary>
            Identifies the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.ItemsSource" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.ItemsSource" />
            dependency property.</value>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnItemsSourcePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemsSourceProperty property changed handler.
            </summary>
            <param name="d">AutoCompleteBox that changed its ItemsSource.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.SelectedItemProperty">
            <summary>
            Identifies the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.SelectedItem" />
            dependency property.
            </summary>
            <value>The identifier the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.SelectedItem" />
            dependency property.</value>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnSelectedItemPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectedItemProperty property changed handler. Fires the 
            SelectionChanged event. The event data will contain any non-null
            removed items and non-null additions.
            </summary>
            <param name="d">AutoCompleteBox that changed its SelectedItem.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnSelectedItemChanged(System.Object)">
            <summary>
            Called when the selected item is changed, updates the text value
            that is displayed in the text box part.
            </summary>
            <param name="newItem">The new item.</param>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.TextProperty">
            <summary>
            Identifies the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.Text" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.Text" />
            dependency property.</value>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnTextPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TextProperty property changed handler.
            </summary>
            <param name="d">AutoCompleteBox that changed its Text.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.SearchTextProperty">
            <summary>
            Identifies the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.SearchText" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.SearchText" />
            dependency property.</value>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnSearchTextPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnSearchTextProperty property changed handler.
            </summary>
            <param name="d">AutoCompleteBox that changed its SearchText.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.FilterModeProperty">
            <summary>
            Gets the identifier for the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.FilterMode" />
            dependency property.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnFilterModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            FilterModeProperty property changed handler.
            </summary>
            <param name="d">AutoCompleteBox that changed its FilterMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.ItemFilterProperty">
            <summary>
            Identifies the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.ItemFilter" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.ItemFilter" />
            dependency property.</value>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnItemFilterPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemFilterProperty property changed handler.
            </summary>
            <param name="d">AutoCompleteBox that changed its ItemFilter.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.TextFilterProperty">
            <summary>
            Identifies the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.TextFilter" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.TextFilter" />
            dependency property.</value>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox._text">
            <summary>
            The TextBox template part.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox._adapter">
            <summary>
            The SelectionAdapter.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.TextChangedEvent">
            <summary>
            Occurs when the text in the text box portion of the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> changes.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.PopulatingEvent">
            <summary>
            Occurs when the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> is
            populating the drop-down with possible matches based on the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.Text" />
            property.
            </summary>
            <remarks>
            If the event is canceled, by setting the PopulatingEventArgs.Cancel 
            property to true, the AutoCompleteBox will not automatically 
            populate the selection adapter contained in the drop-down. 
            In this case, if you want possible matches to appear, you must 
            provide the logic for populating the selection adapter.
            </remarks>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.PopulatedEvent">
            <summary>
            Occurs when the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> has
            populated the drop-down with possible matches based on the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.Text" />
            property.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.DropDownOpeningEvent">
            <summary>
            Occurs when the value of the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.IsDropDownOpen" />
            property is changing from false to true.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.DropDownOpenedEvent">
            <summary>
            Occurs when the value of the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.IsDropDownOpen" />
            property has changed from false to true and the drop-down is open.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.DropDownClosingEvent">
            <summary>
            Occurs when the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.IsDropDownOpen" />
            property is changing from true to false.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.DropDownClosedEvent">
            <summary>
            Occurs when the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.IsDropDownOpen" />
            property was changed from true to false and the drop-down is open.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteBox.SelectionChangedEvent">
            <summary>
            Occurs when the selected item in the drop-down portion of the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> has
            changed.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.#cctor">
            <summary>
            Initializes the static members of the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> class.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> class.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges and sizes the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" />
            control and its contents.
            </summary>
            <param name="finalSize">The size allowed for the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> control.</param>
            <returns>The <paramref name="finalSize" />, unchanged.</returns>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnApplyTemplate">
            <summary>
            Builds the visual tree for the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> control
            when a new template is applied.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnDropDownPopupUpdateVisualStates(System.Object,System.EventArgs)">
            <summary>
            Allows the popup wrapper to fire visual state change events.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnDropDownFocusChanged(System.Object,System.EventArgs)">
            <summary>
            Allows the popup wrapper to fire the FocusChanged event.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.ClosingDropDown(System.Boolean)">
            <summary>
            Begin closing the drop-down.
            </summary>
            <param name="oldValue">The original value.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OpeningDropDown(System.Boolean)">
            <summary>
            Begin opening the drop down by firing cancelable events, opening the
            drop-down or reverting, depending on the event argument values.
            </summary>
            <param name="oldValue">The original value, if needed for a revert.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.RaiseExpandCollapseAutomationEvent(System.Boolean,System.Boolean)">
            <summary>
            Raise an expand/collapse event through the automation peer.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnTextBoxPreviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the PreviewKeyDown event on the TextBox for WPF. This method
            is not implemented for Silverlight.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.DropDownPopup_Closed(System.Object,System.EventArgs)">
            <summary>
            Connects to the DropDownPopup Closed event.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnCreateAutomationPeer">
            <summary>
            Creates an
            <see cref="T:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer" />
            </summary>
            <returns>A
            <see cref="T:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer" />
            for the <see cref="T:System.Windows.Controls.AutoCompleteBox" />
            object.</returns>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.FocusChanged(System.Boolean)">
            <summary>
            Handles the FocusChanged event.
            </summary>
            <param name="hasFocus">A value indicating whether the control 
            currently has the focus.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.HasFocus">
            <summary>
            Determines whether the text box or drop-down portion of the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> control has
            focus.
            </summary>
            <returns>true to indicate the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> has focus;
            otherwise, false.</returns>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.GotFocus" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles change of keyboard focus, which is treated differently than control focus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.LostFocus" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.ControlIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle the change of the IsEnabled property.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.GetSelectionAdapterPart">
            <summary>
            Returns the
            <see cref="T:System.Windows.Controls.ISelectionAdapter" /> part, if
            possible.
            </summary>
            <returns>
            A <see cref="T:System.Windows.Controls.ISelectionAdapter" /> object,
            if possible. Otherwise, null.
            </returns>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.PopulateDropDown(System.Object,System.EventArgs)">
            <summary>
            Handles the timer tick when using a populate delay.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnPopulating(Mygod.Windows.Controls.PopulatingEventArgs)">
            <summary>
            Raises the
            <see cref="E:Mygod.Windows.Controls.AutoCompleteBox.Populating" />
            event.
            </summary>
            <param name="e">A
            <see cref="T:System.Windows.Controls.PopulatingEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnPopulated(Mygod.Windows.Controls.PopulatedEventArgs)">
            <summary>
            Raises the
            <see cref="E:Mygod.Windows.Controls.AutoCompleteBox.Populated" />
            event.
            </summary>
            <param name="e">A
            <see cref="T:System.Windows.Controls.PopulatedEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Raises the
            <see cref="E:Mygod.Windows.Controls.AutoCompleteBox.SelectionChanged" />
            event.
            </summary>
            <param name="e">A
            <see cref="T:System.Windows.Controls.SelectionChangedEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnDropDownOpening(Mygod.Windows.Controls.RoutedPropertyChangingEventArgs{System.Boolean})">
            <summary>
            Raises the
            <see cref="E:Mygod.Windows.Controls.AutoCompleteBox.DropDownOpening" />
            event.
            </summary>
            <param name="e">A
            <see cref="T:System.Windows.Controls.RoutedPropertyChangingEventArgs`1" />
            that contains the event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnDropDownOpened(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises the
            <see cref="E:Mygod.Windows.Controls.AutoCompleteBox.DropDownOpened" />
            event.
            </summary>
            <param name="e">A
            <see cref="T:System.Windows.RoutedPropertyChangedEventArgs`1" />
            that contains the event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnDropDownClosing(Mygod.Windows.Controls.RoutedPropertyChangingEventArgs{System.Boolean})">
            <summary>
            Raises the
            <see cref="E:Mygod.Windows.Controls.AutoCompleteBox.DropDownClosing" />
            event.
            </summary>
            <param name="e">A
            <see cref="T:System.Windows.Controls.RoutedPropertyChangingEventArgs`1" />
            that contains the event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnDropDownClosed(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises the
            <see cref="E:Mygod.Windows.Controls.AutoCompleteBox.DropDownClosed" />
            event.
            </summary>
            <param name="e">A
            <see cref="T:System.Windows.RoutedPropertyChangedEventArgs`1" />
            which contains the event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.FormatValue(System.Object,System.Boolean)">
            <summary>
            Formats an Item for text comparisons based on Converter 
            and ConverterCulture properties.
            </summary>
            <param name="value">The object to format.</param>
            <param name="clearDataContext">A value indicating whether to clear
            the data context after the lookup is performed.</param>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.FormatValue(System.Object)">
            <summary>
            Converts the specified object to a string by using the
            <see cref="P:System.Windows.Data.Binding.Converter" /> and
            <see cref="P:System.Windows.Data.Binding.ConverterCulture" /> values
            of the binding object specified by the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.ValueMemberBinding" />
            property.
            </summary>
            <param name="value">The object to format as a string.</param>
            <returns>The string representation of the specified object.</returns>
            <remarks>
            Override this method to provide a custom string conversion.
            </remarks>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnTextChanged(System.Windows.RoutedEventArgs)">
            <summary>
            Raises the
            <see cref="E:Mygod.Windows.Controls.AutoCompleteBox.TextChanged" />
            event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnTextBoxTextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Handle the TextChanged event that is directly attached to the 
            TextBox part. This ensures that only user initiated actions will 
            result in an AutoCompleteBox suggestion and operation.
            </summary>
            <param name="sender">The source TextBox object.</param>
            <param name="e">The TextChanged event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnTextBoxSelectionChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            When selection changes, save the location of the selection start.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.UpdateTextValue(System.String)">
            <summary>
            Updates both the text box value and underlying text dependency 
            property value if and when they change. Automatically fires the 
            text changed events when there is a change.
            </summary>
            <param name="value">The new string value.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.UpdateTextValue(System.String,System.Nullable{System.Boolean})">
            <summary>
            Updates both the text box value and underlying text dependency 
            property value if and when they change. Automatically fires the 
            text changed events when there is a change.
            </summary>
            <param name="value">The new string value.</param>
            <param name="userInitiated">A nullable bool value indicating whether
            the action was user initiated. In a user initiated mode, the 
            underlying text dependency property is updated. In a non-user 
            interaction, the text box value is updated. When user initiated is 
            null, all values are updated.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.TextUpdated(System.String,System.Boolean)">
            <summary>
            Handle the update of the text for the control from any source, 
            including the TextBox part and the Text dependency property.
            </summary>
            <param name="newText">The new text.</param>
            <param name="userInitiated">A value indicating whether the update 
            is a user-initiated action. This should be a True value when the 
            TextUpdated method is called from a TextBox event handler.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.PopulateComplete">
            <summary>
            Notifies the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> that the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.ItemsSource" />
            property has been set and the data can be filtered to provide
            possible matches in the drop-down.
            </summary>
            <remarks>
            Call this method when you are providing custom population of 
            the drop-down portion of the AutoCompleteBox, to signal the control 
            that you are done with the population process. 
            Typically, you use PopulateComplete when the population process 
            is a long-running process and you want to cancel built-in filtering
             of the ItemsSource items. In this case, you can handle the 
            Populated event and set PopulatingEventArgs.Cancel to true. 
            When the long-running process has completed you call 
            PopulateComplete to indicate the drop-down is populated.
            </remarks>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.UpdateTextCompletion(System.Boolean)">
            <summary>
            Performs text completion, if enabled, and a lookup on the underlying
            item values for an exact match. Will update the SelectedItem value.
            </summary>
            <param name="userInitiated">A value indicating whether the operation
            was user initiated. Text completion will not be performed when not 
            directly initiated by the user.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.TryGetMatch(System.String,System.Collections.ObjectModel.ObservableCollection{System.Object},Mygod.Windows.Controls.AutoCompleteFilterPredicate{System.String})">
            <summary>
            Attempts to look through the view and locate the specific exact 
            text match.
            </summary>
            <param name="searchText">The search text.</param>
            <param name="view">The view reference.</param>
            <param name="predicate">The predicate to use for the partial or 
            exact match.</param>
            <returns>Returns the object or null.</returns>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.ClearView">
            <summary>
            A simple helper method to clear the view and ensure that a view 
            object is always present and not null.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.RefreshView">
            <summary>
            Walks through the items enumeration. Performance is not going to be 
            perfect with the current implementation.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Handle any change to the ItemsSource dependency property, update 
            the underlying ObservableCollection view, and set the selection 
            adapter's ItemsSource to the view if appropriate.
            </summary>
            <param name="oldValue">The old enumerable reference.</param>
            <param name="newValue">The new enumerable reference.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.ItemsSourceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Method that handles the ObservableCollection.CollectionChanged event for the ItemsSource property.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnAdapterSelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the SelectionChanged event of the selection adapter.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The selection changed event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnAdapterSelectionComplete(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Commit event on the selection adapter.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnAdapterSelectionCanceled(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Cancel event on the selection adapter.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnMaxDropDownHeightChanged(System.Double)">
            <summary>
            Handles MaxDropDownHeightChanged by re-arranging and updating the 
            popup arrangement.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OpenDropDown(System.Boolean,System.Boolean)">
            <summary>
            Private method that directly opens the popup, checks the expander 
            button, and then fires the Opened event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.CloseDropDown(System.Boolean,System.Boolean)">
            <summary>
            Private method that directly closes the popup, flips the Checked 
            value, and then fires the Closed event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.KeyDown" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Input.KeyEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.Mygod#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.UpdateVisualState(System.Boolean)">
            <summary>
            Update the current visual state of the button.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.Select(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.SelectAll">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.Focus">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteBox.GetCharacterIndexFromPoint(System.Windows.Point,System.Boolean)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="snapToText"></param>
            <returns></returns>
        </member>
        <member name="P:Mygod.Windows.Controls.AutoCompleteBox.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality. Making it internal for subclass access.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.AutoCompleteBox.MinimumPrefixLength">
            <summary>
            Gets or sets the minimum number of characters required to be entered
            in the text box before the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> displays
            possible matches.
            matches.
            </summary>
            <value>
            The minimum number of characters to be entered in the text box
            before the <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" />
            displays possible matches. The default is 1.
            </value>
            <remarks>
            If you set MinimumPrefixLength to -1, the AutoCompleteBox will
            not provide possible matches. There is no maximum value, but
            setting MinimumPrefixLength to value that is too large will
            prevent the AutoCompleteBox from providing possible matches as well.
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Controls.AutoCompleteBox.MinimumPopulateDelay">
            <summary>
            Gets or sets the minimum delay, in milliseconds, after text is typed
            in the text box before the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> control
            populates the list of possible matches in the drop-down.
            </summary>
            <value>The minimum delay, in milliseconds, after text is typed in
            the text box, but before the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> populates
            the list of possible matches in the drop-down. The default is 0.</value>
            <exception cref="T:System.ArgumentException">The set value is less than 0.</exception>
        </member>
        <member name="P:Mygod.Windows.Controls.AutoCompleteBox.IsTextCompletionEnabled">
            <summary>
            Gets or sets a value indicating whether the first possible match
            found during the filtering process will be displayed automatically
            in the text box.
            </summary>
            <value>
            True if the first possible match found will be displayed
            automatically in the text box; otherwise, false. The default is
            false.
            </value>
        </member>
        <member name="P:Mygod.Windows.Controls.AutoCompleteBox.ItemTemplate">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate" /> used
            to display each item in the drop-down portion of the control.
            </summary>
            <value>The <see cref="T:System.Windows.DataTemplate" /> used to
            display each item in the drop-down. The default is null.</value>
            <remarks>
            You use the ItemTemplate property to specify the visualization 
            of the data objects in the drop-down portion of the AutoCompleteBox 
            control. If your AutoCompleteBox is bound to a collection and you 
            do not provide specific display instructions by using a 
            DataTemplate, the resulting UI of each item is a string 
            representation of each object in the underlying collection. 
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Controls.AutoCompleteBox.ItemContainerStyle">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> that is
            applied to the selection adapter contained in the drop-down portion
            of the <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" />
            control.
            </summary>
            <value>The <see cref="T:System.Windows.Style" /> applied to the
            selection adapter contained in the drop-down portion of the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> control.
            The default is null.</value>
            <remarks>
            The default selection adapter contained in the drop-down is a 
            ListBox control. 
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Controls.AutoCompleteBox.TextBoxStyle">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> applied to
            the text box portion of the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> control.
            </summary>
            <value>The <see cref="T:System.Windows.Style" /> applied to the text
            box portion of the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> control.
            The default is null.</value>
        </member>
        <member name="P:Mygod.Windows.Controls.AutoCompleteBox.MaxDropDownHeight">
            <summary>
            Gets or sets the maximum height of the drop-down portion of the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> control.
            </summary>
            <value>The maximum height of the drop-down portion of the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> control.
            The default is <see cref="F:System.Double.PositiveInfinity" />.</value>
            <exception cref="T:System.ArgumentException">The specified value is less than 0.</exception>
        </member>
        <member name="P:Mygod.Windows.Controls.AutoCompleteBox.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether the drop-down portion of
            the control is open.
            </summary>
            <value>
            True if the drop-down is open; otherwise, false. The default is
            false.
            </value>
        </member>
        <member name="P:Mygod.Windows.Controls.AutoCompleteBox.ItemsSource">
            <summary>
            Gets or sets a collection that is used to generate the items for the
            drop-down portion of the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> control.
            </summary>
            <value>The collection that is used to generate the items of the
            drop-down portion of the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> control.</value>
        </member>
        <member name="P:Mygod.Windows.Controls.AutoCompleteBox.SelectedItem">
            <summary>
            Gets or sets the selected item in the drop-down.
            </summary>
            <value>The selected item in the drop-down.</value>
            <remarks>
            If the IsTextCompletionEnabled property is true and text typed by 
            the user matches an item in the ItemsSource collection, which is 
            then displayed in the text box, the SelectedItem property will be 
            a null reference.
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Controls.AutoCompleteBox.Text">
            <summary>
            Gets or sets the text in the text box portion of the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> control.
            </summary>
            <value>The text in the text box portion of the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> control.</value>
        </member>
        <member name="P:Mygod.Windows.Controls.AutoCompleteBox.SearchText">
            <summary>
            Gets the text that is used to filter items in the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.ItemsSource" />
            item collection.
            </summary>
            <value>The text that is used to filter items in the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.ItemsSource" />
            item collection.</value>
            <remarks>
            The SearchText value is typically the same as the 
            Text property, but is set after the TextChanged event occurs 
            and before the Populating event.
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Controls.AutoCompleteBox.FilterMode">
            <summary>
            Gets or sets how the text in the text box is used to filter items
            specified by the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.ItemsSource" />
            property for display in the drop-down.
            </summary>
            <value>One of the
            <see cref="T:System.Windows.Controls.AutoCompleteFilterMode" />
            values The default is
            <see cref="F:System.Windows.Controls.AutoCompleteFilterMode.StartsWith" />.</value>
            <exception cref="T:System.ArgumentException">The specified value is
            not a valid
            <see cref="T:System.Windows.Controls.AutoCompleteFilterMode" />.</exception>
            <remarks>
            Use the FilterMode property to specify how possible matches are 
            filtered. For example, possible matches can be filtered in a 
            predefined or custom way. The search mode is automatically set to 
            Custom if you set the ItemFilter property. 
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Controls.AutoCompleteBox.ItemFilter">
            <summary>
            Gets or sets the custom method that uses user-entered text to filter
            the items specified by the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.ItemsSource" />
            property for display in the drop-down.
            </summary>
            <value>The custom method that uses the user-entered text to filter
            the items specified by the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.ItemsSource" />
            property. The default is null.</value>
            <remarks>
            The filter mode is automatically set to Custom if you set the 
            ItemFilter property. 
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Controls.AutoCompleteBox.TextFilter">
            <summary>
            Gets or sets the custom method that uses the user-entered text to
            filter items specified by the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.ItemsSource" />
            property in a text-based way for display in the drop-down.
            </summary>
            <value>The custom method that uses the user-entered text to filter
            items specified by the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.ItemsSource" />
            property in a text-based way for display in the drop-down.</value>
            <remarks>
            The search mode is automatically set to Custom if you set the 
            TextFilter property. 
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Controls.AutoCompleteBox.DropDownPopup">
            <summary>
            Gets or sets the drop down popup control.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.AutoCompleteBox.TextBox">
            <summary>
            Gets or sets the Text template part.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.AutoCompleteBox.SelectionAdapter">
            <summary>
            Gets or sets the selection adapter used to populate the drop-down
            with a list of selectable items.
            </summary>
            <value>The selection adapter used to populate the drop-down with a
            list of selectable items.</value>
            <remarks>
            You can use this property when you create an automation peer to 
            use with AutoCompleteBox or deriving from AutoCompleteBox to 
            create a custom control.
            </remarks>
        </member>
        <member name="E:Mygod.Windows.Controls.AutoCompleteBox.TextChanged">
            <summary>
            Occurs when the text in the text box portion of the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> changes.
            </summary>
        </member>
        <member name="E:Mygod.Windows.Controls.AutoCompleteBox.Populating">
            <summary>
            Occurs when the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> is
            populating the drop-down with possible matches based on the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.Text" />
            property.
            </summary>
            <remarks>
            If the event is canceled, by setting the PopulatingEventArgs.Cancel 
            property to true, the AutoCompleteBox will not automatically 
            populate the selection adapter contained in the drop-down. 
            In this case, if you want possible matches to appear, you must 
            provide the logic for populating the selection adapter.
            </remarks>
        </member>
        <member name="E:Mygod.Windows.Controls.AutoCompleteBox.Populated">
            <summary>
            Occurs when the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> has
            populated the drop-down with possible matches based on the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.Text" />
            property.
            </summary>
        </member>
        <member name="E:Mygod.Windows.Controls.AutoCompleteBox.DropDownOpening">
            <summary>
            Occurs when the value of the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.IsDropDownOpen" />
            property is changing from false to true.
            </summary>
        </member>
        <member name="E:Mygod.Windows.Controls.AutoCompleteBox.DropDownOpened">
            <summary>
            Occurs when the value of the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.IsDropDownOpen" />
            property has changed from false to true and the drop-down is open.
            </summary>
        </member>
        <member name="E:Mygod.Windows.Controls.AutoCompleteBox.DropDownClosing">
            <summary>
            Occurs when the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.IsDropDownOpen" />
            property is changing from true to false.
            </summary>
        </member>
        <member name="E:Mygod.Windows.Controls.AutoCompleteBox.DropDownClosed">
            <summary>
            Occurs when the
            <see cref="P:Mygod.Windows.Controls.AutoCompleteBox.IsDropDownOpen" />
            property was changed from true to false and the drop-down is open.
            </summary>
        </member>
        <member name="E:Mygod.Windows.Controls.AutoCompleteBox.SelectionChanged">
            <summary>
            Occurs when the selected item in the drop-down portion of the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> has
            changed.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.AutoCompleteBox.ValueMemberBinding">
            <summary>
            Gets or sets the  <see cref="T:System.Windows.Data.Binding" /> that
            is used to get the values for display in the text portion of
            the <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" />
            control.
            </summary>
            <value>The <see cref="T:System.Windows.Data.Binding" /> object used
            when binding to a collection property.</value>
        </member>
        <member name="P:Mygod.Windows.Controls.AutoCompleteBox.ValueMemberPath">
            <summary>
            Gets or sets the property path that is used to get values for
            display in the text portion of the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> control.
            </summary>
            <value>The property path that is used to get values for display in
            the text portion of the
            <see cref="T:Mygod.Windows.Controls.AutoCompleteBox" /> control.</value>
        </member>
        <member name="T:Mygod.Windows.Controls.AutoCompleteSearch">
            <summary>
            A predefined set of filter functions for the known, built-in 
            AutoCompleteFilterMode enumeration values.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteSearch.GetFilter(Mygod.Windows.Controls.AutoCompleteFilterMode)">
            <summary>
            Index function that retrieves the filter for the provided 
            AutoCompleteFilterMode.
            </summary>
            <param name="FilterMode">The built-in search mode.</param>
            <returns>Returns the string-based comparison function.</returns>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteSearch.StartsWith(System.String,System.String)">
            <summary>
            Check if the string value begins with the text.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteSearch.StartsWithCaseSensitive(System.String,System.String)">
            <summary>
            Check if the string value begins with the text.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteSearch.StartsWithOrdinal(System.String,System.String)">
            <summary>
            Check if the string value begins with the text.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteSearch.StartsWithOrdinalCaseSensitive(System.String,System.String)">
            <summary>
            Check if the string value begins with the text.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteSearch.Contains(System.String,System.String)">
            <summary>
            Check if the prefix is contained in the string value. The current 
            culture's case insensitive string comparison operator is used.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteSearch.ContainsCaseSensitive(System.String,System.String)">
            <summary>
            Check if the prefix is contained in the string value.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteSearch.ContainsOrdinal(System.String,System.String)">
            <summary>
            Check if the prefix is contained in the string value.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteSearch.ContainsOrdinalCaseSensitive(System.String,System.String)">
            <summary>
            Check if the prefix is contained in the string value.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteSearch.Equals(System.String,System.String)">
            <summary>
            Check if the string values are equal.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteSearch.EqualsCaseSensitive(System.String,System.String)">
            <summary>
            Check if the string values are equal.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteSearch.EqualsOrdinal(System.String,System.String)">
            <summary>
            Check if the string values are equal.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Mygod.Windows.Controls.AutoCompleteSearch.EqualsOrdinalCaseSensitive(System.String,System.String)">
            <summary>
            Check if the string values are equal.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="T:Mygod.Windows.Controls.AutoCompleteFilterMode">
            <summary>
            Specifies how text in the text box portion of the
            <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control is used
            to filter items specified by the
            <see cref="P:System.Windows.Controls.AutoCompleteBox.ItemsSource" />
            property for display in the drop-down.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteFilterMode.None">
            <summary>
            Specifies that no filter is used. All items are returned.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteFilterMode.StartsWith">
            <summary>
            Specifies a culture-sensitive, case-insensitive filter where the
            returned items start with the specified text. The filter uses the
            <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" />
            method, specifying
            <see cref="P:System.StringComparer.CurrentCultureIgnoreCase" /> as
            the string comparison criteria.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteFilterMode.StartsWithCaseSensitive">
            <summary>
            Specifies a culture-sensitive, case-sensitive filter where the
            returned items start with the specified text. The filter uses the
            <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" />
            method, specifying
            <see cref="P:System.StringComparer.CurrentCulture" /> as the string
            comparison criteria.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteFilterMode.StartsWithOrdinal">
            <summary>
            Specifies an ordinal, case-insensitive filter where the returned
            items start with the specified text. The filter uses the
            <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" />
            method, specifying
            <see cref="P:System.StringComparer.OrdinalIgnoreCase" /> as the
            string comparison criteria.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteFilterMode.StartsWithOrdinalCaseSensitive">
            <summary>
            Specifies an ordinal, case-sensitive filter where the returned items
            start with the specified text. The filter uses the
            <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" />
            method, specifying <see cref="P:System.StringComparer.Ordinal" /> as
            the string comparison criteria.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteFilterMode.Contains">
            <summary>
            Specifies a culture-sensitive, case-insensitive filter where the
            returned items contain the specified text.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteFilterMode.ContainsCaseSensitive">
            <summary>
            Specifies a culture-sensitive, case-sensitive filter where the
            returned items contain the specified text.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteFilterMode.ContainsOrdinal">
            <summary>
            Specifies an ordinal, case-insensitive filter where the returned
            items contain the specified text.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteFilterMode.ContainsOrdinalCaseSensitive">
            <summary>
            Specifies an ordinal, case-sensitive filter where the returned items
            contain the specified text.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteFilterMode.Equals">
            <summary>
            Specifies a culture-sensitive, case-insensitive filter where the
            returned items equal the specified text. The filter uses the
            <see cref="M:System.String.Equals(System.String,System.StringComparison)" />
            method, specifying
            <see cref="P:System.StringComparer.CurrentCultureIgnoreCase" /> as
            the search comparison criteria.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteFilterMode.EqualsCaseSensitive">
            <summary>
            Specifies a culture-sensitive, case-sensitive filter where the
            returned items equal the specified text. The filter uses the
            <see cref="M:System.String.Equals(System.String,System.StringComparison)" />
            method, specifying
            <see cref="P:System.StringComparer.CurrentCulture" /> as the string
            comparison criteria.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteFilterMode.EqualsOrdinal">
            <summary>
            Specifies an ordinal, case-insensitive filter where the returned
            items equal the specified text. The filter uses the
            <see cref="M:System.String.Equals(System.String,System.StringComparison)" />
            method, specifying
            <see cref="P:System.StringComparer.OrdinalIgnoreCase" /> as the
            string comparison criteria.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteFilterMode.EqualsOrdinalCaseSensitive">
            <summary>
            Specifies an ordinal, case-sensitive filter where the returned items
            equal the specified text. The filter uses the
            <see cref="M:System.String.Equals(System.String,System.StringComparison)" />
            method, specifying <see cref="P:System.StringComparer.Ordinal" /> as
            the string comparison criteria.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.AutoCompleteFilterMode.Custom">
            <summary>
            Specifies that a custom filter is used. This mode is used when the
            <see cref="P:System.Windows.Controls.AutoCompleteBox.TextFilter" />
            or
            <see cref="P:System.Windows.Controls.AutoCompleteBox.ItemFilter" />
            properties are set.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Controls.AutoCompleteFilterPredicate`1">
            <summary>
            Represents the filter used by the
            <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control to
            determine whether an item is a possible match for the specified text.
            </summary>
            <returns>true to indicate <paramref name="item" /> is a possible match
            for <paramref name="search" />; otherwise false.</returns>
            <param name="search">The string used as the basis for filtering.</param>
            <param name="item">The item that is compared with the
            <paramref name="search" /> parameter.</param>
            <typeparam name="T">The type used for filtering the
            <see cref="T:System.Windows.Controls.AutoCompleteBox" />. This type can
            be either a string or an object.</typeparam>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="T:Mygod.Windows.Controls.ISelectionAdapter">
            <summary>
            Defines an item collection, selection members, and key handling for the
            selection adapter contained in the drop-down portion of an
            <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:Mygod.Windows.Controls.ISelectionAdapter.HandleKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.KeyDown" /> event that occurs
            when a key is pressed while the drop-down portion of the
            <see cref="T:System.Windows.Controls.AutoCompleteBox" /> has focus.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Input.KeyEventArgs" />
            that contains data about the
            <see cref="E:System.Windows.UIElement.KeyDown" /> event.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.ISelectionAdapter.CreateAutomationPeer">
            <summary>
            Returns an automation peer for the selection adapter, for use by the
            Silverlight automation infrastructure.
            </summary>
            <returns>An automation peer for the selection adapter, if one is
            available; otherwise, null.</returns>
        </member>
        <member name="P:Mygod.Windows.Controls.ISelectionAdapter.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The currently selected item.</value>
        </member>
        <member name="E:Mygod.Windows.Controls.ISelectionAdapter.SelectionChanged">
            <summary>
            Occurs when the
            <see cref="P:Mygod.Windows.Controls.ISelectionAdapter.SelectedItem" />
            property value changes.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ISelectionAdapter.ItemsSource">
            <summary>
            Gets or sets a collection that is used to generate content for the
            selection adapter.
            </summary>
            <value>The collection that is used to generate content for the
            selection adapter.</value>
        </member>
        <member name="E:Mygod.Windows.Controls.ISelectionAdapter.Commit">
            <summary>
            Occurs when a selected item is not cancelled and is committed as the
            selected item.
            </summary>
        </member>
        <member name="E:Mygod.Windows.Controls.ISelectionAdapter.Cancel">
            <summary>
            Occurs when a selection has been canceled.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Controls.PopulatedEventArgs">
            <summary>
            Provides data for the
            <see cref="E:System.Windows.Controls.AutoCompleteBox.Populated" />
            event.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:Mygod.Windows.Controls.PopulatedEventArgs.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.PopulatedEventArgs" />.
            </summary>
            <param name="data">The list of possible matches added to the
            drop-down portion of the
            <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.PopulatedEventArgs.#ctor(System.Collections.IEnumerable,System.Windows.RoutedEvent)">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.PopulatedEventArgs" />.
            </summary>
            <param name="data">The list of possible matches added to the
            drop-down portion of the
            <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control.</param>
            <param name="routedEvent">The routed event identifier for this instance.</param>
        </member>
        <member name="P:Mygod.Windows.Controls.PopulatedEventArgs.Data">
            <summary>
            Gets the list of possible matches added to the drop-down portion of
            the <see cref="T:System.Windows.Controls.AutoCompleteBox" />
            control.
            </summary>
            <value>The list of possible matches added to the
            <see cref="T:System.Windows.Controls.AutoCompleteBox" />.</value>
        </member>
        <member name="T:Mygod.Windows.Controls.PopulatedEventHandler">
            <summary>
            Represents the method that will handle the
            <see cref="E:System.Windows.Controls.AutoCompleteBox.Populated" />
            event of a <see cref="T:System.Windows.Controls.AutoCompleteBox" />
            control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A
            <see cref="T:System.Windows.Controls.PopulatedEventArgs" /> that
            contains the event data.</param>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="T:Mygod.Windows.Controls.PopulatingEventArgs">
            <summary>
            Provides data for the
            <see cref="E:System.Windows.Controls.AutoCompleteBox.Populating" />
            event.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:Mygod.Windows.Controls.PopulatingEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.PopulatingEventArgs" />.
            </summary>
            <param name="parameter">The value of the
            <see cref="P:System.Windows.Controls.AutoCompleteBox.SearchText" />
            property, which is used to filter items for the
            <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.PopulatingEventArgs.#ctor(System.String,System.Windows.RoutedEvent)">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.PopulatingEventArgs" />.
            </summary>
            <param name="parameter">The value of the
            <see cref="P:System.Windows.Controls.AutoCompleteBox.SearchText" />
            property, which is used to filter items for the
            <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control.</param>
            <param name="routedEvent">The routed event identifier for this instance.</param>
        </member>
        <member name="P:Mygod.Windows.Controls.PopulatingEventArgs.Parameter">
            <summary>
            Gets the text that is used to determine which items to display in
            the <see cref="T:System.Windows.Controls.AutoCompleteBox" />
            control.
            </summary>
            <value>The text that is used to determine which items to display in
            the <see cref="T:System.Windows.Controls.AutoCompleteBox" />.</value>
        </member>
        <member name="P:Mygod.Windows.Controls.PopulatingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the
            <see cref="E:System.Windows.Controls.AutoCompleteBox.Populating" />
            event should be canceled.
            </summary>
            <value>True to cancel the event, otherwise false. The default is
            false.</value>
        </member>
        <member name="T:Mygod.Windows.Controls.PopulatingEventHandler">
            <summary>
            Represents the method that will handle the
            <see cref="E:System.Windows.Controls.AutoCompleteBox.Populating" />
            event of a <see cref="T:System.Windows.Controls.AutoCompleteBox" />
            control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A
            <see cref="T:System.Windows.Controls.PopulatingEventArgs" /> that
            contains the event data.</param>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="T:Mygod.Windows.Controls.PopupHelper">
            <summary>
            PopupHelper is a simple wrapper type that helps abstract platform
            differences out of the Popup.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.PopupHelper.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the PopupHelper class.
            </summary>
            <param name="parent">The parent control.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.PopupHelper.#ctor(System.Windows.Controls.Control,System.Windows.Controls.Primitives.Popup)">
            <summary>
            Initializes a new instance of the PopupHelper class.
            </summary>
            <param name="parent">The parent control.</param>
            <param name="popup">The Popup template part.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.PopupHelper.Arrange">
            <summary>
            Arrange the popup.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.PopupHelper.OnClosed(System.EventArgs)">
            <summary>
            Fires the Closed event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.PopupHelper.OnPopupClosedStateChanged(System.Object,System.Windows.VisualStateChangedEventArgs)">
            <summary>
            Actually closes the popup after the VSM state animation completes.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.PopupHelper.BeforeOnApplyTemplate">
            <summary>
            Should be called by the parent control before the base
            OnApplyTemplate method is called.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.PopupHelper.AfterOnApplyTemplate">
            <summary>
            Should be called by the parent control after the base
            OnApplyTemplate method is called.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.PopupHelper.PopupChild_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            The size of the popup child has changed.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.PopupHelper.OutsidePopup_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The mouse has clicked outside of the popup.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.PopupHelper.Popup_Closed(System.Object,System.EventArgs)">
            <summary>
            Connected to the Popup Closed event and fires the Closed event.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.PopupHelper.OnFocusChanged(System.EventArgs)">
            <summary>
            Connected to several events that indicate that the FocusChanged 
            event should bubble up to the parent control.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.PopupHelper.OnUpdateVisualStates(System.EventArgs)">
            <summary>
            Fires the UpdateVisualStates event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.PopupHelper.PopupChild_GotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The popup child has received focus.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.PopupHelper.PopupChild_LostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The popup child has lost focus.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.PopupHelper.PopupChild_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            The popup child has had the mouse enter its bounds.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.PopupHelper.PopupChild_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            The mouse has left the popup child's bounds.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="P:Mygod.Windows.Controls.PopupHelper.UsesClosingVisualState">
            <summary>
            Gets a value indicating whether a visual popup state is being used
            in the current template for the Closed state. Setting this value to
            true will delay the actual setting of Popup.IsOpen to false until
            after the visual state's transition for Closed is complete.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.PopupHelper.Parent">
            <summary>
            Gets or sets the parent control.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.PopupHelper.MaxDropDownHeight">
            <summary>
            Gets or sets the maximum drop down height value.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.PopupHelper.Popup">
            <summary>
            Gets the Popup control instance.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.PopupHelper.IsOpen">
            <summary>
            Gets or sets a value indicating whether the actual Popup is open.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.PopupHelper.PopupChild">
            <summary>
            Gets or sets the popup child framework element. Can be used if an
            assumption is made on the child type.
            </summary>
        </member>
        <member name="E:Mygod.Windows.Controls.PopupHelper.Closed">
            <summary>
            The Closed event is fired after the Popup closes.
            </summary>
        </member>
        <member name="E:Mygod.Windows.Controls.PopupHelper.FocusChanged">
            <summary>
            Fired when the popup children have a focus event change, allows the
            parent control to update visual states or react to the focus state.
            </summary>
        </member>
        <member name="E:Mygod.Windows.Controls.PopupHelper.UpdateVisualStates">
            <summary>
            Fired when the popup children intercept an event that may indicate
            the need for a visual state update by the parent control.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Controls.RoutedPropertyChangingEventArgs`1">
            <summary>
            Provides event data for various routed events that track property values
            changing.  Typically the events denote a cancellable action.
            </summary>
            <typeparam name="T">
            The type of the value for the dependency property that is changing.
            </typeparam>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:Mygod.Windows.Controls.RoutedPropertyChangingEventArgs`1._cancel">
            <summary>
            Private member variable for Cancel property.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.RoutedPropertyChangingEventArgs`1.#ctor(System.Windows.DependencyProperty,`0,`0,System.Boolean)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Mygod.Windows.Controls.RoutedPropertyChangingEventArgs`1" />
            class.
            </summary>
            <param name="property">
            The <see cref="T:System.Windows.DependencyProperty" /> identifier
            for the property that is changing.
            </param>
            <param name="oldValue">The previous value of the property.</param>
            <param name="newValue">
            The new value of the property, assuming that the property change is
            not cancelled.
            </param>
            <param name="isCancelable">
            True if the property change is cancellable by setting
            <see cref="P:Mygod.Windows.Controls.RoutedPropertyChangingEventArgs`1.Cancel" />
            to true in event handling. false if the property change is not
            cancellable.
            </param>
        </member>
        <member name="M:Mygod.Windows.Controls.RoutedPropertyChangingEventArgs`1.#ctor(System.Windows.DependencyProperty,`0,`0,System.Boolean,System.Windows.RoutedEvent)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Mygod.Windows.Controls.RoutedPropertyChangingEventArgs`1" />
            class.
            </summary>
            <param name="property">
            The <see cref="T:System.Windows.DependencyProperty" /> identifier
            for the property that is changing.
            </param>
            <param name="oldValue">The previous value of the property.</param>
            <param name="newValue">
            The new value of the property, assuming that the property change is
            not cancelled.
            </param>
            <param name="isCancelable">
            True if the property change is cancellable by setting
            <see cref="P:Mygod.Windows.Controls.RoutedPropertyChangingEventArgs`1.Cancel" />
            to true in event handling. false if the property change is not
            cancellable.
            </param>
            <param name="routedEvent">The routed event identifier for this instance.</param>
        </member>
        <member name="P:Mygod.Windows.Controls.RoutedPropertyChangingEventArgs`1.Property">
            <summary>
            Gets the <see cref="T:System.Windows.DependencyProperty" />
            identifier for the property that is changing.
            </summary>
            <value>
            The <see cref="T:System.Windows.DependencyProperty" /> identifier
            for the property that is changing.
            </value>
        </member>
        <member name="P:Mygod.Windows.Controls.RoutedPropertyChangingEventArgs`1.OldValue">
            <summary>
            Gets a value that reports the previous value of the changing
            property.
            </summary>
            <value>
            The previous value of the changing property.
            </value>
        </member>
        <member name="P:Mygod.Windows.Controls.RoutedPropertyChangingEventArgs`1.NewValue">
            <summary>
            Gets or sets a value that reports the new value of the changing
            property, assuming that the property change is not cancelled.
            </summary>
            <value>
            The new value of the changing property.
            </value>
        </member>
        <member name="P:Mygod.Windows.Controls.RoutedPropertyChangingEventArgs`1.IsCancelable">
            <summary>
            Gets a value indicating whether the property change that originated
            the RoutedPropertyChanging event is cancellable.
            </summary>
            <value>
            True if the property change is cancellable. false if the property
            change is not cancellable.
            </value>
        </member>
        <member name="P:Mygod.Windows.Controls.RoutedPropertyChangingEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether the property change that
            originated the RoutedPropertyChanging event should be cancelled.
            </summary>
            <value>
            True to cancel the property change; this resets the property to
            <see cref="P:Mygod.Windows.Controls.RoutedPropertyChangingEventArgs`1.OldValue" />.
            false to not cancel the property change; the value changes to
            <see cref="P:Mygod.Windows.Controls.RoutedPropertyChangingEventArgs`1.NewValue" />.
            </value>
            <exception cref="T:System.InvalidOperationException">
            Attempted to cancel in an instance where
            <see cref="P:Mygod.Windows.Controls.RoutedPropertyChangingEventArgs`1.IsCancelable" />
            is false.
            </exception>
        </member>
        <member name="P:Mygod.Windows.Controls.RoutedPropertyChangingEventArgs`1.InCoercion">
            <summary>
            Gets or sets a value indicating whether internal value coercion is
            acting on the property change that originated the
            RoutedPropertyChanging event.
            </summary>
            <value>
            True if coercion is active. false if coercion is not active.
            </value>
            <remarks>
            This is a total hack to work around the class hierarchy for Value
            coercion in NumericUpDown.
            </remarks>
        </member>
        <member name="T:Mygod.Windows.Controls.RoutedPropertyChangingEventHandler`1">
            <summary>
            Represents methods that handle various routed events that track property
            values changing.  Typically the events denote a cancellable action.
            </summary>
            <typeparam name="T">
            The type of the value for the dependency property that is changing.
            </typeparam>
            <param name="sender">
            The object where the initiating property is changing.
            </param>
            <param name="e">Event data for the event.</param>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:Mygod.Windows.Controls.SelectorSelectionAdapter">
            <summary>
            Represents the selection adapter contained in the drop-down portion of
            an <see cref="T:System.Windows.Controls.AutoCompleteBox" /> control.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:Mygod.Windows.Controls.SelectorSelectionAdapter._selector">
            <summary>
            The Selector instance.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.SelectorSelectionAdapter.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Mygod.Windows.Controls.SelectorSelectionAdapter" />
            class.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.SelectorSelectionAdapter.#ctor(System.Windows.Controls.Primitives.Selector)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Mygod.Windows.Controls.SelectorSelectionAdapter" />
            class with the specified
            <see cref="T:System.Windows.Controls.Primitives.Selector" />
            control.
            </summary>
            <param name="selector">The
            <see cref="T:System.Windows.Controls.Primitives.Selector" /> control
            to wrap as a
            <see cref="T:Mygod.Windows.Controls.SelectorSelectionAdapter" />.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.SelectorSelectionAdapter.ResetScrollViewer">
            <summary>
            If the control contains a ScrollViewer, this will reset the viewer 
            to be scrolled to the top.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.SelectorSelectionAdapter.OnSelectorMouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse left button up event on the selector control.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.SelectorSelectionAdapter.OnSelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the SelectionChanged event on the Selector control.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The selection changed event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.SelectorSelectionAdapter.SelectedIndexIncrement">
            <summary>
            Increments the
            <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedIndex" />
            property of the underlying
            <see cref="T:System.Windows.Controls.Primitives.Selector" />
            control.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.SelectorSelectionAdapter.SelectedIndexDecrement">
            <summary>
            Decrements the
            <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedIndex" />
            property of the underlying
            <see cref="T:System.Windows.Controls.Primitives.Selector" />
            control.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.SelectorSelectionAdapter.HandleKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.KeyDown" /> event that occurs
            when a key is pressed while the drop-down portion of the
            <see cref="T:System.Windows.Controls.AutoCompleteBox" /> has focus.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Input.KeyEventArgs" />
            that contains data about the
            <see cref="E:System.Windows.UIElement.KeyDown" /> event.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.SelectorSelectionAdapter.OnCommit">
            <summary>
            Raises the
            <see cref="E:Mygod.Windows.Controls.SelectorSelectionAdapter.Commit" />
            event.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.SelectorSelectionAdapter.OnCommit(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Fires the Commit event.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.SelectorSelectionAdapter.OnCancel">
            <summary>
            Raises the
            <see cref="E:Mygod.Windows.Controls.SelectorSelectionAdapter.Cancel" />
            event.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.SelectorSelectionAdapter.OnCancel(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Fires the Cancel event.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mygod.Windows.Controls.SelectorSelectionAdapter.AfterAdapterAction">
            <summary>
            Change the selection after the actions are complete.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.SelectorSelectionAdapter.CreateAutomationPeer">
            <summary>
            Returns an automation peer for the underlying
            <see cref="T:System.Windows.Controls.Primitives.Selector" />
            control, for use by the Silverlight automation infrastructure.
            </summary>
            <returns>An automation peer for use by the Silverlight automation
            infrastructure.</returns>
        </member>
        <member name="P:Mygod.Windows.Controls.SelectorSelectionAdapter.IgnoringSelectionChanged">
            <summary>
            Gets or sets a value indicating whether the selection change event 
            should not be fired.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.SelectorSelectionAdapter.SelectorControl">
            <summary>
            Gets or sets the underlying
            <see cref="T:System.Windows.Controls.Primitives.Selector" />
            control.
            </summary>
            <value>The underlying
            <see cref="T:System.Windows.Controls.Primitives.Selector" />
            control.</value>
        </member>
        <member name="E:Mygod.Windows.Controls.SelectorSelectionAdapter.SelectionChanged">
            <summary>
            Occurs when the
            <see cref="P:Mygod.Windows.Controls.SelectorSelectionAdapter.SelectedItem" />
            property value changes.
            </summary>
        </member>
        <member name="E:Mygod.Windows.Controls.SelectorSelectionAdapter.Commit">
            <summary>
            Occurs when an item is selected and is committed to the underlying
            <see cref="T:System.Windows.Controls.Primitives.Selector" />
            control.
            </summary>
        </member>
        <member name="E:Mygod.Windows.Controls.SelectorSelectionAdapter.Cancel">
            <summary>
            Occurs when a selection is canceled before it is committed.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.SelectorSelectionAdapter.SelectedItem">
            <summary>
            Gets or sets the selected item of the selection adapter.
            </summary>
            <value>The selected item of the underlying selection adapter.</value>
        </member>
        <member name="P:Mygod.Windows.Controls.SelectorSelectionAdapter.ItemsSource">
            <summary>
            Gets or sets a collection that is used to generate the content of
            the selection adapter.
            </summary>
            <value>The collection used to generate content for the selection
            adapter.</value>
        </member>
        <member name="T:Mygod.Windows.Controls.AnimationHelper">
            <summary>
            A helper class to simplify animation.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.AnimationHelper.StartAnimation(System.Windows.UIElement,System.Windows.DependencyProperty,System.Double,System.Double)">
            <summary>
            Starts an animation to a particular value on the specified dependency property.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.AnimationHelper.StartAnimation(System.Windows.UIElement,System.Windows.DependencyProperty,System.Double,System.Double,System.EventHandler)">
            <summary>
            Starts an animation to a particular value on the specified dependency property.
            You can pass in an event handler to call when the animation has completed.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.AnimationHelper.CancelAnimation(System.Windows.UIElement,System.Windows.DependencyProperty)">
            <summary>
            Cancel any animations that are running on the specified dependency property.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Controls.ZoomAndPanControl">
            <summary>
            A class that wraps up zooming and panning of it's content.
            </summary>
            <summary>
            This is an extension to the ZoomAndPanControol class that implements
            the IScrollInfo interface properties and functions.
            
            IScrollInfo is implemented to allow ZoomAndPanControl to be wrapped (in XAML)
            in a ScrollViewer.  IScrollInfo allows the ScrollViewer and ZoomAndPanControl to 
            communicate important information such as the horizontal and vertical scrollbar offsets.
            
            There is a good series of articles showing how to implement IScrollInfo starting here:
                http://blogs.msdn.com/bencon/archive/2006/01/05/509991.aspx
                
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.ZoomAndPanControl.constrainedContentViewportHeight">
            <summary>
            The height of the viewport in content coordinates, clamped to the height of the content.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.ZoomAndPanControl.constrainedContentViewportWidth">
            <summary>
            The width of the viewport in content coordinates, clamped to the width of the content.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.ZoomAndPanControl.content">
            <summary>
            Reference to the underlying content, which is named PART_Content in the template.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.ZoomAndPanControl.contentOffsetTransform">
            <summary>
            The transform that is applied to the content to offset it by 'ContentOffsetX' and 'ContentOffsetY'.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.ZoomAndPanControl.contentScaleTransform">
            <summary>
            The transform that is applied to the content to scale it by 'ContentScale'.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.ZoomAndPanControl.disableContentFocusSync">
            <summary>
            Normally when content offsets changes the content focus is automatically updated.
            This syncronization is disabled when 'disableContentFocusSync' is set to 'true'.
            When we are zooming in or out we 'disableContentFocusSync' is set to 'true' because 
            we are zooming in or out relative to the content focus we don't want to update the focus.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.ZoomAndPanControl.disableScrollOffsetSync">
            <summary>
            Used to disable syncronization between IScrollInfo interface and ContentOffsetX/ContentOffsetY.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.ZoomAndPanControl.enableContentOffsetUpdateFromScale">
            <summary>
            Enable the update of the content offset as the content scale changes.
            This enabled for zooming about a point (google-maps style zooming) and zooming to a rect.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.ZoomAndPanControl.unScaledExtent">
            <summary>
            Records the unscaled extent of the content.
            This is calculated during the measure and arrange.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Controls.ZoomAndPanControl.viewport">
            <summary>
            Records the size of the viewport (in viewport coordinates) onto the content.
            This is calculated during the measure and arrange.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.AnimatedZoomTo(System.Double,System.Windows.Rect)">
            <summary>
            Do an animated zoom to view a specific scale and rectangle (in content coordinates).
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.AnimatedZoomTo(System.Windows.Rect)">
            <summary>
            Do an animated zoom to the specified rectangle (in content coordinates).
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.ZoomTo(System.Windows.Rect)">
            <summary>
            Instantly zoom to the specified rectangle (in content coordinates).
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.SnapContentOffsetTo(System.Windows.Point)">
            <summary>
            Instantly center the view on the specified point (in content coordinates).
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.SnapTo(System.Windows.Point)">
            <summary>
            Instantly center the view on the specified point (in content coordinates).
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.AnimatedSnapTo(System.Windows.Point)">
            <summary>
            Use animation to center the view on the specified point (in content coordinates).
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.AnimatedZoomAboutPoint(System.Double,System.Windows.Point)">
            <summary>
            Zoom in/out centered on the specified point (in content coordinates).
            The focus point is kept locked to it's on screen position (ala google maps).
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.ZoomAboutPoint(System.Double,System.Windows.Point)">
            <summary>
            Zoom in/out centered on the specified point (in content coordinates).
            The focus point is kept locked to it's on screen position (ala google maps).
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.AnimatedZoomTo(System.Double)">
            <summary>
            Zoom in/out centered on the viewport center.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.ZoomTo(System.Double)">
            <summary>
            Zoom in/out centered on the viewport center.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.AnimatedScaleToFit">
            <summary>
            Do animation that scales the content so that it fits completely in the control.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.ScaleToFit">
            <summary>
            Instantly scale the content so that it fits completely in the control.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.#cctor">
            <summary>
            Static constructor to define metadata for the control (and link it to the style in Generic.xaml).
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.OnApplyTemplate">
            <summary>
            Called when a template has been applied to the control.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.AnimatedZoomPointToViewportCenter(System.Double,System.Windows.Point,System.EventHandler)">
            <summary>
            Zoom to the specified scale and move the specified focus point to the center of the viewport.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.ZoomPointToViewportCenter(System.Double,System.Windows.Point)">
            <summary>
            Zoom to the specified scale and move the specified focus point to the center of the viewport.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.ContentScalePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Event raised when the 'ContentScale' property has changed value.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.ContentScaleCoerce(System.Windows.DependencyObject,System.Object)">
            <summary>
            Method called to clamp the 'ContentScale' value to its valid range.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.MinOrMaxContentScalePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Event raised 'MinContentScale' or 'MaxContentScale' has changed.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.ContentOffsetXPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Event raised when the 'ContentOffsetX' property has changed value.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.ContentOffsetXCoerce(System.Windows.DependencyObject,System.Object)">
            <summary>
            Method called to clamp the 'ContentOffsetX' value to its valid range.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.ContentOffsetYPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Event raised when the 'ContentOffsetY' property has changed value.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.ContentOffsetYCoerce(System.Windows.DependencyObject,System.Object)">
            <summary>
            Method called to clamp the 'ContentOffsetY' value to its valid range.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.ResetViewportZoomFocus">
            <summary>
            Reset the viewport zoom focus to the center of the viewport.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.UpdateViewportSize(System.Windows.Size)">
            <summary>
            Update the viewport size from the specified size.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.UpdateContentViewportSize">
            <summary>
            Update the size of the viewport in content coordinates after the viewport size or 'ContentScale' has changed.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.UpdateTranslationX">
            <summary>
            Update the X coordinate of the translation transformation.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.UpdateTranslationY">
            <summary>
            Update the Y coordinate of the translation transformation.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.UpdateContentZoomFocusX">
            <summary>
            Update the X coordinate of the zoom focus point in content coordinates.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.UpdateContentZoomFocusY">
            <summary>
            Update the Y coordinate of the zoom focus point in content coordinates.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.MeasureOverride(System.Windows.Size)">
            <summary>
            Measure the control and it's children.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arrange the control and it's children.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.SetHorizontalOffset(System.Double)">
            <summary>
            Called when the offset of the horizontal scrollbar has been set.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.SetVerticalOffset(System.Double)">
            <summary>
            Called when the offset of the vertical scrollbar has been set.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.LineUp">
            <summary>
            Shift the content offset one line up.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.LineDown">
            <summary>
            Shift the content offset one line down.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.LineLeft">
            <summary>
            Shift the content offset one line left.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.LineRight">
            <summary>
            Shift the content offset one line right.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.PageUp">
            <summary>
            Shift the content offset one page up.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.PageDown">
            <summary>
            Shift the content offset one page down.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.PageLeft">
            <summary>
            Shift the content offset one page left.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.PageRight">
            <summary>
            Shift the content offset one page right.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.MouseWheelDown">
            <summary>
            Don't handle mouse wheel input from the ScrollViewer, the mouse wheel is
            used for zooming in and out, not for manipulating the scrollbars.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.MouseWheelLeft">
            <summary>
            Don't handle mouse wheel input from the ScrollViewer, the mouse wheel is
            used for zooming in and out, not for manipulating the scrollbars.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.MouseWheelRight">
            <summary>
            Don't handle mouse wheel input from the ScrollViewer, the mouse wheel is
            used for zooming in and out, not for manipulating the scrollbars.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.MouseWheelUp">
            <summary>
            Don't handle mouse wheel input from the ScrollViewer, the mouse wheel is
            used for zooming in and out, not for manipulating the scrollbars.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Controls.ZoomAndPanControl.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            Bring the specified rectangle to view.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ZoomAndPanControl.ContentOffsetX">
            <summary>
            Get/set the X offset (in content coordinates) of the view on the content.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ZoomAndPanControl.ContentOffsetY">
            <summary>
            Get/set the Y offset (in content coordinates) of the view on the content.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ZoomAndPanControl.ContentScale">
            <summary>
            Get/set the current scale (or zoom factor) of the content.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ZoomAndPanControl.MinContentScale">
            <summary>
            Get/set the minimum value for 'ContentScale'.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ZoomAndPanControl.MaxContentScale">
            <summary>
            Get/set the maximum value for 'ContentScale'.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ZoomAndPanControl.ContentZoomFocusX">
            <summary>
            The X coordinate of the content focus, this is the point that we are focusing on when zooming.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ZoomAndPanControl.ContentZoomFocusY">
            <summary>
            The Y coordinate of the content focus, this is the point that we are focusing on when zooming.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ZoomAndPanControl.ViewportZoomFocusX">
            <summary>
            The X coordinate of the viewport focus, this is the point in the viewport (in viewport coordinates) 
            that the content focus point is locked to while zooming in.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ZoomAndPanControl.ViewportZoomFocusY">
            <summary>
            The Y coordinate of the viewport focus, this is the point in the viewport (in viewport coordinates) 
            that the content focus point is locked to while zooming in.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ZoomAndPanControl.AnimationDuration">
            <summary>
            The duration of the animations (in seconds) started by calling AnimatedZoomTo and the other animation methods.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ZoomAndPanControl.ContentViewportWidth">
            <summary>
            Get the viewport width, in content coordinates.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ZoomAndPanControl.ContentViewportHeight">
            <summary>
            Get the viewport height, in content coordinates.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ZoomAndPanControl.IsMouseWheelScrollingEnabled">
            <summary>
            Set to 'true' to enable the mouse wheel to scroll the zoom and pan control.
            This is set to 'false' by default.
            </summary>
        </member>
        <member name="E:Mygod.Windows.Controls.ZoomAndPanControl.ContentOffsetXChanged">
            <summary>
            Event raised when the ContentOffsetX property has changed.
            </summary>
        </member>
        <member name="E:Mygod.Windows.Controls.ZoomAndPanControl.ContentOffsetYChanged">
            <summary>
            Event raised when the ContentOffsetY property has changed.
            </summary>
        </member>
        <member name="E:Mygod.Windows.Controls.ZoomAndPanControl.ContentScaleChanged">
            <summary>
            Event raised when the ContentScale property has changed.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ZoomAndPanControl.CanVerticallyScroll">
            <summary>
            Set to 'true' when the vertical scrollbar is enabled.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ZoomAndPanControl.CanHorizontallyScroll">
            <summary>
            Set to 'true' when the vertical scrollbar is enabled.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ZoomAndPanControl.ExtentWidth">
            <summary>
            The width of the content (with 'ContentScale' applied).
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ZoomAndPanControl.ExtentHeight">
            <summary>
            The height of the content (with 'ContentScale' applied).
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ZoomAndPanControl.ViewportWidth">
            <summary>
            Get the width of the viewport onto the content.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ZoomAndPanControl.ViewportHeight">
            <summary>
            Get the height of the viewport onto the content.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ZoomAndPanControl.ScrollOwner">
            <summary>
            Reference to the ScrollViewer that is wrapped (in XAML) around the ZoomAndPanControl.
            Or set to null if there is no ScrollViewer.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ZoomAndPanControl.HorizontalOffset">
            <summary>
            The offset of the horizontal scrollbar.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Controls.ZoomAndPanControl.VerticalOffset">
            <summary>
            The offset of the vertical scrollbar.
            </summary>
        </member>
        <member name="M:Mygod.Windows.IconExtractor.#ctor(System.String)">
            <summary>
            Load the specified executable file or DLL, and get ready to extract the icons.
            </summary>
            <param name="filename">The name of a file from which icons will be extracted.</param>
        </member>
        <member name="M:Mygod.Windows.IconExtractor.GetIcon(System.Int32)">
            <summary>
            Extract an icon from the loaded executable file or DLL. 
            </summary>
            <param name="iconIndex">The zero-based index of the icon to be extracted.</param>
            <returns>A System.Drawing.Icon object which may consists of multiple icons.</returns>
            <remarks>Always returns new copy of the Icon. It should be disposed by the user.</remarks>
        </member>
        <member name="M:Mygod.Windows.IconExtractor.SplitIcon(System.Drawing.Icon)">
            <summary>
            Split an Icon consists of multiple icons into an array of Icon each consist of single icons.
            </summary>
            <param name="icon">The System.Drawing.Icon to be split.</param>
            <returns>An array of System.Drawing.Icon each consist of single icons.</returns>
        </member>
        <member name="T:Mygod.Windows.Dialogs.AnimationResource">
            <summary>
                Represents an animation for the <see cref="T:Mygod.Windows.Dialogs.ProgressDialog"/> loaded from a Win32 resource.
            </summary>
            <threadsafety instance="false" static="true"/>
        </member>
        <member name="M:Mygod.Windows.Dialogs.AnimationResource.#ctor(System.String,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.AnimationResource"/> class.
            </summary>
            <param name="resourceFile">The file containing the animation resource.</param>
            <param name="resourceId">The resource ID of the animation resource.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="resourceFile"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Mygod.Windows.Dialogs.AnimationResource.GetShellAnimation(Mygod.Windows.Dialogs.ShellAnimation)">
            <summary>
                Gets a default animation from shell32.dll.
            </summary>
            <param name="animation">The animation to get.</param>
            <returns>
                An instance of the <see cref="T:Mygod.Windows.Dialogs.AnimationResource"/> class representing the specified animation.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The <paramref name="animation"/> parameter was not a value defined in the
                <see cref="T:Mygod.Windows.Dialogs.ShellAnimation"/> enumeration.
            </exception>
        </member>
        <member name="P:Mygod.Windows.Dialogs.AnimationResource.ResourceFile">
            <summary>
                Gets the name of the file containing the animation resource.
            </summary>
            <value>
                The name of the file containing the animation resource. This is typically a DLL or EXE file.
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.AnimationResource.ResourceId">
            <summary>
                Gets the ID of the animation resource.
            </summary>
            <value>
                The ID of the animation resource.
            </value>
        </member>
        <member name="T:Mygod.Windows.Dialogs.CredentialDialog">
            <summary>
                Represents a dialog box that allows the user to enter generic credentials.
            </summary>
            <remarks>
                <para>
                    This class is meant for generic credentials; it does not provide access to all the functionality
                    of the Windows CredUI API. Features such as Windows domain credentials or alternative security
                    providers (e.g. smartcards or biometric devices) are not supported.
                </para>
                <para>
                    The <see cref="T:Mygod.Windows.Dialogs.CredentialDialog"/> class provides methods for storing and retrieving credentials,
                    and also manages automatic persistence of credentials by using the "Save password" checkbox on
                    the credentials dialog. To specify the target for which the credentials should be saved, set the
                    <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.Target"/> property.
                </para>
                <note>
                    This class requires Windows XP or later.
                </note>
            </remarks>
            <threadsafety instance="false" static="true"/>
        </member>
        <member name="M:Mygod.Windows.Dialogs.CredentialDialog.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.CredentialDialog"/> class.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.CredentialDialog.#ctor(System.ComponentModel.IContainer)">
            <summary>
                Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.CredentialDialog"/> class with the specified container.
            </summary>
            <param name="container">
                The <see cref="T:System.ComponentModel.IContainer"/> to add the component to.
            </param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.CredentialDialog.ShowDialog">
            <summary>
                Shows the credentials dialog as a modal dialog.
            </summary>
            <returns>
                <see langword="true"/> if the user clicked OK; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
                <para>
                    The credentials dialog will not be shown if one of the following conditions holds:
                </para>
                <list type="bullet">
                    <item>
                        <description>
                            <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.UseApplicationInstanceCredentialCache"/> is <see langword="true"/> and the application instance
                            credential cache contains credentials for the specified <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.Target"/>, even if
                            <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.ShowUIForSavedCredentials"/>
                            is <see langword="true"/>.
                        </description>
                    </item>
                    <item>
                        <description>
                            <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.ShowSaveCheckBox"/> is <see langword="true"/>, <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.ShowUIForSavedCredentials"/> is
                            <see langword="false"/>
                            , and the operating system credential store
                            for the current user contains credentials for the specified <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.Target"/>.
                        </description>
                    </item>
                </list>
                <para>
                    In these cases, the <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.Credentials"/>, <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.UserName"/> and <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.Password"/> properties will
                    be set to the saved credentials and this function returns immediately, returning <see langword="true"/>.
                </para>
                <para>
                    If the <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.ShowSaveCheckBox"/> property is <see langword="true"/>, you should call
                    <see cref="M:Mygod.Windows.Dialogs.CredentialDialog.ConfirmCredentials(System.Boolean)"/>
                    after validating if the provided credentials are correct.
                </para>
            </remarks>
            <exception cref="T:Mygod.Windows.Dialogs.CredentialException">An error occurred while showing the credentials dialog.</exception>
            <exception cref="T:System.InvalidOperationException">
                <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.Target"/> is an empty string ("").
            </exception>
        </member>
        <member name="M:Mygod.Windows.Dialogs.CredentialDialog.ShowDialog(System.Windows.Window)">
            <summary>
                Shows the credentials dialog as a modal dialog with the specified owner.
            </summary>
            <param name="owner">
                The <see cref="T:System.Windows.Window"/> that owns the credentials dialog.
            </param>
            <returns>
                <see langword="true"/> if the user clicked OK; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
                <para>
                    The credentials dialog will not be shown if one of the following conditions holds:
                </para>
                <list type="bullet">
                    <item>
                        <description>
                            <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.UseApplicationInstanceCredentialCache"/> is <see langword="true"/> and the application instance
                            credential cache contains credentials for the specified <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.Target"/>, even if
                            <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.ShowUIForSavedCredentials"/>
                            is <see langword="true"/>.
                        </description>
                    </item>
                    <item>
                        <description>
                            <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.ShowSaveCheckBox"/> is <see langword="true"/>, <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.ShowUIForSavedCredentials"/> is
                            <see langword="false"/>
                            , and the operating system credential store
                            for the current user contains credentials for the specified <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.Target"/>.
                        </description>
                    </item>
                </list>
                <para>
                    In these cases, the <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.Credentials"/>, <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.UserName"/> and <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.Password"/> properties will
                    be set to the saved credentials and this function returns immediately, returning <see langword="true"/>.
                </para>
                <para>
                    If the <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.ShowSaveCheckBox"/> property is <see langword="true"/>, you should call
                    <see cref="M:Mygod.Windows.Dialogs.CredentialDialog.ConfirmCredentials(System.Boolean)"/>
                    after validating if the provided credentials are correct.
                </para>
            </remarks>
            <exception cref="T:Mygod.Windows.Dialogs.CredentialException">An error occurred while showing the credentials dialog.</exception>
            <exception cref="T:System.InvalidOperationException">
                <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.Target"/> is an empty string ("").
            </exception>
        </member>
        <member name="M:Mygod.Windows.Dialogs.CredentialDialog.ConfirmCredentials(System.Boolean)">
            <summary>
                Confirms the validity of the credential provided by the user.
            </summary>
            <param name="confirm">
                <see langword="true"/> if the credentials that were specified on the dialog are valid; otherwise,
                <see langword="false"/>
                .
            </param>
            <remarks>
                Call this function after calling <see cref="M:Mygod.Windows.Dialogs.CredentialDialog.ShowDialog"/> when <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.ShowSaveCheckBox"/> is
                <see langword="true"/>
                .
                Only when this function is called with <paramref name="confirm"/> set to <see langword="true"/> will the credentials be
                saved in the credentials store and/or the application instance credential cache.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                <see cref="M:Mygod.Windows.Dialogs.CredentialDialog.ShowDialog"/> was not called, or the user did not click OK, or <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.ShowSaveCheckBox"/> was
                <see langword="false"/>
                at the call, or the value of <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.Target"/> or <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.IsSaveChecked"/>
                was changed after the call.
            </exception>
            <exception cref="T:Mygod.Windows.Dialogs.CredentialException">There was an error saving the credentials.</exception>
        </member>
        <member name="M:Mygod.Windows.Dialogs.CredentialDialog.StoreCredential(System.String,System.Net.NetworkCredential)">
            <summary>
                Stores the specified credentials in the operating system's credential store for the currently logged on user.
            </summary>
            <param name="target">The target name for the credentials.</param>
            <param name="credential">The credentials to store.</param>
            <exception cref="T:System.ArgumentNullException">
                <para>
                    <paramref name="target"/> is <see langword="null"/>.
                </para>
                <para>
                    -or-
                </para>
                <para>
                    <paramref name="credential"/> is <see langword="null"/>.
                </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="target"/> is an empty string ("").
            </exception>
            <exception cref="T:Mygod.Windows.Dialogs.CredentialException">An error occurred storing the credentials.</exception>
            <remarks>
                <note>
                    The <see cref="P:System.Net.NetworkCredential.Domain"/> property is ignored and will not be stored, even if it is
                    not <see langword="null"/>.
                </note>
                <para>
                    If the credential manager already contains credentials for the specified <paramref name="target"/>, they
                    will be overwritten; this can even overwrite credentials that were stored by another application. Therefore
                    it is strongly recommended that you prefix the target name to ensure uniqueness, e.g. using the
                    form "Company_ApplicationName_www.example.com".
                </para>
            </remarks>
        </member>
        <member name="M:Mygod.Windows.Dialogs.CredentialDialog.RetrieveCredential(System.String)">
            <summary>
                Retrieves credentials for the specified target from the operating system's credential store for the current user.
            </summary>
            <param name="target">The target name for the credentials.</param>
            <returns>
                The credentials if they were found; otherwise, <see langword="null"/>.
            </returns>
            <remarks>
                <para>
                    If the requested credential was not originally stored using the <see cref="T:Mygod.Windows.Dialogs.CredentialDialog"/> class (but e.g. by
                    another application), the password may not be decoded correctly.
                </para>
                <para>
                    This function does not check the application instance credential cache for the credentials; for that you can use
                    the <see cref="M:Mygod.Windows.Dialogs.CredentialDialog.RetrieveCredentialFromApplicationInstanceCache(System.String)"/> function.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="target"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="target"/> is an empty string ("").
            </exception>
            <exception cref="T:Mygod.Windows.Dialogs.CredentialException">An error occurred retrieving the credentials.</exception>
        </member>
        <member name="M:Mygod.Windows.Dialogs.CredentialDialog.RetrieveCredentialFromApplicationInstanceCache(System.String)">
            <summary>
                Tries to get the credentials for the specified target from the application instance credential cache.
            </summary>
            <param name="target">The target for the credentials, typically a server name.</param>
            <returns>
                The credentials that were found in the application instance cache; otherwise, <see langword="null"/>.
            </returns>
            <remarks>
                <para>
                    This function will only check the the application instance credential cache; the operating system's credential store
                    is not checked. To retrieve credentials from the operating system's store, use <see cref="M:Mygod.Windows.Dialogs.CredentialDialog.RetrieveCredential(System.String)"/>.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="target"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="target"/> is an empty string ("").
            </exception>
        </member>
        <member name="M:Mygod.Windows.Dialogs.CredentialDialog.DeleteCredential(System.String)">
            <summary>
                Deletes the credentials for the specified target.
            </summary>
            <param name="target">The name of the target for which to delete the credentials.</param>
            <returns>
                <see langword="true"/> if the credential was deleted from either the application instance cache or
                the operating system's store; <see langword="false"/> if no credentials for the specified target could be found
                in either store.
            </returns>
            <remarks>
                <para>
                    The credentials for the specified target will be removed from the application instance credential cache
                    and the operating system's credential store.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="target"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="target"/> is an empty string ("").
            </exception>
            <exception cref="T:Mygod.Windows.Dialogs.CredentialException">An error occurred deleting the credentials from the operating system's credential store.</exception>
        </member>
        <member name="M:Mygod.Windows.Dialogs.CredentialDialog.OnUserNameChanged(System.EventArgs)">
            <summary>
                Raises the <see cref="E:Mygod.Windows.Dialogs.CredentialDialog.UserNameChanged"/> event.
            </summary>
            <param name="e">
                The <see cref="T:System.EventArgs"/> containing data for the event.
            </param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.CredentialDialog.OnPasswordChanged(System.EventArgs)">
            <summary>
                Raises the <see cref="E:Mygod.Windows.Dialogs.CredentialDialog.PasswordChanged"/> event.
            </summary>
            <param name="e">
                The <see cref="T:System.EventArgs"/> containing data for the event.
            </param>
        </member>
        <member name="F:Mygod.Windows.Dialogs.CredentialDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.CredentialDialog.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing"><see langword="true"/> if managed resources should be disposed; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.CredentialDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.CredentialDialog.UseApplicationInstanceCredentialCache">
            <summary>
                Gets or sets whether to use the application instance credential cache.
            </summary>
            <value>
                <see langword="true"/> when credentials are saved in the application instance cache; <see langref="false"/> if they are not.
                The default value is <see langword="false"/>.
            </value>
            <remarks>
                <para>
                    The application instance credential cache stores credentials in memory while an application is running. When the
                    application exits, this cache is not persisted.
                </para>
                <para>
                    When the <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.UseApplicationInstanceCredentialCache"/> property is set to <see langword="true"/>, credentials that
                    are confirmed with <see cref="M:Mygod.Windows.Dialogs.CredentialDialog.ConfirmCredentials(System.Boolean)"/> when the user checked the "save password" option will be stored
                    in the application instance cache as well as the operating system credential store.
                </para>
                <para>
                    When <see cref="M:Mygod.Windows.Dialogs.CredentialDialog.ShowDialog"/> is called, and credentials for the specified <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.Target"/> are already present in
                    the application instance cache, the dialog will not be shown and the cached credentials are returned, even if
                    <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.ShowUIForSavedCredentials"/> is <see langword="true"/>.
                </para>
                <para>
                    The application instance credential cache allows you to prevent prompting the user again for the lifetime of the
                    application if the "save password" checkbox was checked, but when the application is restarted you can prompt again
                    (initializing the dialog with the saved credentials). To get this behaviour, the
                    <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.ShowUIForSavedCredentials"/>
                    property must be set to <see langword="true"/>.
                </para>
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.CredentialDialog.IsSaveChecked">
            <summary>
                Gets or sets whether the "save password" checkbox is checked.
            </summary>
            <value>
                <see langword="true" /> if the "save password" is checked; otherwise, <see langword="false" />.
                The default value is <see langword="false" />.
            </value>
            <remarks>
                The value of this property is only valid if the dialog box is displayed with a save checkbox.
                Set this property before showing the dialog to determine the initial checked value of the save checkbox.
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.CredentialDialog.Password">
            <summary>
                Gets the password the user entered in the dialog.
            </summary>
            <value>
                The password entered in the password field of the credentials dialog.
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.CredentialDialog.Credentials">
            <summary>
                Gets the user-specified user name and password in a <see cref="T:System.Net.NetworkCredential"/> object.
            </summary>
            <value>
                A <see cref="T:System.Net.NetworkCredential"/> instance containing the user name and password specified on the dialog.
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.CredentialDialog.UserName">
            <summary>
                Gets the user name the user entered in the dialog.
            </summary>
            <value>
                The user name entered in the user name field of the credentials dialog.
                The default value is an empty string ("").
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.CredentialDialog.Target">
            <summary>
                Gets or sets the target for the credentials, typically a server name.
            </summary>
            <value>
                The target for the credentials. The default value is an empty string ("").
            </value>
            <remarks>
                Credentials are stored on a per user, not on a per application basis. To ensure that credentials stored by different
                applications do not conflict, you should prefix the target with an application-specific identifer, e.g.
                "Company_Application_target".
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.CredentialDialog.WindowTitle">
            <summary>
                Gets or sets the title of the credentials dialog.
            </summary>
            <value>
                The title of the credentials dialog. The default value is an empty string ("").
            </value>
            <remarks>
                <para>
                    This property is not used on Windows Vista and newer versions of windows; the window title will always be "Windows Security"
                    in that case.
                </para>
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.CredentialDialog.MainInstruction">
            <summary>
                Gets or sets a brief message to display in the dialog box.
            </summary>
            <value>
                A brief message that will be displayed in the dialog box. The default value is an empty string ("").
            </value>
            <remarks>
                <para>
                    On Windows Vista and newer versions of Windows, this text is displayed using a different style to set it apart
                    from the other text. In the default style, this text is a slightly larger and colored blue. The style is identical
                    to the main instruction of a task dialog.
                </para>
                <para>
                    On Windows XP, this text is not distinguished from other text. It's display mode depends on the
                    <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.DownlevelTextMode"/>
                    property.
                </para>
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.CredentialDialog.Content">
            <summary>
                Gets or sets additional text to display in the dialog.
            </summary>
            <value>
                Additional text to display in the dialog. The default value is an empty string ("").
            </value>
            <remarks>
                <para>
                    On Windows Vista and newer versions of Windows, this text is placed below the <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.MainInstruction"/> text.
                </para>
                <para>
                    On Windows XP, how and if this text is displayed depends on the value of the <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.DownlevelTextMode"/>
                    property.
                </para>
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.CredentialDialog.DownlevelTextMode">
            <summary>
                Gets or sets a value that indicates how the text of the <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.MainInstruction"/> and <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.Content"/> properties
                is displayed on Windows XP.
            </summary>
            <value>
                One of the values of the <see cref="T:Mygod.Windows.Dialogs.DownlevelTextMode"/> enumeration. The default value is
                <see cref="F:Mygod.Windows.Dialogs.DownlevelTextMode.MainInstructionAndContent"/>.
            </value>
            <remarks>
                <para>
                    Windows XP does not support the distinct visual style of the main instruction, so there is no visual difference between the
                    text of the <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.MainInstruction"/> and <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.Content"/> properties. Depending
                    on your requirements, you may wish to hide either the main instruction or the content text.
                </para>
                <para>
                    This property has no effect on Windows Vista and newer versions of Windows.
                </para>
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.CredentialDialog.ShowSaveCheckBox">
            <summary>
                Gets or sets a value that indicates whether a check box is shown on the dialog that allows the user to choose whether to save
                the credentials or not.
            </summary>
            <value>
                <see langword="true"/> when the "save password" checkbox is shown on the credentials dialog; otherwise,
                <see langword="false"/>
                .
                The default value is <see langword="false"/>.
            </value>
            <remarks>
                When this property is set to <see langword="true"/>, you must call the <see cref="M:Mygod.Windows.Dialogs.CredentialDialog.ConfirmCredentials(System.Boolean)"/> method to save the
                credentials. When this property is set to <see langword="false"/>, the credentials will never be saved, and you should not call
                the <see cref="M:Mygod.Windows.Dialogs.CredentialDialog.ConfirmCredentials(System.Boolean)"/> method.
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.CredentialDialog.ShowUIForSavedCredentials">
            <summary>
                Gets or sets a value that indicates whether the dialog should be displayed even when saved credentials exist for the
                specified target.
            </summary>
            <value>
                <see langword="true"/> if the dialog is displayed even when saved credentials exist; otherwise,
                <see langword="false"/>
                .
                The default value is <see langword="false"/>.
            </value>
            <remarks>
                <para>
                    This property applies only when the <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.ShowSaveCheckBox"/> property is <see langword="true"/>.
                </para>
                <para>
                    Note that even if this property is <see langword="true"/>, if the proper credentials exist in the
                    application instance credentials cache the dialog will not be displayed.
                </para>
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.CredentialDialog.IsStoredCredential">
            <summary>
                Gets a value that indicates whether the current credentials were retrieved from a credential store.
            </summary>
            <value>
                <see langword="true"/> if the current credentials returned by the <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.UserName"/>, <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.Password"/>,
                and <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.Credentials"/> properties were retrieved from either the application instance credential cache
                or the operating system's credential store; otherwise, <see langword="false"/>.
            </value>
            <remarks>
                <para>
                    You can use this property to determine if the credentials dialog was shown after a call to
                    <see cref="M:Mygod.Windows.Dialogs.CredentialDialog.ShowDialog"/>
                    .
                    If the dialog was shown, this property will be <see langword="false"/>; if the credentials were retrieved from the
                    application instance cache or the credential store and the dialog was not shown it will be <see langword="true"/>.
                </para>
                <para>
                    If the <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.ShowUIForSavedCredentials"/> property is set to <see langword="true"/>, and the dialog is shown
                    but populated with stored credentials, this property will still return <see langword="false"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Mygod.Windows.Dialogs.CredentialDialog.UserNameChanged">
            <summary>
                Event raised when the <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.UserName"/> property changes.
            </summary>
        </member>
        <member name="E:Mygod.Windows.Dialogs.CredentialDialog.PasswordChanged">
            <summary>
                Event raised when the <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.Password"/> property changes.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.CredentialException">
            <summary>
                The exception that is thrown when an error occurs getting credentials.
            </summary>
            <threadsafety instance="false" static="true" />
        </member>
        <member name="M:Mygod.Windows.Dialogs.CredentialException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.CredentialException"/> class.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.CredentialException.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.CredentialException"/> class with the specified error.
            </summary>
            <param name="error">The Win32 error code associated with this exception.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.CredentialException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.CredentialException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.CredentialException.#ctor(System.Int32,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.CredentialException"/> class with the specified error and the specified detailed description.
            </summary>
            <param name="error">The Win32 error code associated with this exception.</param>
            <param name="message">A detailed description of the error.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.CredentialException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.CredentialException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">A reference to the inner exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.CredentialException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.CredentialException"/> class with serialized data.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Mygod.Windows.Dialogs.DownlevelTextMode">
            <summary>
                An enumeration that displays how the text in the <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.MainInstruction"/> and
                <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.Content"/>
                properties is displayed on a credential dialog in Windows XP.
            </summary>
            <remarks>
                <para>
                    Windows XP does not support the distinct visual style of the main instruction, so there is no visual difference between the
                    text of the <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.MainInstruction"/> and <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.Content"/> properties. Depending
                    on the scenario, you may wish to hide either the main instruction or the content text.
                </para>
            </remarks>
        </member>
        <member name="F:Mygod.Windows.Dialogs.DownlevelTextMode.MainInstructionAndContent">
            <summary>
                The text of the <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.MainInstruction"/> and <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.Content"/> properties is
                concatenated together, separated by an empty line.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.DownlevelTextMode.MainInstructionOnly">
            <summary>
                Only the text of the <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.MainInstruction"/> property is shown.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.DownlevelTextMode.ContentOnly">
            <summary>
                Only the text of the <see cref="P:Mygod.Windows.Dialogs.CredentialDialog.Content"/> property is shown.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.FileDialog">
            <summary>
                Displays a dialog box from which the user can select a file.
            </summary>
            <remarks>
                <para>
                    Windows Vista provides a new style of common file dialog, with several new features (both from
                    the user's and the programmers perspective).
                </para>
                <para>
                    This class and derived classes will use the Vista-style file dialogs if possible, and automatically fall back to the old-style
                    dialog on versions of Windows older than Vista. This class is aimed at applications that
                    target both Windows Vista and older versions of Windows, and therefore does not provide any
                    of the new APIs provided by Vista's file dialogs.
                </para>
                <para>
                    This class precisely duplicates the public interface of <see cref="T:Microsoft.Win32.FileDialog"/> so you can just replace
                    any instances of <see cref="T:Microsoft.Win32.FileDialog"/> with the <see cref="T:Mygod.Windows.Dialogs.FileDialog"/> without any further changes
                    to your code.
                </para>
            </remarks>
            <threadsafety instance="false" static="true"/>
        </member>
        <member name="M:Mygod.Windows.Dialogs.FileDialog.#ctor">
            <summary>
                Creates a new instance of <see cref="T:Mygod.Windows.Dialogs.FileDialog"/> class.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.FileDialog.Reset">
            <summary>
                Resets all properties to their default values.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.FileDialog.ShowDialog">
            <summary>
                Displays the file dialog.
            </summary>
            <returns>
                If the user clicks the OK button of the dialog that is displayed (e.g. <see cref="T:Mygod.Windows.Dialogs.OpenFileDialog"/>,
                <see cref="T:Mygod.Windows.Dialogs.SaveFileDialog"/>
                ), <see langword="true"/> is returned; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.FileDialog.ShowDialog(System.Windows.Window)">
            <summary>
                Displays the file dialog.
            </summary>
            <param name="owner">Handle to the window that owns the dialog.</param>
            <returns>
                If the user clicks the OK button of the dialog that is displayed (e.g. <see cref="T:Mygod.Windows.Dialogs.OpenFileDialog"/>,
                <see cref="T:Mygod.Windows.Dialogs.SaveFileDialog"/>
                ), <see langword="true"/> is returned; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Mygod.Windows.Dialogs.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)">
            <summary>
                Raises the <see cref="E:Mygod.Windows.Dialogs.FileDialog.FileOk"/> event.
            </summary>
            <param name="e">
                A <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event data.
            </param>
        </member>
        <member name="P:Mygod.Windows.Dialogs.FileDialog.IsVistaFileDialogSupported">
            <summary>
                Gets a value that indicates whether the current OS supports Vista-style common file dialogs.
            </summary>
            <value>
                <see langword="true"/> if Vista-style common file dialgs are supported; otherwise, <see langword="false"/>.
            </value>
            <remarks>
                <para>
                    Returns <see langword="true"/> on Windows Vista or newer operating systems.
                </para>
                <para>
                    If this property returns <see langword="false"/>, the <see cref="T:Mygod.Windows.Dialogs.FileDialog"/> class (and
                    its derived classes) will fall back to the regular file dialog.
                </para>
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.FileDialog.AddExtension">
            <summary>
                Gets or sets a value indicating whether the dialog box automatically adds an extension to a file name
                if the user omits the extension.
            </summary>
            <value>
                <see langword="true" /> if the dialog box adds an extension to a file name if the user omits the extension; otherwise,
                <see
                    langword="false" />
                .
                The default value is <see langword="true" />.
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.FileDialog.CheckFileExists">
            <summary>
                Gets or sets a value indicating whether the dialog box displays a warning if the user specifies a file name that does not exist.
            </summary>
            <value>
                <see langword="true" /> if the dialog box displays a warning if the user specifies a file name that does not exist;
                otherwise, <see langword="false" />. The default value is <see langword="false" />.
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.FileDialog.CheckPathExists">
            <summary>
                Gets or sets a value indicating whether the dialog box displays a warning if the user specifies a path that does not exist.
            </summary>
            <value>
                <see langword="true" /> if the dialog box displays a warning when the user specifies a path that does not exist; otherwise,
                <see
                    langword="false" />
                .
                The default value is <see langword="true" />.
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.FileDialog.DefaultExt">
            <summary>
                Gets or sets the default file name extension.
            </summary>
            <value>
                The default file name extension. The returned string does not include the period. The default value is an empty string ("").
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.FileDialog.DereferenceLinks">
            <summary>
                Gets or sets a value indicating whether the dialog box returns the location of the file referenced by the shortcut
                or whether it returns the location of the shortcut (.lnk).
            </summary>
            <value>
                <see langword="true" /> if the dialog box returns the location of the file referenced by the shortcut; otherwise,
                <see
                    langword="false" />
                .
                The default value is <see langword="true" />.
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.FileDialog.FileName">
            <summary>
                Gets or sets a string containing the file name selected in the file dialog box.
            </summary>
            <value>
                The file name selected in the file dialog box. The default value is an empty string ("").
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.FileDialog.FileNames">
            <summary>
                Gets the file names of all selected files in the dialog box.
            </summary>
            <value>
                An array of type <see cref="T:System.String"/>, containing the file names of all selected files in the dialog box.
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.FileDialog.Filter">
            <summary>
                Gets or sets the current file name filter string, which determines the choices that appear in the
                "Save as file type" or "Files of type" box in the dialog box.
            </summary>
            <value>
                The file filtering options available in the dialog box.
            </value>
            <exception cref="T:System.ArgumentException">Filter format is invalid.</exception>
        </member>
        <member name="P:Mygod.Windows.Dialogs.FileDialog.FilterIndex">
            <summary>
                Gets or sets the index of the filter currently selected in the file dialog box.
            </summary>
            <value>
                A value containing the index of the filter currently selected in the file dialog box. The default value is 1.
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.FileDialog.InitialDirectory">
            <summary>
                Gets or sets the initial directory displayed by the file dialog box.
            </summary>
            <value>
                The initial directory displayed by the file dialog box. The default is an empty string ("").
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.FileDialog.RestoreDirectory">
            <summary>
                Gets or sets a value indicating whether the dialog box restores the current directory before closing.
            </summary>
            <value>
                <see langword="true" /> if the dialog box restores the current directory to its original value if the user changed the
                directory while searching for files; otherwise, <see langword="false" />. The default value is
                <see
                    langword="false" />
                .
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.FileDialog.Title">
            <summary>
                Gets or sets the file dialog box title.
            </summary>
            <value>
                The file dialog box title. The default value is an empty string ("").
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.FileDialog.ValidateNames">
            <summary>
                Gets or sets a value indicating whether the dialog box accepts only valid Win32 file names.
            </summary>
            <value>
                <see langword="true" /> if the dialog box accepts only valid Win32 file names; otherwise, <see langword="false" />. The default value is
                <see
                    langword="false" />
                .
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.FileDialog.DownlevelDialog">
            <summary>
                Gets or sets the downlevel file dialog which is to be used if the Vista-style
                dialog is not supported.
            </summary>
            <value>
                The regular <see cref="T:Microsoft.Win32.FileDialog"/> that is used when the Vista-style file dialog
                is not supported.
            </value>
            <remarks>
                This property is set by classes that derive from <see cref="T:Mygod.Windows.Dialogs.FileDialog"/>.
            </remarks>
        </member>
        <member name="E:Mygod.Windows.Dialogs.FileDialog.FileOk">
            <summary>
                Event raised when the user clicks on the Open or Save button on a file dialog box.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.FolderBrowserDialog">
            <summary>
                Prompts the user to select a folder.
            </summary>
            <remarks>
                This class will use the Vista style Select Folder dialog if possible, or the regular FolderBrowserDialog
                if it is not. Note that the Vista style dialog is very different, so using this class without testing
                in both Vista and older Windows versions is not recommended.
            </remarks>
            <threadsafety instance="false" static="true" />
        </member>
        <member name="M:Mygod.Windows.Dialogs.FolderBrowserDialog.#ctor">
            <summary>
                Creates a new instance of the <see cref="T:Mygod.Windows.Dialogs.FolderBrowserDialog"/> class.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.FolderBrowserDialog.Reset">
            <summary>
                Resets all properties to their default values.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.FolderBrowserDialog.ShowDialog(System.Windows.Window)">
            <summary>
                Displays the folder browser dialog.
            </summary>
            <param name="owner">Handle to the window that owns the dialog.</param>
            <returns>
                If the user clicks the OK button, <see langword="true" /> is returned; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="P:Mygod.Windows.Dialogs.FolderBrowserDialog.IsVistaFolderDialogSupported">
            <summary>
                Gets a value that indicates whether the current OS supports Vista-style common file dialogs.
            </summary>
            <value>
                <see langword="true" /> on Windows Vista or newer operating systems; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.FolderBrowserDialog.Description">
            <summary>
                Gets or sets the descriptive text displayed above the tree view control in the dialog box, or below the list view control
                in the Vista style dialog.
            </summary>
            <value>
                The description to display. The default is an empty string ("").
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.FolderBrowserDialog.RootFolder">
            <summary>
                Gets or sets the root folder where the browsing starts from. This property has no effect if the Vista style
                dialog is used.
            </summary>
            <value>
                One of the <see cref="T:System.Environment.SpecialFolder"/> values. The default is Desktop.
            </value>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
                The value assigned is not one of the <see cref="T:System.Environment.SpecialFolder"/> values.
            </exception>
        </member>
        <member name="P:Mygod.Windows.Dialogs.FolderBrowserDialog.SelectedPath">
            <summary>
                Gets or sets the path selected by the user.
            </summary>
            <value>
                The path of the folder first selected in the dialog box or the last folder selected by the user. The default is an empty string ("").
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.FolderBrowserDialog.ShowNewFolderButton">
            <summary>
                Gets or sets a value indicating whether the New Folder button appears in the folder browser dialog box. This
                property has no effect if the Vista style dialog is used; in that case, the New Folder button is always shown.
            </summary>
            <value>
                <see langword="true" /> if the New Folder button is shown in the dialog box; otherwise, <see langword="false" />. The default is
                <see
                    langword="true" />
                .
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.FolderBrowserDialog.UseDescriptionForTitle">
            <summary>
                Gets or sets a value that indicates whether to use the value of the <see cref="P:Mygod.Windows.Dialogs.FolderBrowserDialog.Description"/> property
                as the dialog title for Vista style dialogs. This property has no effect on old style dialogs.
            </summary>
            <value>
                <see langword="true"/> to indicate that the value of the <see cref="P:Mygod.Windows.Dialogs.FolderBrowserDialog.Description"/> property is used as dialog title;
                <see langword="false"/>
                to indicate the value is added as additional text to the dialog. The default is <see langword="false"/>.
            </value>
        </member>
        <member name="T:Mygod.Windows.Dialogs.OpenFileDialog">
            <summary>
                Prompts the user to open a file.
            </summary>
            <remarks>
                <para>
                    Windows Vista provides a new style of common file dialog, with several new features (both from
                    the user's and the programmers perspective).
                </para>
                <para>
                    This class will use the Vista-style file dialogs if possible, and automatically fall back to the old-style
                    dialog on versions of Windows older than Vista. This class is aimed at applications that
                    target both Windows Vista and older versions of Windows, and therefore does not provide any
                    of the new APIs provided by Vista's file dialogs.
                </para>
                <para>
                    This class precisely duplicates the public interface of <see cref="T:Microsoft.Win32.OpenFileDialog"/> so you can just replace
                    any instances of <see cref="T:Microsoft.Win32.OpenFileDialog"/> with the <see cref="T:Mygod.Windows.Dialogs.OpenFileDialog"/> without any further changes
                    to your code.
                </para>
            </remarks>
            <threadsafety instance="false" static="true"/>
        </member>
        <member name="M:Mygod.Windows.Dialogs.OpenFileDialog.#ctor">
            <summary>
                Creates a new instance of <see cref="T:Mygod.Windows.Dialogs.OpenFileDialog"/> class.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.OpenFileDialog.Reset">
            <summary>
                Resets all properties to their default values.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.OpenFileDialog.OpenFile">
            <summary>
                Opens the file selected by the user, with read-only permission. The file is specified by the FileName property.
            </summary>
            <returns>A Stream that specifies the read-only file selected by the user.</returns>
            <exception cref="T:System.ArgumentNullException">
                The file name is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Mygod.Windows.Dialogs.OpenFileDialog.CheckFileExists">
            <summary>
                Gets or sets a value indicating whether the dialog box displays a warning if the user specifies a file name that does not exist.
            </summary>
            <value>
                <see langword="true" /> if the dialog box displays a warning if the user specifies a file name that does not exist; otherwise,
                <see
                    langword="false" />
                . The default value is <see langword="true" />.
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.OpenFileDialog.Multiselect">
            <summary>
                Gets or sets a value indicating whether the dialog box allows multiple files to be selected.
            </summary>
            <value>
                <see langword="true" /> if the dialog box allows multiple files to be selected together or concurrently; otherwise,
                <see
                    langword="false" />
                .
                The default value is <see langword="false" />.
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.OpenFileDialog.ShowReadOnly">
            <summary>
                Gets or sets a value indicating whether the dialog box contains a read-only check box.
            </summary>
            <value>
                <see langword="true" /> if the dialog box contains a read-only check box; otherwise, <see langword="false" />. The default value is
                <see
                    langword="false" />
                .
            </value>
            <remarks>
                If the Vista style dialog is used, this property can only be used to determine whether the user chose
                Open as read-only on the dialog; setting it in code will have no effect.
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.OpenFileDialog.ReadOnlyChecked">
            <summary>
                Gets or sets a value indicating whether the read-only check box is selected.
            </summary>
            <value>
                <see langword="true" /> if the read-only check box is selected; otherwise, <see langword="false" />. The default value is
                <see
                    langword="false" />
                .
            </value>
        </member>
        <member name="T:Mygod.Windows.Dialogs.ProgressBarStyle">
            <summary>
                Indicates the type of progress on a task dialog.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.ProgressBarStyle.None">
            <summary>
                No progress bar is displayed on the dialog.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.ProgressBarStyle.ProgressBar">
            <summary>
                A regular progress bar is displayed on the dialog.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.ProgressBarStyle.MarqueeProgressBar">
            <summary>
                A marquee progress bar is displayed on the dialog. Use this value for operations
                that cannot report concrete progress information.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.ProgressDialog">
            <summary>
                Represents a dialog that can be used to report progress to the user.
            </summary>
            <remarks>
                <para>
                    This class provides a wrapper for the native Windows IProgressDialog API.
                </para>
                <para>
                    The <see cref="T:Mygod.Windows.Dialogs.ProgressDialog"/> class requires Windows 2000, Windows Me, or newer versions of Windows.
                </para>
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ProgressDialog.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.ProgressDialog"/> class.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ProgressDialog.#ctor(System.ComponentModel.IContainer)">
            <summary>
                Initializes a new instance of the <see cref="T:Mygod.Windows.Dialogs.ProgressDialog"/> class, adding it to the specified container.
            </summary>
            <param name="container">
                The <see cref="T:System.ComponentModel.IContainer"/> to which the component should be added.
            </param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ProgressDialog.Show">
            <summary>
                Displays the progress dialog as a modeless dialog.
            </summary>
            <remarks>
                <para>
                    This function will not block the parent window and will return immediately.
                </para>
                <para>
                    Although this function returns immediately, you cannot use the UI thread to do any processing. The dialog
                    will not function correctly unless the UI thread continues to handle window messages, so that thread may
                    not be blocked by some other activity. All processing related to the progress dialog must be done in
                    the <see cref="E:Mygod.Windows.Dialogs.ProgressDialog.DoWork"/> event handler.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                The animation specified in the <see cref="P:Mygod.Windows.Dialogs.ProgressDialog.Animation"/> property
                could not be loaded.
            </exception>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ProgressDialog.Show(System.Object)">
            <summary>
                Displays the progress dialog as a modeless dialog.
            </summary>
            <param name="argument">
                A parameter for use by the background operation to be executed in the <see cref="E:Mygod.Windows.Dialogs.ProgressDialog.DoWork"/> event handler.
            </param>
            <remarks>
                <para>
                    This function will not block the parent window and return immediately.
                </para>
                <para>
                    Although this function returns immediately, you cannot use the UI thread to do any processing. The dialog
                    will not function correctly unless the UI thread continues to handle window messages, so that thread may
                    not be blocked by some other activity. All processing related to the progress dialog must be done in
                    the <see cref="E:Mygod.Windows.Dialogs.ProgressDialog.DoWork"/> event handler.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                The animation specified in the <see cref="P:Mygod.Windows.Dialogs.ProgressDialog.Animation"/> property
                could not be loaded.
            </exception>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ProgressDialog.ShowDialog(System.Windows.Window,System.Object)">
            <summary>
                Displays the progress dialog as a modal dialog.
            </summary>
            <param name="owner">The window that owns the dialog.</param>
            <param name="argument">
                A parameter for use by the background operation to be executed in the <see cref="E:Mygod.Windows.Dialogs.ProgressDialog.DoWork"/> event handler.
            </param>
            <remarks>
                <para>
                    The ShowDialog function for most .Net dialogs will not return until the dialog is closed. However,
                    the <see cref="M:Mygod.Windows.Dialogs.ProgressDialog.ShowDialog(System.Windows.Window,System.Object)"/> function for the <see cref="T:Mygod.Windows.Dialogs.ProgressDialog"/> class will return immediately.
                    The parent window will be disabled as with all modal dialogs.
                </para>
                <para>
                    Although this function returns immediately, you cannot use the UI thread to do any processing. The dialog
                    will not function correctly unless the UI thread continues to handle window messages, so that thread may
                    not be blocked by some other activity. All processing related to the progress dialog must be done in
                    the <see cref="E:Mygod.Windows.Dialogs.ProgressDialog.DoWork"/> event handler.
                </para>
                <para>
                    The progress dialog's window will appear in the taskbar. This behaviour is also contrary to most .Net dialogs,
                    but is part of the underlying native progress dialog API so cannot be avoided.
                </para>
                <para>
                    When possible, it is recommended that you use a modeless dialog using the <see cref="M:Mygod.Windows.Dialogs.ProgressDialog.Show"/> function.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                The animation specified in the <see cref="P:Mygod.Windows.Dialogs.ProgressDialog.Animation"/> property
                could not be loaded, or the operation is already running.
            </exception>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ProgressDialog.ReportProgress(System.Int32)">
            <summary>
                Updates the dialog's progress bar.
            </summary>
            <param name="percentProgress">The percentage, from 0 to 100, of the operation that is complete.</param>
            <remarks>
                <para>
                    Call this method from the <see cref="E:Mygod.Windows.Dialogs.ProgressDialog.DoWork"/> event handler if you want to report progress.
                </para>
                <para>
                    This method has no effect is <see cref="P:Mygod.Windows.Dialogs.ProgressDialog.ProgressBarStyle"/> is
                    <see cref="F:Mygod.Windows.Dialogs.ProgressBarStyle.MarqueeProgressBar"/>
                    or <see cref="F:Mygod.Windows.Dialogs.ProgressBarStyle.None"/>.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="percentProgress"/> is out of range.
            </exception>
            <exception cref="T:System.InvalidOperationException">The progress dialog is not currently being displayed.</exception>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ProgressDialog.ReportProgress(System.Int32,System.String,System.String)">
            <summary>
                Updates the dialog's progress bar.
            </summary>
            <param name="percentProgress">The percentage, from 0 to 100, of the operation that is complete.</param>
            <param name="text">
                The new value of the progress dialog's primary text message, or <see langword="null"/> to leave the value unchanged.
            </param>
            <param name="description">
                The new value of the progress dialog's additional description message, or <see langword="null"/> to leave the value unchanged.
            </param>
            <remarks>
                Call this method from the <see cref="E:Mygod.Windows.Dialogs.ProgressDialog.DoWork"/> event handler if you want to report progress.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="percentProgress"/> is out of range.
            </exception>
            <exception cref="T:System.InvalidOperationException">The progress dialog is not currently being displayed.</exception>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ProgressDialog.ReportProgress(System.Int32,System.String,System.String,System.Object)">
            <summary>
                Updates the dialog's progress bar.
            </summary>
            <param name="percentProgress">The percentage, from 0 to 100, of the operation that is complete.</param>
            <param name="text">
                The new value of the progress dialog's primary text message, or <see langword="null"/> to leave the value unchanged.
            </param>
            <param name="description">
                The new value of the progress dialog's additional description message, or <see langword="null"/> to leave the value unchanged.
            </param>
            <param name="userState">
                A state object that will be passed to the <see cref="E:Mygod.Windows.Dialogs.ProgressDialog.ProgressChanged"/> event handler.
            </param>
            <remarks>
                Call this method from the <see cref="E:Mygod.Windows.Dialogs.ProgressDialog.DoWork"/> event handler if you want to report progress.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="percentProgress"/> is out of range.
            </exception>
            <exception cref="T:System.InvalidOperationException">The progress dialog is not currently being displayed.</exception>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ProgressDialog.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
            <summary>
                Raises the <see cref="E:Mygod.Windows.Dialogs.ProgressDialog.DoWork"/> event.
            </summary>
            <param name="e">
                The <see cref="T:System.ComponentModel.DoWorkEventArgs"/> containing data for the event.
            </param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ProgressDialog.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
                Raises the <see cref="E:Mygod.Windows.Dialogs.ProgressDialog.RunWorkerCompleted"/> event.
            </summary>
            <param name="e">
                The <see cref="T:System.EventArgs"/> containing data for the event.
            </param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ProgressDialog.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
                Raises the <see cref="E:Mygod.Windows.Dialogs.ProgressDialog.ProgressChanged"/> event.
            </summary>
            <param name="e">
                The <see cref="T:System.ComponentModel.ProgressChangedEventArgs"/> containing data for the event.
            </param>
        </member>
        <member name="F:Mygod.Windows.Dialogs.ProgressDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ProgressDialog.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing"><see langword="true" /> if managed resources should be disposed; otherwise, <see langword="false" />.</param>
        </member>
        <member name="M:Mygod.Windows.Dialogs.ProgressDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Mygod.Windows.Dialogs.ProgressDialog.WindowTitle">
            <summary>
                Gets or sets the text in the progress dialog's title bar.
            </summary>
            <value>
                The text in the progress dialog's title bar. The default value is an empty string.
            </value>
            <remarks>
                <para>
                    This property must be set before <see cref="!:ShowDialog()"/> or <see cref="M:Mygod.Windows.Dialogs.ProgressDialog.Show"/> is called. Changing property has
                    no effect while the dialog is being displayed.
                </para>
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.ProgressDialog.Text">
            <summary>
                Gets or sets a short description of the operation being carried out.
            </summary>
            <value>
                A short description of the operation being carried. The default value is an empty string.
            </value>
            <remarks>
                <para>
                    This is the primary message to the user.
                </para>
                <para>
                    This property can be changed while the dialog is running, but may only be changed from the thread which
                    created the progress dialog. The recommended method to change this value while the dialog is running
                    is to use the <see cref="M:Mygod.Windows.Dialogs.ProgressDialog.ReportProgress(System.Int32,System.String,System.String)"/> method.
                </para>
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.ProgressDialog.UseCompactPathsForText">
            <summary>
                Gets or sets a value that indicates whether path strings in the <see cref="P:Mygod.Windows.Dialogs.ProgressDialog.Text"/> property should be compacted if
                they are too large to fit on one line.
            </summary>
            <value>
                <see langword="true"/> to compact path strings if they are too large to fit on one line; otherwise,
                <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
            <remarks>
                <note>
                    This property requires Windows Vista or later. On older versions of Windows, it has no effect.
                </note>
                <para>
                    This property can be changed while the dialog is running, but may only be changed from the thread which
                    created the progress dialog.
                </para>
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.ProgressDialog.Description">
            <summary>
                Gets or sets additional details about the operation being carried out.
            </summary>
            <value>
                Additional details about the operation being carried out. The default value is an empty string.
            </value>
            <remarks>
                This text is used to provide additional details beyond the <see cref="P:Mygod.Windows.Dialogs.ProgressDialog.Text"/> property.
            </remarks>
            <remarks>
                <para>
                    This property can be changed while the dialog is running, but may only be changed from the thread which
                    created the progress dialog. The recommended method to change this value while the dialog is running
                    is to use the <see cref="M:Mygod.Windows.Dialogs.ProgressDialog.ReportProgress(System.Int32,System.String,System.String)"/> method.
                </para>
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.ProgressDialog.UseCompactPathsForDescription">
            <summary>
                Gets or sets a value that indicates whether path strings in the <see cref="P:Mygod.Windows.Dialogs.ProgressDialog.Description"/> property should be compacted if
                they are too large to fit on one line.
            </summary>
            <value>
                <see langword="true"/> to compact path strings if they are too large to fit on one line; otherwise,
                <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
            <remarks>
                <note>
                    This property requires Windows Vista or later. On older versions of Windows, it has no effect.
                </note>
                <para>
                    This property can be changed while the dialog is running, but may only be changed from the thread which
                    created the progress dialog.
                </para>
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.ProgressDialog.CancellationText">
            <summary>
                Gets or sets the text that will be shown after the Cancel button is pressed.
            </summary>
            <value>
                The text that will be shown after the Cancel button is pressed.
            </value>
            <remarks>
                <para>
                    This property must be set before <see cref="!:ShowDialog()"/> or <see cref="M:Mygod.Windows.Dialogs.ProgressDialog.Show"/> is called. Changing property has
                    no effect while the dialog is being displayed.
                </para>
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.ProgressDialog.ShowTimeRemaining">
            <summary>
                Gets or sets a value that indicates whether an estimate of the remaining time will be shown.
            </summary>
            <value>
                <see langword="true"/> if an estimate of remaining time will be shown; otherwise, <see langword="false"/>. The
                default value is <see langword="false"/>.
            </value>
            <remarks>
                <para>
                    This property must be set before <see cref="!:ShowDialog()"/> or <see cref="M:Mygod.Windows.Dialogs.ProgressDialog.Show"/> is called. Changing property has
                    no effect while the dialog is being displayed.
                </para>
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.ProgressDialog.ShowCancelButton">
            <summary>
                Gets or sets a value that indicates whether the dialog has a cancel button.
            </summary>
            <value>
                <see langword="true"/> if the dialog has a cancel button; otherwise, <see langword="false"/>. The default
                value is <see langword="true"/>.
            </value>
            <remarks>
                <note>
                    This property requires Windows Vista or later; on older versions of Windows, the cancel button will always
                    be displayed.
                </note>
                <para>
                    The event handler for the <see cref="E:Mygod.Windows.Dialogs.ProgressDialog.DoWork"/> event must periodically check the value of the
                    <see cref="P:Mygod.Windows.Dialogs.ProgressDialog.CancellationPending"/> property to see if the operation has been cancelled if this
                    property is <see langword="true"/>.
                </para>
                <para>
                    Setting this property to <see langword="false"/> is not recommended unless absolutely necessary.
                </para>
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.ProgressDialog.MinimizeBox">
            <summary>
                Gets or sets a value that indicates whether the progress dialog has a minimize button.
            </summary>
            <value>
                <see langword="true"/> if the dialog has a minimize button; otherwise, <see langword="false"/>. The default
                value is <see langword="true"/>.
            </value>
            <remarks>
                <note>
                    This property has no effect on modal dialogs (which do not have a minimize button). It only applies
                    to modeless dialogs shown by using the <see cref="M:Mygod.Windows.Dialogs.ProgressDialog.Show"/> method.
                </note>
                <para>
                    This property must be set before <see cref="M:Mygod.Windows.Dialogs.ProgressDialog.Show"/> is called. Changing property has
                    no effect while the dialog is being displayed.
                </para>
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.ProgressDialog.CancellationPending">
            <summary>
                Gets a value indicating whether the user has requested cancellation of the operation.
            </summary>
            <value>
                <see langword="true"/> if the user has cancelled the progress dialog; otherwise, <see langword="false"/>. The default is
                <see langword="false"/>
                .
            </value>
            <remarks>
                The event handler for the <see cref="E:Mygod.Windows.Dialogs.ProgressDialog.DoWork"/> event must periodically check this property and abort the operation
                if it returns <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.ProgressDialog.Animation">
            <summary>
                Gets or sets the animation to show on the progress dialog.
            </summary>
            <value>
                An instance of <see cref="T:Mygod.Windows.Dialogs.AnimationResource"/> which specifies the animation to show, or <see langword="null"/>
                to show no animation. The default value is <see langword="null"/>.
            </value>
            <remarks>
                <para>
                    This property has no effect on Windows Vista or later. On Windows XP, this property will default to
                    a flying papers animation.
                </para>
                <para>
                    This property must be set before <see cref="!:ShowDialog()"/> or <see cref="M:Mygod.Windows.Dialogs.ProgressDialog.Show"/> is called. Changing property has
                    no effect while the dialog is being displayed.
                </para>
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.ProgressDialog.ProgressBarStyle">
            <summary>
                Gets or sets a value that indicates whether a regular or marquee style progress bar should be used.
            </summary>
            <value>
                One of the values of <see cref="T:Mygod.Windows.Dialogs.ProgressBarStyle"/>.
                The default value is <see cref="F:Mygod.Windows.Dialogs.ProgressBarStyle.ProgressBar"/>.
            </value>
            <remarks>
                <note>
                    Operating systems older than Windows Vista do not support marquee progress bars on the progress dialog. On those operating systems, the
                    progress bar will be hidden completely if this property is
                    <see cref="F:Mygod.Windows.Dialogs.ProgressBarStyle.MarqueeProgressBar"/>
                    .
                </note>
                <para>
                    When this property is set to <see cref="F:Mygod.Windows.Dialogs.ProgressBarStyle.ProgressBar"/>, use the
                    <see cref="M:Mygod.Windows.Dialogs.ProgressDialog.ReportProgress(System.Int32)"/>
                    method to set
                    the value of the progress bar. When this property is set to
                    <see cref="F:Mygod.Windows.Dialogs.ProgressBarStyle.MarqueeProgressBar"/>
                    you can still use the <see cref="M:Mygod.Windows.Dialogs.ProgressDialog.ReportProgress(System.Int32,System.String,System.String)"/> method to update the text of the dialog,
                    but the percentage will be ignored.
                </para>
                <para>
                    This property must be set before <see cref="!:ShowDialog()"/> or <see cref="M:Mygod.Windows.Dialogs.ProgressDialog.Show"/> is called. Changing property has
                    no effect while the dialog is being displayed.
                </para>
            </remarks>
        </member>
        <member name="P:Mygod.Windows.Dialogs.ProgressDialog.IsBusy">
            <summary>
                Gets a value that indicates whether the <see cref="T:Mygod.Windows.Dialogs.ProgressDialog"/> is running an asynchronous operation.
            </summary>
            <value>
                <see langword="true"/> if the <see cref="T:Mygod.Windows.Dialogs.ProgressDialog"/> is running an asynchronous operation;
                otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="E:Mygod.Windows.Dialogs.ProgressDialog.DoWork">
            <summary>
                Event raised when the dialog is displayed.
            </summary>
            <remarks>
                Use this event to perform the operation that the dialog is showing the progress for.
                This event will be raised on a different thread than the UI thread.
            </remarks>
        </member>
        <member name="E:Mygod.Windows.Dialogs.ProgressDialog.RunWorkerCompleted">
            <summary>
                Event raised when the operation completes.
            </summary>
        </member>
        <member name="E:Mygod.Windows.Dialogs.ProgressDialog.ProgressChanged">
            <summary>
                Event raised when <see cref="M:Mygod.Windows.Dialogs.ProgressDialog.ReportProgress(System.Int32,System.String,System.String,System.Object)"/> is called.
            </summary>
        </member>
        <member name="T:Mygod.Windows.Dialogs.SaveFileDialog">
            <summary>
                Prompts the user to select a location for saving a file.
            </summary>
            <remarks>
                This class will use the Vista style save file dialog if possible, and automatically fall back to the old-style
                dialog on versions of Windows older than Vista.
            </remarks>
            <remarks>
                <para>
                    Windows Vista provides a new style of common file dialog, with several new features (both from
                    the user's and the programmers perspective).
                </para>
                <para>
                    This class will use the Vista-style file dialogs if possible, and automatically fall back to the old-style
                    dialog on versions of Windows older than Vista. This class is aimed at applications that
                    target both Windows Vista and older versions of Windows, and therefore does not provide any
                    of the new APIs provided by Vista's file dialogs.
                </para>
                <para>
                    This class precisely duplicates the public interface of <see cref="T:Microsoft.Win32.SaveFileDialog"/> so you can just replace
                    any instances of <see cref="T:Microsoft.Win32.SaveFileDialog"/> with the <see cref="T:Mygod.Windows.Dialogs.SaveFileDialog"/> without any further changes
                    to your code.
                </para>
            </remarks>
            <threadsafety instance="false" static="true"/>
        </member>
        <member name="M:Mygod.Windows.Dialogs.SaveFileDialog.#ctor">
            <summary>
                Creates a new instance of <see cref="T:Mygod.Windows.Dialogs.SaveFileDialog"/> class.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.SaveFileDialog.Reset">
            <summary>
                Resets all properties to their default values.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Dialogs.SaveFileDialog.OpenFile">
            <summary>
                Opens the file with read/write permission selected by the user.
            </summary>
            <returns>The read/write file selected by the user.</returns>
            <exception cref="T:System.ArgumentNullException">
                The file name is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Mygod.Windows.Dialogs.SaveFileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)">
            <summary>
                Raises the <see cref="E:Mygod.Windows.Dialogs.FileDialog.FileOk"/> event.
            </summary>
            <param name="e">
                A <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event data.
            </param>
        </member>
        <member name="P:Mygod.Windows.Dialogs.SaveFileDialog.CreatePrompt">
            <summary>
                Gets or sets a value indicating whether the dialog box prompts the user for permission to create a file if the
                user specifies a file that does not exist.
            </summary>
            <value>
                <see langword="true" /> if the dialog box prompts the user before creating a file if the user specifies a file name that does not exist;
                <see langword="false" /> if the dialog box automatically creates the new file without prompting the user for permission. The default
                value is <see langword="false" />.
            </value>
        </member>
        <member name="P:Mygod.Windows.Dialogs.SaveFileDialog.OverwritePrompt">
            <summary>
                Gets or sets a value indicating whether the Save As dialog box displays a warning if the user
                specifies a file name that already exists.
            </summary>
            <value>
                <see langword="true" /> if the dialog box prompts the user before overwriting an existing file if the user specifies a file
                name that already exists; <see langword="false" /> if the dialog box automatically overwrites the existing file without
                prompting the user for permission. The default value is <see langword="true" />.
            </value>
        </member>
        <member name="T:Mygod.Windows.Dialogs.ShellAnimation">
            <summary>
                Resource identifiers for default animations from shell32.dll.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.ShellAnimation.FileMove">
            <summary>
                An animation representing a file move.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.ShellAnimation.FileCopy">
            <summary>
                An animation representing a file copy.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.ShellAnimation.FlyingPapers">
            <summary>
                An animation showing flying papers.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.ShellAnimation.SearchGlobe">
            <summary>
                An animation showing a magnifying glass over a globe.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.ShellAnimation.PermanentDelete">
            <summary>
                An animation representing a permament delete.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.ShellAnimation.FromRecycleBinDelete">
            <summary>
                An animation representing deleting an item from the recycle bin.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.ShellAnimation.ToRecycleBinDelete">
            <summary>
                An animation representing a file move to the recycle bin.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.ShellAnimation.SearchComputer">
            <summary>
                An animation representing a search spanning the local computer.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.ShellAnimation.SearchDocument">
            <summary>
                An animation representing a search in a document..
            </summary>
        </member>
        <member name="F:Mygod.Windows.Dialogs.ShellAnimation.SearchFlashlight">
            <summary>
                An animation representing a search using a flashlight animation.
            </summary>
        </member>
        <member name="M:Mygod.Windows.TreeHelper.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Retrieves all the visual children of a framework element.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The visual children of the framework element.</returns>
        </member>
        <member name="M:Mygod.Windows.TreeHelper.GetLogicalChildrenBreadthFirst(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical children of a framework element using a 
            breadth-first search.  A visual element is assumed to be a logical 
            child of another visual element if they are in the same namescope.
            For performance reasons this method manually manages the queue 
            instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
        <member name="T:Mygod.Windows.Input.UserActivityHook">
            <summary>
            This class allows you to tap keyboard and mouse and / or to detect their activity even when an 
            application runes in background or does not have any user interface at all. This class raises 
            common .NET events with KeyEventArgs and MouseEventArgs so you can easily retrive any information you need.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.WH_MOUSE_LL">
            <summary>
            Windows NT/2000/XP: Installs a hook procedure that monitors low-level mouse input events.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.WH_KEYBOARD_LL">
            <summary>
            Windows NT/2000/XP: Installs a hook procedure that monitors low-level keyboard  input events.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.WH_MOUSE">
            <summary>
            Installs a hook procedure that monitors mouse messages. For more information, see the MouseProc hook procedure. 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.WH_KEYBOARD">
            <summary>
            Installs a hook procedure that monitors keystroke messages. For more information, see the KeyboardProc hook procedure. 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.WM_MOUSEMOVE">
            <summary>
            The WM_MOUSEMOVE message is posted to a window when the cursor moves. 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.WM_LBUTTONDOWN">
            <summary>
            The WM_LBUTTONDOWN message is posted when the user presses the left mouse button 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.WM_RBUTTONDOWN">
            <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.WM_MBUTTONDOWN">
            <summary>
            The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.WM_LBUTTONUP">
            <summary>
            The WM_LBUTTONUP message is posted when the user releases the left mouse button 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.WM_RBUTTONUP">
            <summary>
            The WM_RBUTTONUP message is posted when the user releases the right mouse button 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.WM_MBUTTONUP">
            <summary>
            The WM_MBUTTONUP message is posted when the user releases the middle mouse button 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.WM_LBUTTONDBLCLK">
            <summary>
            The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.WM_RBUTTONDBLCLK">
            <summary>
            The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.WM_MBUTTONDBLCLK">
            <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.WM_MOUSEWHEEL">
            <summary>
            The WM_MOUSEWHEEL message is posted when the user presses the mouse wheel. 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.WM_KEYDOWN">
            <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem 
            key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.WM_KEYUP">
            <summary>
            The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem 
            key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, 
            or a keyboard key that is pressed when a window has the keyboard focus.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.WM_SYSKEYDOWN">
            <summary>
            The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user 
            presses the F10 key (which activates the menu bar) or holds down the ALT key and then 
            presses another key. It also occurs when no window currently has the keyboard focus; 
            in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that 
            receives the message can distinguish between these two contexts by checking the context 
            code in the lParam parameter. 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.WM_SYSKEYUP">
            <summary>
            The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user 
            releases a key that was pressed while the ALT key was held down. It also occurs when no 
            window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent 
            to the active window. The window that receives the message can distinguish between 
            these two contexts by checking the context code in the lParam parameter. 
            </summary>
        </member>
        <member name="M:Mygod.Windows.Input.UserActivityHook.SetWindowsHookEx(System.Int32,Mygod.Windows.Input.UserActivityHook.HookProc,System.IntPtr,System.Int32)">
            <summary>
            The SetWindowsHookEx function installs an application-defined hook procedure into a hook chain. 
            You would install a hook procedure to monitor the system for certain types of events. These events 
            are associated either with a specific thread or with all threads in the same desktop as the calling thread. 
            </summary>
            <param name="idHook">
            [in] Specifies the type of hook procedure to be installed. This parameter can be one of the following values.
            </param>
            <param name="lpfn">
            [in] Pointer to the hook procedure. If the dwThreadId parameter is zero or specifies the identifier of a 
            thread created by a different process, the lpfn parameter must point to a hook procedure in a dynamic-link 
            library (DLL). Otherwise, lpfn can point to a hook procedure in the code associated with the current process.
            </param>
            <param name="hMod">
            [in] Handle to the DLL containing the hook procedure pointed to by the lpfn parameter. 
            The hMod parameter must be set to NULL if the dwThreadId parameter specifies a thread created by 
            the current process and if the hook procedure is within the code associated with the current process. 
            </param>
            <param name="dwThreadId">
            [in] Specifies the identifier of the thread with which the hook procedure is to be associated. 
            If this parameter is zero, the hook procedure is associated with all existing threads running in the 
            same desktop as the calling thread. 
            </param>
            <returns>
            If the function succeeds, the return value is the handle to the hook procedure.
            If the function fails, the return value is NULL. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/setwindowshookex.asp
            </remarks>
        </member>
        <member name="M:Mygod.Windows.Input.UserActivityHook.UnhookWindowsHookEx(System.Int32)">
            <summary>
            The UnhookWindowsHookEx function removes a hook procedure installed in a hook chain by the SetWindowsHookEx function. 
            </summary>
            <param name="idHook">
            [in] Handle to the hook to be removed. This parameter is a hook handle obtained by a previous call to SetWindowsHookEx. 
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/setwindowshookex.asp
            </remarks>
        </member>
        <member name="M:Mygod.Windows.Input.UserActivityHook.CallNextHookEx(System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            The CallNextHookEx function passes the hook information to the next hook procedure in the current hook chain. 
            A hook procedure can call this function either before or after processing the hook information. 
            </summary>
            <param name="idHook">Ignored.</param>
            <param name="nCode">
            [in] Specifies the hook code passed to the current hook procedure. 
            The next hook procedure uses this code to determine how to process the hook information.
            </param>
            <param name="wParam">
            [in] Specifies the wParam value passed to the current hook procedure. 
            The meaning of this parameter depends on the type of hook associated with the current hook chain. 
            </param>
            <param name="lParam">
            [in] Specifies the lParam value passed to the current hook procedure. 
            The meaning of this parameter depends on the type of hook associated with the current hook chain. 
            </param>
            <returns>
            This value is returned by the next hook procedure in the chain. 
            The current hook procedure must also return this value. The meaning of the return value depends on the hook type. 
            For more information, see the descriptions of the individual hook procedures.
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/setwindowshookex.asp
            </remarks>
        </member>
        <member name="M:Mygod.Windows.Input.UserActivityHook.ToAscii(System.Int32,System.Int32,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            The ToAscii function translates the specified virtual-key code and keyboard 
            state to the corresponding character or characters. The function translates the code 
            using the input language and physical keyboard layout identified by the keyboard layout handle.
            </summary>
            <param name="uVirtKey">
            [in] Specifies the virtual-key code to be translated. 
            </param>
            <param name="uScanCode">
            [in] Specifies the hardware scan code of the key to be translated. 
            The high-order bit of this value is set if the key is up (not pressed). 
            </param>
            <param name="lpbKeyState">
            [in] Pointer to a 256-byte array that contains the current keyboard state. 
            Each element (byte) in the array contains the state of one key. 
            If the high-order bit of a byte is set, the key is down (pressed). 
            The low bit, if set, indicates that the key is toggled on. In this function, 
            only the toggle bit of the CAPS LOCK key is relevant. The toggle state 
            of the NUM LOCK and SCROLL LOCK keys is ignored.
            </param>
            <param name="lpwTransKey">
            [out] Pointer to the buffer that receives the translated character or characters. 
            </param>
            <param name="fuState">
            [in] Specifies whether a menu is active. This parameter must be 1 if a menu is active, or 0 otherwise. 
            </param>
            <returns>
            If the specified key is a dead key, the return value is negative. Otherwise, it is one of the following values. 
            Value Meaning 
            0 The specified virtual key has no translation for the current state of the keyboard. 
            1 One character was copied to the buffer. 
            2 Two characters were copied to the buffer. This usually happens when a dead-key character 
            (accent or diacritic) stored in the keyboard layout cannot be composed with the specified 
            virtual key to form a single character. 
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/userinput/keyboardinput/keyboardinputreference/keyboardinputfunctions/toascii.asp
            </remarks>
        </member>
        <member name="M:Mygod.Windows.Input.UserActivityHook.GetKeyboardState(System.Byte[])">
            <summary>
            The GetKeyboardState function copies the status of the 256 virtual keys to the 
            specified buffer. 
            </summary>
            <param name="pbKeyState">
            [in] Pointer to a 256-byte array that contains keyboard key states. 
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError. 
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/userinput/keyboardinput/keyboardinputreference/keyboardinputfunctions/toascii.asp
            </remarks>
        </member>
        <member name="M:Mygod.Windows.Input.UserActivityHook.#ctor">
            <summary>
            Creates an instance of UserActivityHook object and sets mouse and keyboard hooks.
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception">Any windows problem.</exception>
        </member>
        <member name="M:Mygod.Windows.Input.UserActivityHook.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates an instance of UserActivityHook object and installs both or one of mouse and/or keyboard hooks and starts rasing events
            </summary>
            <param name="InstallMouseHook"><b>true</b> if mouse events must be monitored</param>
            <param name="InstallKeyboardHook"><b>true</b> if keyboard events must be monitored</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Any windows problem.</exception>
            <remarks>
            To create an instance without installing hooks call new UserActivityHook(false, false)
            </remarks>
        </member>
        <member name="M:Mygod.Windows.Input.UserActivityHook.Finalize">
            <summary>
            Destruction.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.hMouseHook">
            <summary>
            Stores the handle to the mouse hook procedure.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.hKeyboardHook">
            <summary>
            Stores the handle to the keyboard hook procedure.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.MouseHookProcedure">
            <summary>
            Declare MouseHookProcedure as HookProc type.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.KeyboardHookProcedure">
            <summary>
            Declare KeyboardHookProcedure as HookProc type.
            </summary>
        </member>
        <member name="M:Mygod.Windows.Input.UserActivityHook.Start">
            <summary>
            Installs both mouse and keyboard hooks and starts rasing events
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception">Any windows problem.</exception>
        </member>
        <member name="M:Mygod.Windows.Input.UserActivityHook.Start(System.Boolean,System.Boolean)">
            <summary>
            Installs both or one of mouse and/or keyboard hooks and starts rasing events
            </summary>
            <param name="InstallMouseHook"><b>true</b> if mouse events must be monitored</param>
            <param name="InstallKeyboardHook"><b>true</b> if keyboard events must be monitored</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Any windows problem.</exception>
        </member>
        <member name="M:Mygod.Windows.Input.UserActivityHook.Stop">
            <summary>
            Stops monitoring both mouse and keyboard events and rasing events.
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception">Any windows problem.</exception>
        </member>
        <member name="M:Mygod.Windows.Input.UserActivityHook.Stop(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Stops monitoring both or one of mouse and/or keyboard events and rasing events.
            </summary>
            <param name="UninstallMouseHook"><b>true</b> if mouse hook must be uninstalled</param>
            <param name="UninstallKeyboardHook"><b>true</b> if keyboard hook must be uninstalled</param>
            <param name="ThrowExceptions"><b>true</b> if exceptions which occured during uninstalling must be thrown</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Any windows problem.</exception>
        </member>
        <member name="M:Mygod.Windows.Input.UserActivityHook.MouseHookProc(System.Int32,System.Int32,System.IntPtr)">
            <summary>
            A callback function which will be called every time a mouse activity detected.
            </summary>
            <param name="nCode">
            [in] Specifies whether the hook procedure must process the message. 
            If nCode is HC_ACTION, the hook procedure must process the message. 
            If nCode is less than zero, the hook procedure must pass the message to the 
            CallNextHookEx function without further processing and must return the 
            value returned by CallNextHookEx.
            </param>
            <param name="wParam">
            [in] Specifies whether the message was sent by the current thread. 
            If the message was sent by the current thread, it is nonzero; otherwise, it is zero. 
            </param>
            <param name="lParam">
            [in] Pointer to a CWPSTRUCT structure that contains details about the message. 
            </param>
            <returns>
            If nCode is less than zero, the hook procedure must return the value returned by CallNextHookEx. 
            If nCode is greater than or equal to zero, it is highly recommended that you call CallNextHookEx 
            and return the value it returns; otherwise, other applications that have installed WH_CALLWNDPROC 
            hooks will not receive hook notifications and may behave incorrectly as a result. If the hook 
            procedure does not call CallNextHookEx, the return value should be zero. 
            </returns>
        </member>
        <member name="M:Mygod.Windows.Input.UserActivityHook.KeyboardHookProc(System.Int32,System.Int32,System.IntPtr)">
            <summary>
            A callback function which will be called every time a keyboard activity detected.
            </summary>
            <param name="nCode">
            [in] Specifies whether the hook procedure must process the message. 
            If nCode is HC_ACTION, the hook procedure must process the message. 
            If nCode is less than zero, the hook procedure must pass the message to the 
            CallNextHookEx function without further processing and must return the 
            value returned by CallNextHookEx.
            </param>
            <param name="wParam">
            [in] Specifies whether the message was sent by the current thread. 
            If the message was sent by the current thread, it is nonzero; otherwise, it is zero. 
            </param>
            <param name="lParam">
            [in] Pointer to a CWPSTRUCT structure that contains details about the message. 
            </param>
            <returns>
            If nCode is less than zero, the hook procedure must return the value returned by CallNextHookEx. 
            If nCode is greater than or equal to zero, it is highly recommended that you call CallNextHookEx 
            and return the value it returns; otherwise, other applications that have installed WH_CALLWNDPROC 
            hooks will not receive hook notifications and may behave incorrectly as a result. If the hook 
            procedure does not call CallNextHookEx, the return value should be zero. 
            </returns>
        </member>
        <member name="E:Mygod.Windows.Input.UserActivityHook.OnMouseActivity">
            <summary>
            Occurs when the user moves the mouse, presses any mouse button or scrolls the wheel
            </summary>
        </member>
        <member name="E:Mygod.Windows.Input.UserActivityHook.KeyDown">
            <summary>
            Occurs when the user presses a key
            </summary>
        </member>
        <member name="E:Mygod.Windows.Input.UserActivityHook.KeyPress">
            <summary>
            Occurs when the user presses and releases 
            </summary>
        </member>
        <member name="E:Mygod.Windows.Input.UserActivityHook.KeyUp">
            <summary>
            Occurs when the user releases a key
            </summary>
        </member>
        <member name="T:Mygod.Windows.Input.UserActivityHook.POINT">
            <summary>
            The POINT structure defines the x- and y- coordinates of a point. 
            </summary>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/gdi/rectangl_0tiq.asp
            </remarks>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.POINT.x">
            <summary>
            Specifies the x-coordinate of the point. 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.POINT.y">
            <summary>
            Specifies the y-coordinate of the point. 
            </summary>
        </member>
        <member name="T:Mygod.Windows.Input.UserActivityHook.MouseHookStruct">
            <summary>
            The MOUSEHOOKSTRUCT structure contains information about a mouse event passed to a WH_MOUSE hook procedure, MouseProc. 
            </summary>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookstructures/cwpstruct.asp
            </remarks>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.MouseHookStruct.pt">
            <summary>
            Specifies a POINT structure that contains the x- and y-coordinates of the cursor, in screen coordinates. 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.MouseHookStruct.hwnd">
            <summary>
            Handle to the window that will receive the mouse message corresponding to the mouse event. 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.MouseHookStruct.wHitTestCode">
            <summary>
            Specifies the hit-test value. For a list of hit-test values, see the description of the WM_NCHITTEST message. 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.MouseHookStruct.dwExtraInfo">
            <summary>
            Specifies extra information associated with the message. 
            </summary>
        </member>
        <member name="T:Mygod.Windows.Input.UserActivityHook.MouseLLHookStruct">
            <summary>
            The MSLLHOOKSTRUCT structure contains information about a low-level keyboard input event. 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.MouseLLHookStruct.pt">
            <summary>
            Specifies a POINT structure that contains the x- and y-coordinates of the cursor, in screen coordinates. 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.MouseLLHookStruct.mouseData">
             <summary>
             If the message is WM_MOUSEWHEEL, the high-order word of this member is the wheel delta. 
             The low-order word is reserved. A positive value indicates that the wheel was rotated forward, 
             away from the user; a negative value indicates that the wheel was rotated backward, toward the user. 
             One wheel click is defined as WHEEL_DELTA, which is 120. 
            If the message is WM_XBUTTONDOWN, WM_XBUTTONUP, WM_XBUTTONDBLCLK, WM_NCXBUTTONDOWN, WM_NCXBUTTONUP,
             or WM_NCXBUTTONDBLCLK, the high-order word specifies which X button was pressed or released, 
             and the low-order word is reserved. This value can be one or more of the following values. Otherwise, mouseData is not used. 
            XBUTTON1
            The first X button was pressed or released.
            XBUTTON2
            The second X button was pressed or released.
             </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.MouseLLHookStruct.flags">
             <summary>
             Specifies the event-injected flag. An application can use the following value to test the mouse flags. Value Purpose 
            LLMHF_INJECTED Test the event-injected flag.  
            0
            Specifies whether the event was injected. The value is 1 if the event was injected; otherwise, it is 0.
            1-15
            Reserved.
             </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.MouseLLHookStruct.time">
            <summary>
            Specifies the time stamp for this message.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.MouseLLHookStruct.dwExtraInfo">
            <summary>
            Specifies extra information associated with the message. 
            </summary>
        </member>
        <member name="T:Mygod.Windows.Input.UserActivityHook.KeyboardHookStruct">
            <summary>
            The KBDLLHOOKSTRUCT structure contains information about a low-level keyboard input event. 
            </summary>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookstructures/cwpstruct.asp
            </remarks>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.KeyboardHookStruct.vkCode">
            <summary>
            Specifies a virtual-key code. The code must be a value in the range 1 to 254. 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.KeyboardHookStruct.scanCode">
            <summary>
            Specifies a hardware scan code for the key. 
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.KeyboardHookStruct.flags">
            <summary>
            Specifies the extended-key flag, event-injected flag, context code, and transition-state flag.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.KeyboardHookStruct.time">
            <summary>
            Specifies the time stamp for this message.
            </summary>
        </member>
        <member name="F:Mygod.Windows.Input.UserActivityHook.KeyboardHookStruct.dwExtraInfo">
            <summary>
            Specifies extra information associated with the message. 
            </summary>
        </member>
        <member name="T:Mygod.Windows.Input.UserActivityHook.HookProc">
            <summary>
            The CallWndProc hook procedure is an application-defined or library-defined callback 
            function used with the SetWindowsHookEx function. The HOOKPROC type defines a pointer 
            to this callback function. CallWndProc is a placeholder for the application-defined 
            or library-defined function name.
            </summary>
            <param name="nCode">
            [in] Specifies whether the hook procedure must process the message. 
            If nCode is HC_ACTION, the hook procedure must process the message. 
            If nCode is less than zero, the hook procedure must pass the message to the 
            CallNextHookEx function without further processing and must return the 
            value returned by CallNextHookEx.
            </param>
            <param name="wParam">
            [in] Specifies whether the message was sent by the current thread. 
            If the message was sent by the current thread, it is nonzero; otherwise, it is zero. 
            </param>
            <param name="lParam">
            [in] Pointer to a CWPSTRUCT structure that contains details about the message. 
            </param>
            <returns>
            If nCode is less than zero, the hook procedure must return the value returned by CallNextHookEx. 
            If nCode is greater than or equal to zero, it is highly recommended that you call CallNextHookEx 
            and return the value it returns; otherwise, other applications that have installed WH_CALLWNDPROC 
            hooks will not receive hook notifications and may behave incorrectly as a result. If the hook 
            procedure does not call CallNextHookEx, the return value should be zero. 
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/callwndproc.asp
            </remarks>
        </member>
        <member name="T:Mygod.Windows.DataObject">
            <summary>
            Implements the COM version of IDataObject including SetData.
            </summary>
            <remarks>
            <para>Use this object when using shell (or other unmanged) features
            that utilize the clipboard and/or drag and drop.</para>
            <para>The System.Windows.DataObject (.NET 3.0) and
            System.Windows.Forms.DataObject do not support SetData from their COM
            IDataObject interface implementation.</para>
            <para>To use this object with .NET drag and drop, create an instance
            of System.Windows.DataObject (.NET 3.0) or System.Window.Forms.DataObject
            passing an instance of DataObject as the only constructor parameter. For
            example:</para>
            <code>
            System.Windows.DataObject data = new System.Windows.DataObject(new DragDropLib.DataObject());
            </code>
            </remarks>
        </member>
        <member name="M:Mygod.Windows.DataObject.#ctor">
            <summary>
            Creates an empty instance of DataObject.
            </summary>
        </member>
        <member name="M:Mygod.Windows.DataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
            <summary>
            Adds an advisory connection for the specified format.
            </summary>
            <param name="pFormatetc">The format for which this sink is called for changes.</param>
            <param name="advf">Advisory flags to specify callback behavior.</param>
            <param name="adviseSink">The IAdviseSink to call for this connection.</param>
            <param name="connection">Returns the new connection's ID.</param>
            <returns>An HRESULT.</returns>
        </member>
        <member name="M:Mygod.Windows.DataObject.DUnadvise(System.Int32)">
            <summary>
            Removes an advisory connection.
            </summary>
            <param name="connection">The connection id to remove.</param>
        </member>
        <member name="M:Mygod.Windows.DataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
            <summary>
            Gets an enumerator for the formats contained in this DataObject.
            </summary>
            <param name="direction">The direction of the data.</param>
            <returns>An instance of the IEnumFORMATETC interface.</returns>
        </member>
        <member name="M:Mygod.Windows.DataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
            <summary>
            Gets the specified data.
            </summary>
            <param name="format">The requested data format.</param>
            <param name="medium">When the function returns, contains the requested data.</param>
        </member>
        <member name="M:Mygod.Windows.DataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
            <summary>
            Gets the specified data.
            </summary>
            <param name="format">The requested data format.</param>
            <param name="medium">When the function returns, contains the requested data.</param>
            <remarks>Differs from GetData only in that the STGMEDIUM storage is
            allocated and owned by the caller.</remarks>
        </member>
        <member name="M:Mygod.Windows.DataObject.QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
            <summary>
            Determines if data of the requested format is present.
            </summary>
            <param name="format">The request data format.</param>
            <returns>Returns the status of the request. If the data is present, S_OK is returned.
            If the data is not present, an error code with the best guess as to the reason is returned.</returns>
        </member>
        <member name="M:Mygod.Windows.DataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
            <summary>
            Sets data in the specified format into storage.
            </summary>
            <param name="formatIn">The format of the data.</param>
            <param name="medium">The data.</param>
            <param name="release">If true, ownership of the medium's memory will be transferred
            to this object. If false, a copy of the medium will be created and maintained, and
            the caller is responsible for the memory of the medium it provided.</param>
        </member>
        <member name="M:Mygod.Windows.DataObject.Dispose">
            <summary>
            Releases resources.
            </summary>
        </member>
        <member name="M:Mygod.Windows.DataObject.Finalize">
            <summary>
            Releases unmanaged resources.
            </summary>
        </member>
        <member name="M:Mygod.Windows.DataObject.ClearStorage">
            <summary>
            Clears the internal storage array.
            </summary>
            <remarks>
            ClearStorage is called by the IDisposable.Dispose method implementation
            to make sure all unmanaged references are released properly.
            </remarks>
        </member>
        <member name="M:Mygod.Windows.DataObject.Dispose(System.Boolean)">
            <summary>
            Releases resources.
            </summary>
            <param name="disposing">Indicates if the call was made by a managed caller, or the garbage collector.
            True indicates that someone called the Dispose method directly. False indicates that the garbage collector
            is finalizing the release of the object instance.</param>
        </member>
        <member name="M:Mygod.Windows.DataObject.CopyMedium(System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
            <summary>
            Creates a copy of the STGMEDIUM structure.
            </summary>
            <param name="medium">The data to copy.</param>
            <returns>The copied data.</returns>
        </member>
        <member name="M:Mygod.Windows.DataObject.GetDataEntry(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Collections.Generic.KeyValuePair{System.Runtime.InteropServices.ComTypes.FORMATETC,System.Runtime.InteropServices.ComTypes.STGMEDIUM}@)">
            <summary>
            Gets a data entry by the specified format.
            </summary>
            <param name="pFormatetc">The format to locate the data entry for.</param>
            <param name="dataEntry">The located data entry.</param>
            <returns>True if the data entry was found, otherwise False.</returns>
        </member>
        <member name="M:Mygod.Windows.DataObject.RaiseDataChanged(System.Int32,System.Collections.Generic.KeyValuePair{System.Runtime.InteropServices.ComTypes.FORMATETC,System.Runtime.InteropServices.ComTypes.STGMEDIUM}@)">
            <summary>
            Raises the DataChanged event for the specified connection.
            </summary>
            <param name="connection">The connection id.</param>
            <param name="dataEntry">The data entry for which to raise the event.</param>
        </member>
        <member name="M:Mygod.Windows.DataObject.RaiseDataChanged(System.Collections.Generic.KeyValuePair{System.Runtime.InteropServices.ComTypes.FORMATETC,System.Runtime.InteropServices.ComTypes.STGMEDIUM}@)">
            <summary>
            Raises the DataChanged event for any advisory connections that
            are listening for it.
            </summary>
            <param name="dataEntry">The relevant data entry.</param>
        </member>
        <member name="M:Mygod.Windows.DataObject.IsFormatCompatible(System.Runtime.InteropServices.ComTypes.FORMATETC,System.Runtime.InteropServices.ComTypes.FORMATETC)">
            <summary>
            Determines if the formats are compatible.
            </summary>
            <param name="format1">A FORMATETC.</param>
            <param name="format2">A FORMATETC.</param>
            <returns>True if the formats are compatible, otherwise False.</returns>
            <remarks>Compatible formats have the same DVASPECT, same format ID, and share
            at least one TYMED.</remarks>
        </member>
        <member name="M:Mygod.Windows.DataObject.IsFormatCompatible(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
            <summary>
            Determines if the formats are compatible.
            </summary>
            <param name="format1">A FORMATETC.</param>
            <param name="format2">A FORMATETC.</param>
            <returns>True if the formats are compatible, otherwise False.</returns>
            <remarks>Compatible formats have the same DVASPECT, same format ID, and share
            at least one TYMED.</remarks>
        </member>
        <member name="T:Mygod.Windows.DataObject.EnumFORMATETC">
            <summary>
            Helps enumerate the formats available in our DataObject class.
            </summary>
        </member>
        <member name="M:Mygod.Windows.DataObject.EnumFORMATETC.#ctor(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.Runtime.InteropServices.ComTypes.FORMATETC,System.Runtime.InteropServices.ComTypes.STGMEDIUM}})">
            <summary>
            Creates an instance from a list of key value pairs.
            </summary>
            <param name="storage">List of FORMATETC/STGMEDIUM key value pairs</param>
        </member>
        <member name="M:Mygod.Windows.DataObject.EnumFORMATETC.#ctor(System.Runtime.InteropServices.ComTypes.FORMATETC[])">
            <summary>
            Creates an instance from an array of FORMATETC's.
            </summary>
            <param name="formats">Array of formats to enumerate.</param>
        </member>
        <member name="M:Mygod.Windows.DataObject.EnumFORMATETC.Clone(System.Runtime.InteropServices.ComTypes.IEnumFORMATETC@)">
            <summary>
            Creates a clone of this enumerator.
            </summary>
            <param name="newEnum">When this function returns, contains a new instance of IEnumFORMATETC.</param>
        </member>
        <member name="M:Mygod.Windows.DataObject.EnumFORMATETC.Next(System.Int32,System.Runtime.InteropServices.ComTypes.FORMATETC[],System.Int32[])">
            <summary>
            Retrieves the next elements from the enumeration.
            </summary>
            <param name="celt">The number of elements to retrieve.</param>
            <param name="rgelt">An array to receive the formats requested.</param>
            <param name="pceltFetched">An array to receive the number of element fetched.</param>
            <returns>If the fetched number of formats is the same as the requested number, S_OK is returned.
            There are several reasons S_FALSE may be returned: (1) The requested number of elements is less than
            or equal to zero. (2) The rgelt parameter equals null. (3) There are no more elements to enumerate.
            (4) The requested number of elements is greater than one and pceltFetched equals null or does not
            have at least one element in it. (5) The number of fetched elements is less than the number of
            requested elements.</returns>
        </member>
        <member name="M:Mygod.Windows.DataObject.EnumFORMATETC.Reset">
            <summary>
            Resets the state of enumeration.
            </summary>
            <returns>S_OK</returns>
        </member>
        <member name="M:Mygod.Windows.DataObject.EnumFORMATETC.Skip(System.Int32)">
            <summary>
            Skips the number of elements requested.
            </summary>
            <param name="celt">The number of elements to skip.</param>
            <returns>If there are not enough remaining elements to skip, returns S_FALSE. Otherwise, S_OK is returned.</returns>
        </member>
        <member name="T:Mygod.Runtime.InteropServices.ComTypes.ComDataObjectExtensions">
            <summary>
            Provides extended functionality for the COM IDataObject interface.
            </summary>
        </member>
        <member name="M:Mygod.Runtime.InteropServices.ComTypes.ComDataObjectExtensions.SetDropDescription(System.Runtime.InteropServices.ComTypes.IDataObject,Mygod.Windows.DropDescription)">
            <summary>
            Sets the drop description for the drag image manager.
            </summary>
            <param name="dataObject">The DataObject to set.</param>
            <param name="dropDescription">The drop description.</param>
        </member>
        <member name="M:Mygod.Runtime.InteropServices.ComTypes.ComDataObjectExtensions.GetDropDescription(System.Runtime.InteropServices.ComTypes.IDataObject)">
            <summary>
            Gets the DropDescription format data.
            </summary>
            <param name="dataObject">The DataObject.</param>
            <returns>The DropDescription, if set.</returns>
        </member>
        <member name="M:Mygod.Runtime.InteropServices.ComTypes.ComDataObjectExtensions.Advise(System.Runtime.InteropServices.ComTypes.IDataObject,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.String,System.Runtime.InteropServices.ComTypes.ADVF)">
            <summary>
            Sets up an advisory connection to the data object.
            </summary>
            <param name="dataObject">The data object on which to set the advisory connection.</param>
            <param name="sink">The advisory sink.</param>
            <param name="format">The format on which to callback on.</param>
            <param name="advf">Advisory flags. Can be 0.</param>
            <returns>The ID of the newly created advisory connection.</returns>
        </member>
        <member name="M:Mygod.Runtime.InteropServices.ComTypes.ComDataObjectExtensions.FillFormatETC(System.String,System.Runtime.InteropServices.ComTypes.TYMED,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
            <summary>
            Fills a FORMATETC structure.
            </summary>
            <param name="format">The format name.</param>
            <param name="tymed">The accepted TYMED.</param>
            <param name="formatETC">The structure to fill.</param>
        </member>
        <member name="M:Mygod.Runtime.InteropServices.ComTypes.ComDataObjectExtensions.SetManagedData(System.Runtime.InteropServices.ComTypes.IDataObject,System.String,System.Object)">
            <summary>
            Sets managed data to a clipboard DataObject.
            </summary>
            <param name="dataObject">The DataObject to set the data on.</param>
            <param name="format">The clipboard format.</param>
            <param name="data">The data object.</param>
            <remarks>
            Because the underlying data store is not storing managed objects, but
            unmanaged ones, this function provides intelligent conversion, allowing
            you to set unmanaged data into the COM implemented IDataObject.</remarks>
        </member>
        <member name="M:Mygod.Runtime.InteropServices.ComTypes.ComDataObjectExtensions.GetManagedData(System.Runtime.InteropServices.ComTypes.IDataObject,System.String)">
            <summary>
            Gets managed data from a clipboard DataObject.
            </summary>
            <param name="dataObject">The DataObject to obtain the data from.</param>
            <param name="format">The format for which to get the data in.</param>
            <returns>The data object instance.</returns>
        </member>
        <member name="M:Mygod.Runtime.InteropServices.ComTypes.ComDataObjectExtensions.GetMediumFromObject(System.Object,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
            <summary>
            Serializes managed data to an HGLOBAL.
            </summary>
            <param name="data">The managed data object.</param>
            <returns>An STGMEDIUM pointing to the allocated HGLOBAL.</returns>
        </member>
        <member name="M:Mygod.Runtime.InteropServices.ComTypes.ComDataObjectExtensions.GetAsSerializable(System.Object)">
            <summary>
            Gets a serializable object representing the data.
            </summary>
            <param name="obj">The data.</param>
            <returns>If the data is serializable, then it is returned. Otherwise,
            type conversion is attempted. If successful, a string value will be
            returned.</returns>
        </member>
        <member name="M:Mygod.Runtime.InteropServices.ComTypes.ComDataObjectExtensions.ConvertDataFromString(System.String,System.Type)">
            <summary>
            Converts data from a string to the specified format.
            </summary>
            <param name="data">The data to convert.</param>
            <param name="dataType">The target data type.</param>
            <returns>Returns the converted data instance.</returns>
        </member>
        <member name="M:Mygod.Runtime.InteropServices.ComTypes.ComDataObjectExtensions.GetTypeConverterForType(System.Type)">
            <summary>
            Gets a TypeConverter instance for the specified type.
            </summary>
            <param name="dataType">The type.</param>
            <returns>An instance of a TypeConverter for the type, if one exists.</returns>
        </member>
        <member name="T:Mygod.Windows.WpfDataObjectExtensions">
            <summary>
            Provides extended functionality to the System.Windows.IDataObject interface.
            </summary>
        </member>
        <member name="M:Mygod.Windows.WpfDataObjectExtensions.SetDragImage(System.Windows.IDataObject,System.Windows.UIElement,System.Windows.Point)">
            <summary>
            Sets the drag image by rendering the specified UIElement.
            </summary>
            <param name="dataObject">The DataObject to set the drag image for.</param>
            <param name="element">The element to render as the drag image.</param>
            <param name="cursorOffset">The offset of the cursor relative to the UIElement.</param>
        </member>
        <member name="M:Mygod.Windows.WpfDataObjectExtensions.SetDragImage(System.Windows.IDataObject,System.Windows.Media.Imaging.BitmapSource,System.Windows.Point)">
            <summary>
            Sets the drag image from a BitmapSource.
            </summary>
            <param name="dataObject">The DataObject on which to set the drag image.</param>
            <param name="image">The image source.</param>
            <param name="cursorOffset">The offset relative to the bitmap image.</param>
        </member>
        <member name="M:Mygod.Windows.WpfDataObjectExtensions.SetDragImage(System.Windows.IDataObject,System.Drawing.Bitmap,System.Windows.Point)">
            <summary>
            Sets the drag image.
            </summary>
            <param name="dataObject">The DataObject to set the drag image on.</param>
            <param name="image">The drag image.</param>
            <param name="cursorOffset">The location of the cursor relative to the image.</param>
        </member>
        <member name="M:Mygod.Windows.WpfDataObjectExtensions.SetDropDescription(System.Windows.IDataObject,Mygod.Windows.DropImageType,System.String,System.String)">
            <summary>
            Sets the drop description for the drag image manager.
            </summary>
            <param name="dataObject">The DataObject to set.</param>
            <param name="type">The type of the drop image.</param>
            <param name="format">The format string for the description.</param>
            <param name="insert">The parameter for the drop description.</param>
            <remarks>
            When setting the drop description, the text can be set in two part,
            which will be rendered slightly differently to distinguish the description
            from the subject. For example, the format can be set as "Move to %1" and
            the insert as "Temp". When rendered, the "%1" in format will be replaced
            with "Temp", but "Temp" will be rendered slightly different from "Move to ".
            </remarks>
        </member>
        <member name="M:Mygod.Windows.WpfDataObjectExtensions.SetDataEx(System.Windows.IDataObject,System.String,System.Object)">
            <summary>
            Sets managed data to a clipboard DataObject.
            </summary>
            <param name="dataObject">The DataObject to set the data on.</param>
            <param name="format">The clipboard format.</param>
            <param name="data">The data object.</param>
            <remarks>
            Because the underlying data store is not storing managed objects, but
            unmanaged ones, this function provides intelligent conversion, allowing
            you to set unmanaged data into the COM implemented IDataObject.</remarks>
        </member>
        <member name="M:Mygod.Windows.WpfDataObjectExtensions.GetCompatibleTymed(System.String,System.Object)">
            <summary>
            Gets a system compatible TYMED for the given format.
            </summary>
            <param name="format">The data format.</param>
            <param name="data">The data.</param>
            <returns>A TYMED value, indicating a system compatible TYMED that can
            be used for data marshaling.</returns>
        </member>
        <member name="M:Mygod.Windows.WpfDataObjectExtensions.IsFormatEqual(System.String,System.String)">
            <summary>
            Compares the equality of two clipboard formats.
            </summary>
            <param name="formatA">First format.</param>
            <param name="formatB">Second format.</param>
            <returns>True if the formats are equal. False otherwise.</returns>
        </member>
        <member name="M:Mygod.Windows.WpfDataObjectExtensions.GetDataEx(System.Windows.IDataObject,System.String)">
            <summary>
            Gets managed data from a clipboard DataObject.
            </summary>
            <param name="dataObject">The DataObject to obtain the data from.</param>
            <param name="format">The format for which to get the data in.</param>
            <returns>The data object instance.</returns>
        </member>
        <member name="M:Mygod.Windows.WpfDataObjectExtensions.GetDeviceDpi(System.Windows.Media.Visual,System.Double@,System.Double@)">
            <summary>
            Gets the device capabilities.
            </summary>
            <param name="reference">A reference UIElement for getting the relevant device caps.</param>
            <param name="dpix">The horizontal DPI.</param>
            <param name="dpiy">The vertical DPI.</param>
        </member>
        <member name="M:Mygod.Windows.WpfDataObjectExtensions.GetBitmapFromBitmapSource(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Color)">
            <summary>
            Gets a System.Drawing.Bitmap from a BitmapSource.
            </summary>
            <param name="source">The source image from which to create our Bitmap.</param>
            <param name="transparencyKey">The transparency key. This is used by the DragDropHelper
            in rendering transparent pixels.</param>
            <returns>An instance of Bitmap which is a copy of the BitmapSource's image.</returns>
        </member>
        <member name="M:Mygod.Windows.WpfDataObjectExtensions.ReplaceTransparentPixelsWithTransparentKey(System.Drawing.Imaging.BitmapData,System.Drawing.Color)">
            <summary>
            Replaces any pixel with a zero alpha value with the specified transparency key.
            </summary>
            <param name="bmpData">The bitmap data in which to perform the operation.</param>
            <param name="transKey">The transparency color. This color is rendered transparent
            by the DragDropHelper.</param>
            <remarks>
            This function only supports 32-bit pixel formats for now.
            </remarks>
        </member>
        <member name="M:Mygod.Windows.WpfDataObjectExtensions.ToDrawingColor(System.Windows.Media.Color)">
            <summary>
            Converts a System.Windows.Media.Color to System.Drawing.Color.
            </summary>
            <param name="color">System.Windows.Media.Color value to convert.</param>
            <returns>System.Drawing.Color value.</returns>
        </member>
        <member name="M:Mygod.Windows.WpfDataObjectExtensions.ToDrawingRectangle(System.Windows.Int32Rect)">
            <summary>
            Converts a System.Windows.Int32Rect to a System.Drawing.Rectangle value.
            </summary>
            <param name="rect">The System.Windows.Int32Rect to convert.</param>
            <returns>The System.Drawing.Rectangle converted value.</returns>
        </member>
        <member name="M:Mygod.Windows.WpfDataObjectExtensions.ConvertColorPalette(System.Drawing.Imaging.ColorPalette,System.Windows.Media.Imaging.BitmapPalette)">
            <summary>
            Converts the entries in a BitmapPalette to ColorPalette entries.
            </summary>
            <param name="destPalette">ColorPalette destination palette.</param>
            <param name="bitmapPalette">BitmapPalette source palette.</param>
        </member>
        <member name="M:Mygod.Windows.WpfDataObjectExtensions.ConvertPixelFormat(System.Windows.Media.PixelFormat)">
            <summary>
            Converts a System.Windows.Media.PixelFormat instance to a
            System.Drawing.Imaging.PixelFormat value.
            </summary>
            <param name="pixelFormat">The input PixelFormat.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Mygod.Windows.DragDropExtensions.ToWin32Point(System.Windows.Point)">
            <summary>
            Converts a System.Windows.Point value to a DragDropLib.Win32Point value.
            </summary>
            <param name="pt">Input value.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="T:Mygod.Windows.DragSourceHelper">
            <summary>
            Provides helper methods for working with the Shell drag image manager.
            </summary>
        </member>
        <member name="F:Mygod.Windows.DragSourceHelper.s_dataContext">
            <summary>
            Keeps a cached drag source context, keyed on the drag source control.
            </summary>
        </member>
        <member name="F:Mygod.Windows.DragSourceHelper.s_dropDescriptions">
            <summary>
            Keeps drop description info for a data object.
            </summary>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.CreateDataObject">
            <summary>
            Creates a default DataObject with an internal COM callable implemetation of IDataObject.
            </summary>
            <returns>A new instance of System.Windows.Forms.IDataObject.</returns>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.CreateDataObject(System.Windows.Media.Imaging.BitmapSource,System.Windows.Point)">
            <summary>
            Creates a DataObject with an internal COM callable implementation of IDataObject.
            This override also sets the drag image to the specified Bitmap and sets a flag
            on the system IDragSourceHelper2 to allow drop descriptions.
            </summary>
            <param name="dragImage">A Bitmap from which to create the drag image.</param>
            <param name="cursorOffset">The drag image cursor offset.</param>
            <returns>A new instance of System.Windows.Forms.IDataObject.</returns>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.CreateDataObject(System.Windows.UIElement,System.Windows.Point)">
            <summary>
            Creates a DataObject with an internal COM callable implementation of IDataObject.
            This override also sets the drag image to a bitmap created from the specified
            Control instance's UI. It also sets a flag on the system IDragSourceHelper2 to
            allow drop descriptions.
            </summary>
            <param name="element">A UIElement to initialize the drag image from.</param>
            <param name="cursorOffset">The drag image cursor offset.</param>
            <returns>A new instance of System.Windows.Forms.IDataObject.</returns>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.RegisterDefaultDragSource(System.Windows.UIElement,System.Windows.IDataObject)">
            <summary>
            Registers a Control as a drag source and provides default implementations of
            GiveFeedback and QueryContinueDrag.
            </summary>
            <param name="dragSource">The drag source UIElement instance.</param>
            <param name="data">The DataObject associated to the drag source.</param>
            <remarks>Callers must call UnregisterDefaultDragSource when the drag and drop
            operation is complete to avoid memory leaks.</remarks>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.RegisterDefaultDragSource(System.Windows.UIElement,System.Windows.Point)">
            <summary>
            Registers a Control as a drag source and provides default implementations of
            GiveFeedback and QueryContinueDrag. This override also handles the data object
            creation, including initialization of the drag image from the Control.
            </summary>
            <param name="dragSource">The drag source UIElement instance.</param>
            <param name="cursorOffset">The drag image cursor offset.</param>
            <returns>The created data object.</returns>
            <remarks>Callers must call UnregisterDefaultDragSource when the drag and drop
            operation is complete to avoid memory leaks.</remarks>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.RegisterDefaultDragSource(System.Windows.UIElement,System.Windows.Media.Imaging.BitmapSource,System.Windows.Point)">
            <summary>
            Registers a Control as a drag source and provides default implementations of
            GiveFeedback and QueryContinueDrag. This override also handles the data object
            creation, including initialization of the drag image from the speicified Bitmap.
            </summary>
            <param name="dragSource">The drag source UIElement instance.</param>
            <param name="dragImage">A Bitmap to initialize the drag image from.</param>
            <param name="cursorOffset">The drag image cursor offset.</param>
            <returns>The created data object.</returns>
            <remarks>Callers must call UnregisterDefaultDragSource when the drag and drop
            operation is complete to avoid memory leaks.</remarks>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.UnregisterDefaultDragSource(System.Windows.UIElement)">
            <summary>
            Unregisters a drag source from the internal cache.
            </summary>
            <param name="dragSource">The drag source UIElement.</param>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.DoDragDrop(System.Windows.UIElement,System.Windows.Point,System.Windows.DragDropEffects,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Performs a default drag and drop operation for the specified drag source.
            </summary>
            <param name="dragSource">The drag source UIElement.</param>
            <param name="cursorOffset">The drag image cursor offset.</param>
            <param name="allowedEffects">The allowed drop effects.</param>
            <param name="data">The associated data.</param>
            <returns>The accepted drop effects from the completed operation.</returns>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.DoDragDrop(System.Windows.UIElement,System.Windows.Media.Imaging.BitmapSource,System.Windows.Point,System.Windows.DragDropEffects,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Performs a default drag and drop operation for the specified drag source.
            </summary>
            <param name="dragSource">The drag source UIElement.</param>
            <param name="dragImage">The Bitmap to initialize the drag image from.</param>
            <param name="cursorOffset">The drag image cursor offset.</param>
            <param name="allowedEffects">The allowed drop effects.</param>
            <param name="data">The associated data.</param>
            <returns>The accepted drop effects from the completed operation.</returns>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.DoDragDropInternal(System.Windows.UIElement,System.Windows.IDataObject,System.Windows.DragDropEffects,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Performs a default drag and drop operation for the specified drag source.
            </summary>
            <param name="dragSource">The drag source UIElement.</param>
            <param name="dataObject">The data object associated to the drag and drop operation.</param>
            <param name="allowedEffects">The allowed drop effects.</param>
            <param name="data">The associated data.</param>
            <returns>The accepted drop effects from the completed operation.</returns>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.DefaultGiveFeedbackHandler(System.Object,System.Windows.GiveFeedbackEventArgs)">
            <summary>
            Provides a default GiveFeedback event handler for drag sources.
            </summary>
            <param name="sender">The object that raised the event. Should be set to the drag source.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.DefaultGiveFeedback(System.Windows.IDataObject,System.Windows.GiveFeedbackEventArgs)">
            <summary>
            Provides a default GiveFeedback event handler for drag sources.
            </summary>
            <param name="data">The associated data object for the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.DefaultQueryContinueDragHandler(System.Object,System.Windows.QueryContinueDragEventArgs)">
            <summary>
            Provides a default handler for the QueryContinueDrag drag source event.
            </summary>
            <param name="sender">The object that raised the event. Not used internally.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.DefaultQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
            <summary>
            Provides a default handler for the QueryContinueDrag drag source event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.AllowDropDescription(System.Boolean)">
            <summary>
            Sets a flag on the system IDragSourceHelper2 object to allow drop descriptions
            on the drag image.
            </summary>
            <param name="allow">True to allow drop descriptions, otherwise False.</param>
            <remarks>Must be called before IDragSourceHelper.InitializeFromBitmap or
            IDragSourceHelper.InitializeFromControl is called.</remarks>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.InvalidateDragImage(System.Windows.IDataObject)">
            <summary>
            Invalidates the drag image.
            </summary>
            <param name="dataObject">The data object for which to invalidate the drag image.</param>
            <remarks>This call tells the drag image manager to reformat the internal
            cached drag image, based on the already set drag image bitmap and current drop
            description.</remarks>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.GetIntPtrFromData(System.Object)">
            <summary>
            Gets an IntPtr from data acquired from a data object.
            </summary>
            <param name="data">The data that contains the IntPtr.</param>
            <returns>An IntPtr.</returns>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.IsShowingLayered(System.Windows.IDataObject)">
            <summary>
            Determines if the IsShowingLayered flag is set on the data object.
            </summary>
            <param name="dataObject">The data object.</param>
            <returns>True if the flag is set, otherwise false.</returns>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.GetBooleanFromData(System.Object)">
            <summary>
            Converts compatible clipboard data to a boolean value.
            </summary>
            <param name="data">The clipboard data.</param>
            <returns>True if the data can be converted to a boolean and is set, otherwise False.</returns>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.IsDropDescriptionValid(System.Windows.IDataObject)">
            <summary>
            Checks if the current drop description, if any, is valid.
            </summary>
            <param name="dataObject">The DataObject from which to get the drop description.</param>
            <returns>True if the drop description is set, and the 
            DropImageType is not DropImageType.Invalid.</returns>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.IsDropDescriptionDefault(System.Windows.IDataObject)">
            <summary>
            Checks if the IsDefault drop description flag is set for the associated DataObject.
            </summary>
            <param name="dataObject">The associated DataObject.</param>
            <returns>True if the IsDefault flag is set, otherwise False.</returns>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.InvalidateRequired(System.Windows.IDataObject)">
            <summary>
            Checks if the InvalidateRequired drop description flag is set for the associated DataObject.
            </summary>
            <param name="dataObject">The associated DataObject.</param>
            <returns>True if the InvalidateRequired flag is set, otherwise False.</returns>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.SetDropDescriptionIsDefault(System.Windows.IDataObject,System.Boolean)">
            <summary>
            Sets the IsDefault drop description flag for the associated DataObject.
            </summary>
            <param name="dataObject">The associdated DataObject.</param>
            <param name="isDefault">True to set the flag, False to unset it.</param>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.SetInvalidateRequired(System.Windows.IDataObject,System.Boolean)">
            <summary>
            Sets the InvalidatedRequired drop description flag for the associated DataObject.
            </summary>
            <param name="dataObject">The associdated DataObject.</param>
            <param name="isDefault">True to set the flag, False to unset it.</param>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.SetDropDescriptionFlag(System.Windows.IDataObject,Mygod.Windows.DragSourceHelper.DropDescriptionFlags)">
            <summary>
            Sets a drop description flag.
            </summary>
            <param name="dataObject">The associated DataObject.</param>
            <param name="flag">The drop description flag to set.</param>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.UnsetDropDescriptionFlag(System.Windows.IDataObject,Mygod.Windows.DragSourceHelper.DropDescriptionFlags)">
            <summary>
            Unsets a drop description flag.
            </summary>
            <param name="dataObject">The associated DataObject.</param>
            <param name="flag">The drop description flag to unset.</param>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.GetDropImageType(System.Windows.IDataObject)">
            <summary>
            Gets the current DropDescription's drop image type.
            </summary>
            <param name="dataObject">The DataObject.</param>
            <returns>The current drop image type.</returns>
        </member>
        <member name="T:Mygod.Windows.DragSourceHelper.AdviseSink">
            <summary>
            Provides an advisory sink for the COM IDataObject implementation.
            </summary>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.AdviseSink.#ctor(System.Windows.IDataObject)">
            <summary>
            Creates an AdviseSink associated to the specified data object.
            </summary>
            <param name="data">The data object.</param>
        </member>
        <member name="M:Mygod.Windows.DragSourceHelper.AdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
            <summary>
            Handles DataChanged events from a COM IDataObject.
            </summary>
            <param name="format">The data format that had a change.</param>
            <param name="stgmedium">The data value.</param>
        </member>
        <member name="T:Mygod.Windows.DragSourceHelper.DragSourceEntry">
            <summary>
            Represents a drag source context entry.
            </summary>
        </member>
        <member name="T:Mygod.Windows.DragSourceHelper.DropDescriptionFlags">
            <summary>
            Internally used to track information about the current drop description.
            </summary>
        </member>
        <member name="F:Mygod.Windows.DropTargetHelper.SInstance">
            <summary>
            Internal instance of the DragDropHelper.
            </summary>
        </member>
        <member name="M:Mygod.Windows.DropTargetHelper.DragEnter(System.Windows.Window,System.Windows.IDataObject,System.Windows.Point,System.Windows.DragDropEffects)">
            <summary>
            Notifies the DragDropHelper that the specified Window received
            a DragEnter event.
            </summary>
            <param name="window">The Window the received the DragEnter event.</param>
            <param name="data">The DataObject containing a drag image.</param>
            <param name="cursorOffset">The current cursor's offset relative to the window.</param>
            <param name="effect">The accepted drag drop effect.</param>
        </member>
        <member name="M:Mygod.Windows.DropTargetHelper.DragEnter(System.Windows.Window,System.Windows.IDataObject,System.Windows.Point,System.Windows.DragDropEffects,System.String,System.String)">
            <summary>
            Notifies the DragDropHelper that the specified Window received
            a DragEnter event.
            </summary>
            <param name="window">The Window the received the DragEnter event.</param>
            <param name="data">The DataObject containing a drag image.</param>
            <param name="cursorOffset">The current cursor's offset relative to the window.</param>
            <param name="effect">The accepted drag drop effect.</param>
            <param name="descriptionMessage">The drop description message.</param>
            <param name="descriptionInsert">The drop description insert.</param>
            <remarks>Callers of this DragEnter override should make sure to call
            the DragLeave override taking an IDataObject parameter in order to clear
            the drop description.</remarks>
        </member>
        <member name="M:Mygod.Windows.DropTargetHelper.DragOver(System.Windows.Point,System.Windows.DragDropEffects)">
            <summary>
            Notifies the DragDropHelper that the current Window received
            a DragOver event.
            </summary>
            <param name="cursorOffset">The current cursor's offset relative to the window.</param>
            <param name="effect">The accepted drag drop effect.</param>
        </member>
        <member name="M:Mygod.Windows.DropTargetHelper.DragLeave">
            <summary>
            Notifies the DragDropHelper that the current Window received
            a DragLeave event.
            </summary>
        </member>
        <member name="M:Mygod.Windows.DropTargetHelper.DragLeave(System.Windows.IDataObject)">
            <summary>
            Notifies the DragDropHelper that the current Window received
            a DragLeave event.
            </summary>
            <param name="data">The data object associated to the event.</param>
        </member>
        <member name="M:Mygod.Windows.DropTargetHelper.Drop(System.Windows.IDataObject,System.Windows.Point,System.Windows.DragDropEffects)">
            <summary>
            Notifies the DragDropHelper that the current Window received
            a DragOver event.
            </summary>
            <param name="data">The DataObject containing a drag image.</param>
            <param name="cursorOffset">The current cursor's offset relative to the window.</param>
            <param name="effect">The accepted drag drop effect.</param>
        </member>
        <member name="M:Mygod.Windows.DropTargetHelper.Show(System.Boolean)">
            <summary>
            Tells the DragDropHelper to show or hide the drag image.
            </summary>
            <param name="show">True to show the image. False to hide it.</param>
        </member>
        <member name="M:Mygod.Windows.WpfDropTargetHelperExtensions.DragEnter(Mygod.Windows.IDropTargetHelper,System.Windows.Window,System.Windows.IDataObject,System.Windows.Point,System.Windows.DragDropEffects)">
            <summary>
            Notifies the DragDropHelper that the specified Window received
            a DragEnter event.
            </summary>
            <param name="dropHelper">The DragDropHelper instance to notify.</param>
            <param name="window">The Window the received the DragEnter event.</param>
            <param name="data">The DataObject containing a drag image.</param>
            <param name="cursorOffset">The current cursor's offset relative to the window.</param>
            <param name="effect">The accepted drag drop effect.</param>
        </member>
        <member name="M:Mygod.Windows.WpfDropTargetHelperExtensions.DragOver(Mygod.Windows.IDropTargetHelper,System.Windows.Point,System.Windows.DragDropEffects)">
            <summary>
            Notifies the DragDropHelper that the current Window received
            a DragOver event.
            </summary>
            <param name="dropHelper">The DragDropHelper instance to notify.</param>
            <param name="cursorOffset">The current cursor's offset relative to the window.</param>
            <param name="effect">The accepted drag drop effect.</param>
        </member>
        <member name="M:Mygod.Windows.WpfDropTargetHelperExtensions.Drop(Mygod.Windows.IDropTargetHelper,System.Windows.IDataObject,System.Windows.Point,System.Windows.DragDropEffects)">
            <summary>
            Notifies the DragDropHelper that the current Window received
            a Drop event.
            </summary>
            <param name="dropHelper">The DragDropHelper instance to notify.</param>
            <param name="data">The DataObject containing a drag image.</param>
            <param name="cursorOffset">The current cursor's offset relative to the window.</param>
            <param name="effect">The accepted drag drop effect.</param>
        </member>
        <member name="T:Mygod.Windows.GlassWindow">
            <summary>
            WPF Glass Window
            Inherit from this window class to enable glass on a WPF window
            </summary>
        </member>
        <member name="M:Mygod.Windows.GlassWindow.SetAeroGlassTransparency">
            <summary>
            Makes the background of current window transparent from both Wpf and Windows Perspective
            </summary>
        </member>
        <member name="M:Mygod.Windows.GlassWindow.ResetAeroGlass">
            <summary>
            Resets the AeroGlass exclusion area.
            </summary>
        </member>
        <member name="M:Mygod.Windows.GlassWindow.OnSourceInitialized(System.EventArgs)">
            <summary>
            OnSourceInitialized
            Override SourceInitialized to initialize windowHandle for this window.
            A valid windowHandle is available only after the sourceInitialized is completed
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="P:Mygod.Windows.GlassWindow.AeroGlassCompositionEnabled">
            <summary>
            Get determines if AeroGlass is enabled on the desktop. Set enables/disables AreoGlass on the desktop.
            </summary>
        </member>
        <member name="E:Mygod.Windows.GlassWindow.AeroGlassCompositionChanged">
            <summary>
            Fires when the availability of Glass effect changes.
            </summary>
        </member>
        <member name="T:Mygod.Windows.AeroGlassCompositionChangedEventArgs">
            <summary>
            Event argument for The GlassAvailabilityChanged event
            </summary>
        </member>
        <member name="P:Mygod.Windows.AeroGlassCompositionChangedEventArgs.GlassAvailable">
            <summary>
            The new GlassAvailable state
            </summary>
        </member>
        <member name="T:Mygod.Windows.DesktopWindowManagerNativeMethods">
            <summary>
            Internal class that contains interop declarations for 
            functions that are not benign and are performance critical. 
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
